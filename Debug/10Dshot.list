
10Dshot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b72c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800b8d0  0800b8d0  0000c8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800befc  0800befc  0000d1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800befc  0800befc  0000cefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf04  0800bf04  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf08  0800bf08  0000cf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800bf0c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  200001ec  0800c0f8  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c64  0800c0f8  0000dc64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dc0  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb9  00000000  00000000  0001dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2b  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a0  00000000  00000000  0002253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c2d  00000000  00000000  0003abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913c7  00000000  00000000  0004d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000debcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  000dec14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000e3f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8b4 	.word	0x0800b8b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800b8b4 	.word	0x0800b8b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_DMA_Init+0x5c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <MX_DMA_Init+0x5c>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_DMA_Init+0x5c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	203a      	movs	r0, #58	@ 0x3a
 8001078:	f002 f995 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800107c:	203a      	movs	r0, #58	@ 0x3a
 800107e:	f002 f9ae 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2044      	movs	r0, #68	@ 0x44
 8001088:	f002 f98d 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800108c:	2044      	movs	r0, #68	@ 0x44
 800108e:	f002 f9a6 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2046      	movs	r0, #70	@ 0x46
 8001098:	f002 f985 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800109c:	2046      	movs	r0, #70	@ 0x46
 800109e:	f002 f99e 	bl	80033de <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	@ (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <get_all_motors_gpio_mask>:

const uint8_t motor_gpio_bit_positions[MOTORS_COUNT] = {
    0, 1, 2, 4, 5, 6, 7, 8, 11, 12
};

static uint32_t get_all_motors_gpio_mask() {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
    uint32_t mask = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
    for (uint8_t m = 0; m < MOTORS_COUNT; m++) {
 800114a:	2300      	movs	r3, #0
 800114c:	70fb      	strb	r3, [r7, #3]
 800114e:	e00c      	b.n	800116a <get_all_motors_gpio_mask+0x2a>
        mask |= (1 << motor_gpio_bit_positions[m]);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <get_all_motors_gpio_mask+0x40>)
 8001154:	5cd3      	ldrb	r3, [r2, r3]
 8001156:	461a      	mov	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	4093      	lsls	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	607b      	str	r3, [r7, #4]
    for (uint8_t m = 0; m < MOTORS_COUNT; m++) {
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	3301      	adds	r3, #1
 8001168:	70fb      	strb	r3, [r7, #3]
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b09      	cmp	r3, #9
 800116e:	d9ef      	bls.n	8001150 <get_all_motors_gpio_mask+0x10>
    }
    return mask;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	0800ba34 	.word	0x0800ba34

08001184 <preset_bb_Dshot_buffers>:

void preset_bb_Dshot_buffers(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
    memset((void*)dshot_bb_buffer_10, 0, sizeof(dshot_bb_buffer_10));
 800118a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800118e:	2100      	movs	r1, #0
 8001190:	481e      	ldr	r0, [pc, #120]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 8001192:	f006 fb57 	bl	8007844 <memset>
    uint32_t all_motors_mask = get_all_motors_gpio_mask();
 8001196:	f7ff ffd3 	bl	8001140 <get_all_motors_gpio_mask>
 800119a:	60b8      	str	r0, [r7, #8]

    dshot_bb_buffer_10[0] = all_motors_mask;
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	6013      	str	r3, [r2, #0]

    for (uint16_t bit = 0; bit < DSHOT_BB_BUFFER_BITS; bit++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	e022      	b.n	80011ee <preset_bb_Dshot_buffers+0x6a>
        uint16_t idx_base = (bit * DSHOT_BB_FRAME_SECTIONS)+1;
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	80fb      	strh	r3, [r7, #6]
        uint16_t idx_end = idx_base + DSHOT_BB_1_LENGTH;
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	3306      	adds	r3, #6
 80011b6:	80bb      	strh	r3, [r7, #4]

        dshot_bb_buffer_10[idx_base] |= (all_motors_mask << 16); // LOW start
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4a14      	ldr	r2, [pc, #80]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 80011bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	4910      	ldr	r1, [pc, #64]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (idx_end < DSHOT_BB_BUFFER_LENGTH) {
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	2b80      	cmp	r3, #128	@ 0x80
 80011d2:	d809      	bhi.n	80011e8 <preset_bb_Dshot_buffers+0x64>
            dshot_bb_buffer_10[idx_end] |= all_motors_mask;       // HIGH restore
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 80011d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	490a      	ldr	r1, [pc, #40]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t bit = 0; bit < DSHOT_BB_BUFFER_BITS; bit++) {
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	3301      	adds	r3, #1
 80011ec:	81fb      	strh	r3, [r7, #14]
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d9d9      	bls.n	80011a8 <preset_bb_Dshot_buffers+0x24>
        }
    }

    // Ensure final output is HIGH (idle)
    dshot_bb_buffer_10[DSHOT_BB_BUFFER_LENGTH - 1] |= all_motors_mask;
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 80011f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	4a03      	ldr	r2, [pc, #12]	@ (800120c <preset_bb_Dshot_buffers+0x88>)
 8001200:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000254 	.word	0x20000254

08001210 <fill_bb_Dshot_buffers>:

static void fill_bb_Dshot_buffers(const uint16_t motor_packets[MOTORS_COUNT]) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    preset_bb_Dshot_buffers();
 8001218:	f7ff ffb4 	bl	8001184 <preset_bb_Dshot_buffers>

    for (uint8_t bit = 0; bit < BITS_PER_FRAME; bit++) {
 800121c:	2300      	movs	r3, #0
 800121e:	77fb      	strb	r3, [r7, #31]
 8001220:	e051      	b.n	80012c6 <fill_bb_Dshot_buffers+0xb6>
        uint16_t idx_base = bit * DSHOT_BB_FRAME_SECTIONS;
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	b29b      	uxth	r3, r3
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	83bb      	strh	r3, [r7, #28]
        uint8_t bit_pos = 15 - bit;
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	f1c3 030f 	rsb	r3, r3, #15
 8001230:	76fb      	strb	r3, [r7, #27]
        uint16_t idx_one = idx_base + DSHOT_BB_1_LENGTH;
 8001232:	8bbb      	ldrh	r3, [r7, #28]
 8001234:	3306      	adds	r3, #6
 8001236:	833b      	strh	r3, [r7, #24]
        uint16_t idx_zero = idx_base + DSHOT_BB_0_LENGTH;
 8001238:	8bbb      	ldrh	r3, [r7, #28]
 800123a:	3304      	adds	r3, #4
 800123c:	82fb      	strh	r3, [r7, #22]

        for (uint8_t m = 0; m < MOTORS_COUNT; m++) {
 800123e:	2300      	movs	r3, #0
 8001240:	77bb      	strb	r3, [r7, #30]
 8001242:	e03a      	b.n	80012ba <fill_bb_Dshot_buffers+0xaa>
            uint32_t pin_mask = (1 << motor_gpio_bit_positions[m]);
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <fill_bb_Dshot_buffers+0xc8>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	461a      	mov	r2, r3
 800124c:	2301      	movs	r3, #1
 800124e:	4093      	lsls	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
            bool is_one = (motor_packets[m] >> bit_pos) & 1;
 8001252:	7fbb      	ldrb	r3, [r7, #30]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	7efb      	ldrb	r3, [r7, #27]
 8001260:	fa42 f303 	asr.w	r3, r2, r3
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]

            if (!is_one) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01a      	beq.n	80012b4 <fill_bb_Dshot_buffers+0xa4>
                if (idx_one < DSHOT_BB_BUFFER_LENGTH)
 800127e:	8b3b      	ldrh	r3, [r7, #24]
 8001280:	2b80      	cmp	r3, #128	@ 0x80
 8001282:	d80a      	bhi.n	800129a <fill_bb_Dshot_buffers+0x8a>
                    dshot_bb_buffer_10[idx_one] &= ~pin_mask;     // prevent early high
 8001284:	8b3b      	ldrh	r3, [r7, #24]
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <fill_bb_Dshot_buffers+0xcc>)
 8001288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43da      	mvns	r2, r3
 8001290:	8b3b      	ldrh	r3, [r7, #24]
 8001292:	400a      	ands	r2, r1
 8001294:	4911      	ldr	r1, [pc, #68]	@ (80012dc <fill_bb_Dshot_buffers+0xcc>)
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (idx_zero < DSHOT_BB_BUFFER_LENGTH)
 800129a:	8afb      	ldrh	r3, [r7, #22]
 800129c:	2b80      	cmp	r3, #128	@ 0x80
 800129e:	d809      	bhi.n	80012b4 <fill_bb_Dshot_buffers+0xa4>
                    dshot_bb_buffer_10[idx_zero] |= pin_mask;     // rise later for '0'
 80012a0:	8afb      	ldrh	r3, [r7, #22]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <fill_bb_Dshot_buffers+0xcc>)
 80012a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012a8:	8afb      	ldrh	r3, [r7, #22]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	490b      	ldr	r1, [pc, #44]	@ (80012dc <fill_bb_Dshot_buffers+0xcc>)
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint8_t m = 0; m < MOTORS_COUNT; m++) {
 80012b4:	7fbb      	ldrb	r3, [r7, #30]
 80012b6:	3301      	adds	r3, #1
 80012b8:	77bb      	strb	r3, [r7, #30]
 80012ba:	7fbb      	ldrb	r3, [r7, #30]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d9c1      	bls.n	8001244 <fill_bb_Dshot_buffers+0x34>
    for (uint8_t bit = 0; bit < BITS_PER_FRAME; bit++) {
 80012c0:	7ffb      	ldrb	r3, [r7, #31]
 80012c2:	3301      	adds	r3, #1
 80012c4:	77fb      	strb	r3, [r7, #31]
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d9aa      	bls.n	8001222 <fill_bb_Dshot_buffers+0x12>
            }
        }
    }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800ba34 	.word	0x0800ba34
 80012dc:	20000254 	.word	0x20000254

080012e0 <prepare_Dshot_package>:

uint16_t prepare_Dshot_package(uint16_t value, bool telemetry) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	717b      	strb	r3, [r7, #5]
    value = (value << 1) | (telemetry ? 1 : 0);
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	80fb      	strh	r3, [r7, #6]
    uint16_t crc = (~(value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	b29a      	uxth	r2, r3
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4053      	eors	r3, r2
 800130c:	b29a      	uxth	r2, r3
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b29b      	uxth	r3, r3
 8001314:	4053      	eors	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	81fb      	strh	r3, [r7, #14]
    return (value << 4) | crc;
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	b21a      	sxth	r2, r3
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	b29b      	uxth	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <update_motors_Tx_Only>:


void update_motors_Tx_Only(void) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
    GPIOA->BSRR = get_all_motors_gpio_mask();
 8001346:	4c3c      	ldr	r4, [pc, #240]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001348:	f7ff fefa 	bl	8001140 <get_all_motors_gpio_mask>
 800134c:	4603      	mov	r3, r0
 800134e:	61a3      	str	r3, [r4, #24]

    fill_bb_Dshot_buffers(motor_values);
 8001350:	483a      	ldr	r0, [pc, #232]	@ (800143c <update_motors_Tx_Only+0xfc>)
 8001352:	f7ff ff5d 	bl	8001210 <fill_bb_Dshot_buffers>
    bdshot_reception_1 = true;
 8001356:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <update_motors_Tx_Only+0x100>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]

    // Set GPIOs to output mode
    GPIOA->MODER |= (
 800135c:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4935      	ldr	r1, [pc, #212]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001362:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <update_motors_Tx_Only+0x104>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
        GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 |
        GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 |
        GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER11_0 |
        GPIO_MODER_MODER12_0
    );
    GPIOA->MODER &= ~(
 8001368:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4932      	ldr	r1, [pc, #200]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800136e:	4b36      	ldr	r3, [pc, #216]	@ (8001448 <update_motors_Tx_Only+0x108>)
 8001370:	4013      	ands	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
        GPIO_MODER_MODER7_1 | GPIO_MODER_MODER8_1 | GPIO_MODER_MODER11_1 |
        GPIO_MODER_MODER12_1
    );

    // Output settings
    GPIOA->OTYPER &= ~(
 8001374:	4b30      	ldr	r3, [pc, #192]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800137a:	f423 53cf 	bic.w	r3, r3, #6624	@ 0x19e0
 800137e:	f023 0317 	bic.w	r3, r3, #23
 8001382:	6053      	str	r3, [r2, #4]
        GPIO_OTYPER_OT0  | GPIO_OTYPER_OT1  | GPIO_OTYPER_OT2  |
        GPIO_OTYPER_OT4  | GPIO_OTYPER_OT5  | GPIO_OTYPER_OT6  |
        GPIO_OTYPER_OT7  | GPIO_OTYPER_OT8  | GPIO_OTYPER_OT11 |
        GPIO_OTYPER_OT12
    );
    GPIOA->PUPDR |= (
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	492b      	ldr	r1, [pc, #172]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <update_motors_Tx_Only+0x104>)
 800138c:	4313      	orrs	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
        GPIO_PUPDR_PUPDR0_0  | GPIO_PUPDR_PUPDR1_0  | GPIO_PUPDR_PUPDR2_0  |
        GPIO_PUPDR_PUPDR4_0  | GPIO_PUPDR_PUPDR5_0  | GPIO_PUPDR_PUPDR6_0  |
        GPIO_PUPDR_PUPDR7_0  | GPIO_PUPDR_PUPDR8_0  | GPIO_PUPDR_PUPDR11_0 |
        GPIO_PUPDR_PUPDR12_0
    );
    GPIOA->PUPDR &= ~(
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	4928      	ldr	r1, [pc, #160]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 8001396:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <update_motors_Tx_Only+0x108>)
 8001398:	4013      	ands	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
        GPIO_PUPDR_PUPDR0_1  | GPIO_PUPDR_PUPDR1_1  | GPIO_PUPDR_PUPDR2_1  |
        GPIO_PUPDR_PUPDR4_1  | GPIO_PUPDR_PUPDR5_1  | GPIO_PUPDR_PUPDR6_1  |
        GPIO_PUPDR_PUPDR7_1  | GPIO_PUPDR_PUPDR8_1  | GPIO_PUPDR_PUPDR11_1 |
        GPIO_PUPDR_PUPDR12_1
    );
    GPIOA->OSPEEDR |= (
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	4925      	ldr	r1, [pc, #148]	@ (8001438 <update_motors_Tx_Only+0xf8>)
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <update_motors_Tx_Only+0x10c>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
    );

    // --- CRITICAL SYNCHRONIZATION FOR FIRST BIT ---

        // 5. Cleanly stop TIM1 and DMA stream
        TIM1->CR1 &= ~TIM_CR1_CEN;       // Stop TIM1
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <update_motors_Tx_Only+0x110>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a28      	ldr	r2, [pc, #160]	@ (8001450 <update_motors_Tx_Only+0x110>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
        DMA2_Stream5->CR &= ~DMA_SxCR_EN; // Disable DMA
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream5->CR & DMA_SxCR_EN) { __NOP(); } // Wait for DMA to fully disable
 80013c0:	e000      	b.n	80013c4 <update_motors_Tx_Only+0x84>
 80013c2:	bf00      	nop
 80013c4:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f8      	bne.n	80013c2 <update_motors_Tx_Only+0x82>

        // Clear any pending DMA interrupt flags for stream5
        DMA2->HIFCR = DMA_HIFCR_CTCIF5 | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTEIF5 |
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <update_motors_Tx_Only+0x118>)
 80013d2:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 80013d6:	60da      	str	r2, [r3, #12]
                      DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CFEIF5;

        // 6. Configure DMA for TX (Memory-to-Peripheral)
        DMA2_Stream5->PAR = (uint32_t)(&GPIOA->BSRR); // Peripheral address is BSRR
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013da:	4a20      	ldr	r2, [pc, #128]	@ (800145c <update_motors_Tx_Only+0x11c>)
 80013dc:	609a      	str	r2, [r3, #8]
        DMA2_Stream5->M0AR = (uint32_t)(dshot_bb_buffer_10); // Source is your TX buffer
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <update_motors_Tx_Only+0x120>)
 80013e2:	60da      	str	r2, [r3, #12]
        DMA2_Stream5->NDTR = DSHOT_BB_BUFFER_LENGTH; // Number of transfers
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013e6:	2281      	movs	r2, #129	@ 0x81
 80013e8:	605a      	str	r2, [r3, #4]

        // Re-assign CR completely to ensure all bits are set correctly for TX
         //This atomic write is important to avoid intermediate states.
        uint32_t cr_val = (6 << DMA_SxCR_CHSEL_Pos)      // DMA Channel 6 for TIM1_UP (verify this is correct for your setup)
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <update_motors_Tx_Only+0x124>)
 80013ec:	607b      	str	r3, [r7, #4]
                        | DMA_SxCR_PSIZE_1               // Peripheral size = 32-bit (for BSRR)
                         | DMA_SxCR_MINC                  // Memory increment enabled
                        | DMA_SxCR_DIR_0                 // Direction: Memory-to-Peripheral (00)
                        | DMA_SxCR_TCIE;                // Enable transfer complete interrupt

       DMA2_Stream5->CR = cr_val; // Write the compiled CR value
 80013ee:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <update_motors_Tx_Only+0x114>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]

       TIM1->ARR = DSHOT_BB_SECTION_LENGTH - 1; // <--- ENSURE THIS IS EXPLICITLY SET FOR TX
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <update_motors_Tx_Only+0x110>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c


        // 7. Reset TIM1's counter and clear update flag
        TIM1->EGR |= TIM_EGR_UG;   // Generate Update event (resets CNT, PSC, ARR)
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <update_motors_Tx_Only+0x110>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <update_motors_Tx_Only+0x110>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6153      	str	r3, [r2, #20]
        TIM1->CNT = 0;             // Ensure counter is explicitly at 0
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <update_motors_Tx_Only+0x110>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800140c:	f3bf 8f4f 	dsb	sy
}
 8001410:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001412:	f3bf 8f6f 	isb	sy
}
 8001416:	bf00      	nop
        __DSB(); // Data Synchronization Barrier
        __ISB(); // Instruction Synchronization Barrier

        // 9. Enable both TIM1 and DMA with precise timing
        // Start TIM1 first, then enable DMA to ensure TIM1 is ready to generate the first trigger
        TIM1->CR1 |= TIM_CR1_CEN;        // Enable TIM1
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <update_motors_Tx_Only+0x110>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <update_motors_Tx_Only+0x110>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]
        DMA2_Stream5->CR |= DMA_SxCR_EN; // Enable DMA to begin receiving triggers from TIM1
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <update_motors_Tx_Only+0x114>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <update_motors_Tx_Only+0x114>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	40020000 	.word	0x40020000
 800143c:	20000240 	.word	0x20000240
 8001440:	2000000c 	.word	0x2000000c
 8001444:	01415515 	.word	0x01415515
 8001448:	fd7d55d5 	.word	0xfd7d55d5
 800144c:	03c3ff3f 	.word	0x03c3ff3f
 8001450:	40010000 	.word	0x40010000
 8001454:	40026488 	.word	0x40026488
 8001458:	40026400 	.word	0x40026400
 800145c:	40020018 	.word	0x40020018
 8001460:	20000254 	.word	0x20000254
 8001464:	0c035450 	.word	0x0c035450

08001468 <setup_Dshot_Tx_Only>:

void setup_Dshot_Tx_Only(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a2b      	ldr	r2, [pc, #172]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <setup_Dshot_Tx_Only+0xbc>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30

    TIM1->CR1 = TIM_CR1_ARPE | TIM_CR1_URS;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014a4:	2284      	movs	r2, #132	@ 0x84
 80014a6:	601a      	str	r2, [r3, #0]
    TIM1->PSC = 0;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = DSHOT_BB_FRAME_LENGTH / DSHOT_BB_FRAME_SECTIONS - 1;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014b0:	2210      	movs	r2, #16
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->CCR1 = (DSHOT_BB_FRAME_LENGTH / DSHOT_BB_FRAME_SECTIONS);///2;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014b6:	2211      	movs	r2, #17
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CR2 = TIM_CR2_MMS_1;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014bc:	2220      	movs	r2, #32
 80014be:	605a      	str	r2, [r3, #4]
    TIM1->DIER |= TIM_DIER_UDE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	60d3      	str	r3, [r2, #12]
    TIM1->EGR |= TIM_EGR_UG;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6153      	str	r3, [r2, #20]
    TIM1->SR &= ~TIM_SR_UIF;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <setup_Dshot_Tx_Only+0xc0>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6113      	str	r3, [r2, #16]

    DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <setup_Dshot_Tx_Only+0xc4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a10      	ldr	r2, [pc, #64]	@ (800152c <setup_Dshot_Tx_Only+0xc4>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream5->CR & DMA_SxCR_EN);
 80014f0:	bf00      	nop
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <setup_Dshot_Tx_Only+0xc4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <setup_Dshot_Tx_Only+0x8a>
    DMA2->HIFCR = 0xFFFFFFFF;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <setup_Dshot_Tx_Only+0xc8>)
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	60da      	str	r2, [r3, #12]

    DMA2_Stream5->CR = (6 << DMA_SxCR_CHSEL_Pos) |
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <setup_Dshot_Tx_Only+0xc4>)
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <setup_Dshot_Tx_Only+0xcc>)
 800150a:	601a      	str	r2, [r3, #0]
                       DMA_SxCR_PL |
                       DMA_SxCR_MSIZE_1 | DMA_SxCR_PSIZE_1 |
                       DMA_SxCR_MINC | DMA_SxCR_TCIE;

    NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800150c:	2044      	movs	r0, #68	@ 0x44
 800150e:	f7ff fdcf 	bl	80010b0 <__NVIC_EnableIRQ>
    NVIC_SetPriority(DMA2_Stream5_IRQn, 3);
 8001512:	2103      	movs	r1, #3
 8001514:	2044      	movs	r0, #68	@ 0x44
 8001516:	f7ff fde9 	bl	80010ec <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40010000 	.word	0x40010000
 800152c:	40026488 	.word	0x40026488
 8001530:	40026400 	.word	0x40026400
 8001534:	0c035410 	.word	0x0c035410

08001538 <arm_bdshot_rx_capture>:
     }
 }

 // Helper: arm DMA + TIM1 to capture GPIOA->IDR into dshot_bb_buffer_1_4_r
 static inline void arm_bdshot_rx_capture(void)
 {
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
     const uint32_t pins_mask =
 800153e:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <arm_bdshot_rx_capture+0xf8>)
 8001540:	60fb      	str	r3, [r7, #12]
         (GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 |
          GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER6 |
          GPIO_MODER_MODER7 | GPIO_MODER_MODER8 | GPIO_MODER_MODER11 |
          GPIO_MODER_MODER12);

     const uint32_t pupdr_clear_mask =
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <arm_bdshot_rx_capture+0xf8>)
 8001544:	60bb      	str	r3, [r7, #8]
         ((3U << (0*2)) | (3U << (1*2)) | (3U << (2*2)) |
          (3U << (4*2)) | (3U << (5*2)) | (3U << (6*2)) |
          (3U << (7*2)) | (3U << (8*2)) | (3U << (11*2)) |
          (3U << (12*2)));

     const uint32_t pupdr_pullup_mask =
 8001546:	4b3b      	ldr	r3, [pc, #236]	@ (8001634 <arm_bdshot_rx_capture+0xfc>)
 8001548:	607b      	str	r3, [r7, #4]
          (1U << (4*2)) | (1U << (5*2)) | (1U << (6*2)) |
          (1U << (7*2)) | (1U << (8*2)) | (1U << (11*2)) |
          (1U << (12*2)));

     // 1) Set pins to input mode (00)
     GPIOA->MODER &= ~pins_mask;
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	4939      	ldr	r1, [pc, #228]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 8001554:	4013      	ands	r3, r2
 8001556:	600b      	str	r3, [r1, #0]

     // 2) Configure pull-ups atomically: clear then set
     GPIOA->PUPDR &= ~pupdr_clear_mask;
 8001558:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	43db      	mvns	r3, r3
 8001560:	4935      	ldr	r1, [pc, #212]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 8001562:	4013      	ands	r3, r2
 8001564:	60cb      	str	r3, [r1, #12]
     GPIOA->PUPDR |= pupdr_pullup_mask;
 8001566:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	4933      	ldr	r1, [pc, #204]	@ (8001638 <arm_bdshot_rx_capture+0x100>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4313      	orrs	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]

     uint32_t sample_period =  (DSHOT_BB_FRAME_LENGTH * DSHOT_MODE) /(BDSHOT_RESPONSE_BITRATE * BDSHOT_RESPONSE_OVERSAMPLING);
 8001572:	2323      	movs	r3, #35	@ 0x23
 8001574:	617b      	str	r3, [r7, #20]

     if (sample_period == 0) sample_period = 1;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <arm_bdshot_rx_capture+0x48>
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
     TIM1->CR1 &= ~TIM_CR1_CEN;
 8001580:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]
     TIM1->ARR = sample_period - 1;
 800158c:	4a2b      	ldr	r2, [pc, #172]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3b01      	subs	r3, #1
 8001592:	62d3      	str	r3, [r2, #44]	@ 0x2c
     TIM1->CCR1 = sample_period/2  ; // small safe value, not critical for DMA TRGO if CR2 MMS is set
 8001594:	4a29      	ldr	r2, [pc, #164]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	6353      	str	r3, [r2, #52]	@ 0x34
     TIM1->EGR |= TIM_EGR_UG; // update registers
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a26      	ldr	r2, [pc, #152]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6153      	str	r3, [r2, #20]

     // 4) Configure DMA2 Stream5 for peripheral->memory (GPIOA->IDR -> buffer)
     // Disable stream before reconfiguring
     DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a24      	ldr	r2, [pc, #144]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]
     while (DMA2_Stream5->CR & DMA_SxCR_EN) { __NOP(); }
 80015b4:	e000      	b.n	80015b8 <arm_bdshot_rx_capture+0x80>
 80015b6:	bf00      	nop
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f8      	bne.n	80015b6 <arm_bdshot_rx_capture+0x7e>

     // Clear pending flags for stream5
     DMA2->HIFCR = DMA_HIFCR_CTCIF5 | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTEIF5 |
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <arm_bdshot_rx_capture+0x10c>)
 80015c6:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 80015ca:	60da      	str	r2, [r3, #12]
                   DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CFEIF5;

     // Peripheral address = input data register
     DMA2_Stream5->PAR = (uint32_t)(&GPIOA->IDR);
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <arm_bdshot_rx_capture+0x110>)
 80015d0:	609a      	str	r2, [r3, #8]

     // Memory address = your rx buffer (ensure buffer is word aligned)
     DMA2_Stream5->M0AR = (uint32_t)dshot_bb_buffer_1_4_r;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015d4:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <arm_bdshot_rx_capture+0x114>)
 80015d6:	60da      	str	r2, [r3, #12]

     // NDTR = desired sample count (make sure this fits)
     uint32_t ndtr = (uint32_t)((31 * BDSHOT_RESPONSE_BITRATE / 1000 + BDSHOT_RESPONSE_LENGTH + 1) * BDSHOT_RESPONSE_OVERSAMPLING);
 80015d8:	238a      	movs	r3, #138	@ 0x8a
 80015da:	613b      	str	r3, [r7, #16]
     if (ndtr > 0xFFFF) ndtr = 0xFFFF;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e2:	d302      	bcc.n	80015ea <arm_bdshot_rx_capture+0xb2>
 80015e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015e8:	613b      	str	r3, [r7, #16]
     DMA2_Stream5->NDTR = ndtr;
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6053      	str	r3, [r2, #4]

     // CR: channel select, medium/high priority, peripheral size = 32-bit (PSIZE=10), memory size = 32-bit (MSIZE=10),
     // MN_INC = memory increment, DIR = Peripheral-to-memory (00 = P2M, actually on F4: DIR bits 0..1 = 00: peripheral-to-memory),
     // TCIE = transfer complete interrupt enabled.
     // Build CR value based on earlier configuration in setup_Dshot_Tx_Only:
     uint32_t cr_val = (6 << DMA_SxCR_CHSEL_Pos)      // channel 6
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <arm_bdshot_rx_capture+0x118>)
 80015f2:	603b      	str	r3, [r7, #0]
                     | DMA_SxCR_PSIZE_1               // peripheral size = 32-bit
                     | DMA_SxCR_MINC                  // memory increment
                     /* DIR = 00 for peripheral-to-memory so leave DIR bits cleared */
                     | DMA_SxCR_TCIE;                // enable transfer complete interrupt

     DMA2_Stream5->CR = cr_val;
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015fa:	f3bf 8f4f 	dsb	sy
}
 80015fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001600:	f3bf 8f6f 	isb	sy
}
 8001604:	bf00      	nop

     __DSB(); __ISB(); // ensure memory ops complete before enabling DMA

     // 5) Enable DMA stream (TCIE already set)
     DMA2_Stream5->CR |= DMA_SxCR_EN;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <arm_bdshot_rx_capture+0x108>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

     // 6) Reset and start TIM1 so DMA requests begin immediately
     TIM1->CNT = 0;
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
     // Ensure TIM1 TRGO is configured to generate DMA requests (setup_Dshot_Tx_Only used CR2 MMS_1 earlier)
     TIM1->CR1 |= TIM_CR1_CEN;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	@ (800163c <arm_bdshot_rx_capture+0x104>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]
 }
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	03c3ff3f 	.word	0x03c3ff3f
 8001634:	01415515 	.word	0x01415515
 8001638:	40020000 	.word	0x40020000
 800163c:	40010000 	.word	0x40010000
 8001640:	40026488 	.word	0x40026488
 8001644:	40026400 	.word	0x40026400
 8001648:	40020010 	.word	0x40020010
 800164c:	2000045c 	.word	0x2000045c
 8001650:	0c035410 	.word	0x0c035410

08001654 <DMA2_Stream5_IRQHandler>:

 // IRQ handler: stream5 used for both TX and RX transitions: TC toggles bdshot_reception_1
 void DMA2_Stream5_IRQHandler(void)
 {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
     // Transfer complete for Stream5?
     if (DMA2->HISR & DMA_HISR_TCIF5) {
 8001658:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001660:	2b00      	cmp	r3, #0
 8001662:	d02f      	beq.n	80016c4 <DMA2_Stream5_IRQHandler+0x70>
         // Clear the flag
         DMA2->HIFCR |= DMA_HIFCR_CTCIF5;
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 800166a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800166e:	60d3      	str	r3, [r2, #12]

         if (bdshot_reception_1) {
 8001670:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <DMA2_Stream5_IRQHandler+0xd8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <DMA2_Stream5_IRQHandler+0x30>
             // We just finished the TX DMA. Immediately arm RX capture (no long loops).
             // This function will switch to input, enable pull-ups, configure DMA and start TIM1.
             arm_bdshot_rx_capture();
 8001678:	f7ff ff5e 	bl	8001538 <arm_bdshot_rx_capture>

             // After arming RX we flip the state so next TC means RX complete.
             bdshot_reception_1 = false;
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <DMA2_Stream5_IRQHandler+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e01f      	b.n	80016c4 <DMA2_Stream5_IRQHandler+0x70>

         } else {
             // We just finished RX capture - stop TIM1 and DMA, and mark telemetry ready.
             // Disable TIM1
             TIM1->CR1 &= ~TIM_CR1_CEN;
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <DMA2_Stream5_IRQHandler+0xdc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a29      	ldr	r2, [pc, #164]	@ (8001730 <DMA2_Stream5_IRQHandler+0xdc>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]

             // Disable DMA stream cleanly
             DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <DMA2_Stream5_IRQHandler+0xe0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a27      	ldr	r2, [pc, #156]	@ (8001734 <DMA2_Stream5_IRQHandler+0xe0>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]
             while (DMA2_Stream5->CR & DMA_SxCR_EN) { __NOP(); }
 800169c:	e000      	b.n	80016a0 <DMA2_Stream5_IRQHandler+0x4c>
 800169e:	bf00      	nop
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <DMA2_Stream5_IRQHandler+0xe0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f8      	bne.n	800169e <DMA2_Stream5_IRQHandler+0x4a>

             // Clear any remaining flags for stream5
             DMA2->HIFCR |= DMA_HIFCR_CTCIF5 | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTEIF5 |
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016b2:	f443 6374 	orr.w	r3, r3, #3904	@ 0xf40
 80016b6:	60d3      	str	r3, [r2, #12]
                            DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CFEIF5;

             // Optionally: set pins back to output mode now or leave for next TX
             // (do not re-enable outputs here if you plan to start TX immediately from same ISR context)
             telemetry_done_flag = 1;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <DMA2_Stream5_IRQHandler+0xe4>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]

             // Next round, expect TX (so reset flag)
             bdshot_reception_1 = true;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <DMA2_Stream5_IRQHandler+0xd8>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
         }
     }

     // Half-transfer / transfer error / direct mode error / transfer error housekeeping:
     if (DMA2->HISR & DMA_HISR_HTIF5) {
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <DMA2_Stream5_IRQHandler+0x88>
         DMA2->HIFCR |= DMA_HIFCR_CHTIF5;
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016da:	60d3      	str	r3, [r2, #12]
     }
     if (DMA2->HISR & DMA_HISR_TEIF5) {
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <DMA2_Stream5_IRQHandler+0xa0>
         DMA2->HIFCR |= DMA_HIFCR_CTEIF5;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	60d3      	str	r3, [r2, #12]
     }
     if (DMA2->HISR & DMA_HISR_DMEIF5) {
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <DMA2_Stream5_IRQHandler+0xb8>
         DMA2->HIFCR |= DMA_HIFCR_CDMEIF5;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170a:	60d3      	str	r3, [r2, #12]
     }
     if (DMA2->HISR & DMA_HISR_FEIF5) {
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <DMA2_Stream5_IRQHandler+0xd0>
         DMA2->HIFCR |= DMA_HIFCR_CFEIF5;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a02      	ldr	r2, [pc, #8]	@ (8001728 <DMA2_Stream5_IRQHandler+0xd4>)
 800171e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001722:	60d3      	str	r3, [r2, #12]
     }
 }
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40026400 	.word	0x40026400
 800172c:	2000000c 	.word	0x2000000c
 8001730:	40010000 	.word	0x40010000
 8001734:	40026488 	.word	0x40026488
 8001738:	20000458 	.word	0x20000458

0800173c <get_BDshot_response>:
static const uint32_t GCR_table[32] = {
    iv, iv, iv, iv, iv, iv, iv, iv, iv, 9, 10, 11, iv, 13, 14, 15,
    iv, iv, 2, 3, iv, 5, 6, 7, iv, 0, 8, 1, iv, 4, 12, iv };


 uint32_t get_BDshot_response(uint32_t raw_buffer[], const uint8_t motor_shift){
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
    uint32_t* buffer_end = raw_buffer + 31 * BDSHOT_RESPONSE_BITRATE / 1000 * BDSHOT_RESPONSE_OVERSAMPLING;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800174e:	613b      	str	r3, [r7, #16]
    while (raw_buffer < buffer_end)
 8001750:	e12e      	b.n	80019b0 <get_BDshot_response+0x274>
    {
        if (__builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	1d1a      	adds	r2, r3, #4
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d130      	bne.n	80017d4 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	1d1a      	adds	r2, r3, #4
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
        if (__builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 800178e:	2b00      	cmp	r3, #0
 8001790:	d120      	bne.n	80017d4 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	1d1a      	adds	r2, r3, #4
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
            __builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d110      	bne.n	80017d4 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1d1a      	adds	r2, r3, #4
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
            __builtin_expect(!(*raw_buffer++ & 1 << motor_shift), 0) ||
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80ee 	beq.w	80019b0 <get_BDshot_response+0x274>
        {
            uint32_t* buffer_previous = raw_buffer - 1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b04      	subs	r3, #4
 80017d8:	61fb      	str	r3, [r7, #28]
            buffer_end = raw_buffer + BDSHOT_RESPONSE_LENGTH * BDSHOT_RESPONSE_OVERSAMPLING;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	33fc      	adds	r3, #252	@ 0xfc
 80017de:	613b      	str	r3, [r7, #16]
            uint32_t motor_response = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
            uint8_t bits = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]
            while (raw_buffer <= buffer_end)
 80017e8:	e0c3      	b.n	8001972 <get_BDshot_response+0x236>
            {
                if (__builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1d1a      	adds	r2, r3, #4
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d121      	bne.n	8001844 <get_BDshot_response+0x108>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4013      	ands	r3, r2
                if (__builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <get_BDshot_response+0x108>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	1d1a      	adds	r2, r3, #4
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	4013      	ands	r3, r2
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <get_BDshot_response+0x108>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1d1a      	adds	r2, r3, #4
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	4013      	ands	r3, r2
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8097 	beq.w	8001972 <get_BDshot_response+0x236>
                {
                    if (raw_buffer <= buffer_end) {
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	f200 8092 	bhi.w	8001972 <get_BDshot_response+0x236>
                        uint8_t len = MAX((raw_buffer - buffer_previous) / BDSHOT_RESPONSE_OVERSAMPLING, 1);
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b14      	cmp	r3, #20
 8001856:	dd0a      	ble.n	800186e <get_BDshot_response+0x132>
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	109b      	asrs	r3, r3, #2
 8001860:	4a5a      	ldr	r2, [pc, #360]	@ (80019cc <get_BDshot_response+0x290>)
 8001862:	fb82 1203 	smull	r1, r2, r2, r3
 8001866:	17db      	asrs	r3, r3, #31
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	e000      	b.n	8001870 <get_BDshot_response+0x134>
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
                        bits += len;
 8001872:	7dfa      	ldrb	r2, [r7, #23]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4413      	add	r3, r2
 8001878:	75fb      	strb	r3, [r7, #23]
                        motor_response <<= len;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	61bb      	str	r3, [r7, #24]
                        buffer_previous = raw_buffer - 1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b04      	subs	r3, #4
 8001888:	61fb      	str	r3, [r7, #28]
                        while (raw_buffer < buffer_end)
 800188a:	e06c      	b.n	8001966 <get_BDshot_response+0x22a>
                        {
                            if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d12f      	bne.n	800190c <get_BDshot_response+0x1d0>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
                            if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11f      	bne.n	800190c <get_BDshot_response+0x1d0>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <get_BDshot_response+0x1d0>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0)) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 8001908:	2b00      	cmp	r3, #0
 800190a:	d02c      	beq.n	8001966 <get_BDshot_response+0x22a>
                                if (raw_buffer <= buffer_end) {
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d82d      	bhi.n	8001970 <get_BDshot_response+0x234>
                                    len = MAX((raw_buffer - buffer_previous) / BDSHOT_RESPONSE_OVERSAMPLING, 1);
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b14      	cmp	r3, #20
 800191c:	dd0a      	ble.n	8001934 <get_BDshot_response+0x1f8>
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	109b      	asrs	r3, r3, #2
 8001926:	4a29      	ldr	r2, [pc, #164]	@ (80019cc <get_BDshot_response+0x290>)
 8001928:	fb82 1203 	smull	r1, r2, r2, r3
 800192c:	17db      	asrs	r3, r3, #31
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e000      	b.n	8001936 <get_BDshot_response+0x1fa>
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
                                    bits += len;
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4413      	add	r3, r2
 800193e:	75fb      	strb	r3, [r7, #23]
                                    motor_response <<= len;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	61bb      	str	r3, [r7, #24]
                                    motor_response |= 0x1FFFFF >> (BDSHOT_RESPONSE_LENGTH - len);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f1c3 0315 	rsb	r3, r3, #21
 8001950:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <get_BDshot_response+0x294>)
 8001952:	fa42 f303 	asr.w	r3, r2, r3
 8001956:	461a      	mov	r2, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
                                    buffer_previous = raw_buffer - 1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3b04      	subs	r3, #4
 8001962:	61fb      	str	r3, [r7, #28]
                                }
                                break;
 8001964:	e004      	b.n	8001970 <get_BDshot_response+0x234>
                        while (raw_buffer < buffer_end)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	d38e      	bcc.n	800188c <get_BDshot_response+0x150>
 800196e:	e000      	b.n	8001972 <get_BDshot_response+0x236>
                                break;
 8001970:	bf00      	nop
            while (raw_buffer <= buffer_end)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	429a      	cmp	r2, r3
 8001978:	f67f af37 	bls.w	80017ea <get_BDshot_response+0xae>
                            }
                        }
                    }
                }
            }
            motor_response <<= (BDSHOT_RESPONSE_LENGTH - bits);
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	f1c3 0315 	rsb	r3, r3, #21
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	61bb      	str	r3, [r7, #24]
            if (*buffer_previous & (1 << motor_shift)) {
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <get_BDshot_response+0x270>
                motor_response |= 0x1FFFFF >> bits;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <get_BDshot_response+0x294>)
 80019a0:	fa42 f303 	asr.w	r3, r2, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
            }
            return motor_response;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	e006      	b.n	80019be <get_BDshot_response+0x282>
    while (raw_buffer < buffer_end)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f4ff aecc 	bcc.w	8001752 <get_BDshot_response+0x16>
        }
    }
    return 0xFFFFFFFF;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	55555556 	.word	0x55555556
 80019d0:	001fffff 	.word	0x001fffff

080019d4 <BDshot_check_checksum>:


  bool BDshot_check_checksum(uint32_t decoded_value) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
     uint8_t crc = (decoded_value & 0x0F);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	73fb      	strb	r3, [r7, #15]
     uint16_t value = (decoded_value >> 4);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	81bb      	strh	r3, [r7, #12]
     uint8_t calculated_crc = (~(value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	89bb      	ldrh	r3, [r7, #12]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4053      	eors	r3, r2
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	72fb      	strb	r3, [r7, #11]
     return (crc == calculated_crc);
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	bf0c      	ite	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	2300      	movne	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 }
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <read_BDshot_response>:


 // Modified read_BDshot_response function with DMA-based debugging
 void read_BDshot_response(uint32_t value, uint8_t motor){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  // Debug_Send_DMA("Raw telemetry value: 0x%lX\r\n", value);

     if (value < 0xFFFFFFF) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f080 8096 	bcs.w	8001b70 <read_BDshot_response+0x144>
        //uint32_t raw_gcr_value = value;
         value = (value ^ (value >> 1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4053      	eors	r3, r2
 8001a4c:	607b      	str	r3, [r7, #4]
       // Debug_Send_DMA("After GCR XOR decoding: 0x%lX\r\n", value);

         uint32_t nibble1 = (value & 0x1F);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	61fb      	str	r3, [r7, #28]
         uint32_t nibble2 = ((value >> 5) & 0x1F);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	61bb      	str	r3, [r7, #24]
         uint32_t nibble3 = ((value >> 10) & 0x1F);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	617b      	str	r3, [r7, #20]
         uint32_t nibble4 = ((value >> 15) & 0x1F);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0bdb      	lsrs	r3, r3, #15
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	613b      	str	r3, [r7, #16]

       // Debug_Send_DMA("Nibbles (GCR): 0x%lX, 0x%lX, 0x%lX, 0x%lX\r\n", nibble1, nibble2, nibble3, nibble4);

         if (GCR_table[nibble1] == iv || GCR_table[nibble2] == iv || GCR_table[nibble3] == iv || GCR_table[nibble4] == iv) {
 8001a74:	4a43      	ldr	r2, [pc, #268]	@ (8001b84 <read_BDshot_response+0x158>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d014      	beq.n	8001aac <read_BDshot_response+0x80>
 8001a82:	4a40      	ldr	r2, [pc, #256]	@ (8001b84 <read_BDshot_response+0x158>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d00d      	beq.n	8001aac <read_BDshot_response+0x80>
 8001a90:	4a3c      	ldr	r2, [pc, #240]	@ (8001b84 <read_BDshot_response+0x158>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d006      	beq.n	8001aac <read_BDshot_response+0x80>
 8001a9e:	4a39      	ldr	r2, [pc, #228]	@ (8001b84 <read_BDshot_response+0x158>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aaa:	d10e      	bne.n	8001aca <read_BDshot_response+0x9e>
             //Debug_Send_DMA("GCR lookup failed for one or more nibbles.\r\n");
             motor_telemetry_data[motor].valid_rpm = false;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	4a36      	ldr	r2, [pc, #216]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001ab0:	015b      	lsls	r3, r3, #5
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
             motor_telemetry_data[motor].valid_voltage = false;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	4a32      	ldr	r2, [pc, #200]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001abe:	015b      	lsls	r3, r3, #5
 8001ac0:	4413      	add	r3, r2
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
             return;
 8001ac8:	e059      	b.n	8001b7e <read_BDshot_response+0x152>
         }

         uint32_t decoded_value = GCR_table[nibble1];
 8001aca:	4a2e      	ldr	r2, [pc, #184]	@ (8001b84 <read_BDshot_response+0x158>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	60fb      	str	r3, [r7, #12]
         decoded_value |= GCR_table[nibble2] << 4;
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b84 <read_BDshot_response+0x158>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
         decoded_value |= GCR_table[nibble3] << 8;
 8001ae4:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <read_BDshot_response+0x158>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
         decoded_value |= GCR_table[nibble4] << 12;
 8001af4:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <read_BDshot_response+0x158>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	031b      	lsls	r3, r3, #12
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

         //Debug_Send_DMA("Final decoded value: 0x%lX\r\n", decoded_value);

         if (BDshot_check_checksum(decoded_value))
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff ff65 	bl	80019d4 <BDshot_check_checksum>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d027      	beq.n	8001b60 <read_BDshot_response+0x134>
         {
             //Debug_Send_DMA("CRC Check Passed.\r\n");
             motor_telemetry_data[motor].valid_rpm = true;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
             motor_telemetry_data[motor].raw_rpm_value = ((decoded_value & 0x1FF0) >> 4) << (decoded_value >> 13);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0b5a      	lsrs	r2, r3, #13
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4915      	ldr	r1, [pc, #84]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	440b      	add	r3, r1
 8001b36:	601a      	str	r2, [r3, #0]
             motor_telemetry_data[motor].raw_rpm_value = 60 * 1000000 / motor_telemetry_data[motor].raw_rpm_value * 2 / MOTOR_POLES_NUMBER;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b3c:	015b      	lsls	r3, r3, #5
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <read_BDshot_response+0x160>)
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	005a      	lsls	r2, r3, #1
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	0852      	lsrs	r2, r2, #1
 8001b4e:	4910      	ldr	r1, [pc, #64]	@ (8001b90 <read_BDshot_response+0x164>)
 8001b50:	fba1 1202 	umull	r1, r2, r1, r2
 8001b54:	0892      	lsrs	r2, r2, #2
 8001b56:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	440b      	add	r3, r1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e00e      	b.n	8001b7e <read_BDshot_response+0x152>
             //Debug_Send_DMA("RPM: %u\r\n",motor_telemetry_data[motor].raw_rpm_value);
         } else {
            // Debug_Send_DMA("CRC Check FAILED. Data will be discarded.\r\n");
             motor_telemetry_data[motor].valid_rpm = false;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e006      	b.n	8001b7e <read_BDshot_response+0x152>
         }
     } else {
      //  Debug_Send_DMA("Invalid raw telemetry value.\r\n");
         motor_telemetry_data[motor].valid_rpm = false;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <read_BDshot_response+0x15c>)
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
     }
 }
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800b9b4 	.word	0x0800b9b4
 8001b88:	20000684 	.word	0x20000684
 8001b8c:	03938700 	.word	0x03938700
 8001b90:	92492493 	.word	0x92492493

08001b94 <process_telemetry_with_new_method>:



// --- NEW main telemetry processing function ---
void process_telemetry_with_new_method(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
    for (int m = 0; m < MOTORS_COUNT; m++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e011      	b.n	8001bc4 <process_telemetry_with_new_method+0x30>
        uint32_t decoded_gcr_value = get_BDshot_response((uint32_t*)dshot_bb_buffer_1_4_r, motor_gpio_bit_positions[m]);
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <process_telemetry_with_new_method+0x40>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480b      	ldr	r0, [pc, #44]	@ (8001bd8 <process_telemetry_with_new_method+0x44>)
 8001bac:	f7ff fdc6 	bl	800173c <get_BDshot_response>
 8001bb0:	6038      	str	r0, [r7, #0]
        read_BDshot_response(decoded_gcr_value, m); // Pass motor index 0-based
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f7ff ff37 	bl	8001a2c <read_BDshot_response>
    for (int m = 0; m < MOTORS_COUNT; m++) {
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	ddea      	ble.n	8001ba0 <process_telemetry_with_new_method+0xc>
       // Debug_Send_DMA("M%d RAW: 0x%08lX\r\n", m, decoded_gcr_value); // Verify raw values
    }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0800ba34 	.word	0x0800ba34
 8001bd8:	2000045c 	.word	0x2000045c

08001bdc <pid_calculate_command>:

    last_sent_dshot_command = dshot_command;
    return dshot_command;
}
*/
uint16_t pid_calculate_command(uint32_t current_rpm_unsigned, float target_rpm_signed) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b08f      	sub	sp, #60	@ 0x3c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
    float current_rpm = (float)current_rpm_unsigned;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float target_rpm = (target_rpm_signed < 0) ? 0.0f : target_rpm_signed;
 8001bf6:	edd7 7a00 	vldr	s15, [r7]
 8001bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d502      	bpl.n	8001c0a <pid_calculate_command+0x2e>
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e000      	b.n	8001c0c <pid_calculate_command+0x30>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float error = target_rpm - current_rpm;
 8001c0e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c12:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // --- PID Terms ---
    float p_term = PID_KP * error;
 8001c1e:	4b72      	ldr	r3, [pc, #456]	@ (8001de8 <pid_calculate_command+0x20c>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Integrator: accumulate only when error small enough to avoid wind-up
    if (target_rpm > 0.0f && fabsf(error) < target_rpm * 1.2f) {
 8001c30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	dd3c      	ble.n	8001cb8 <pid_calculate_command+0xdc>
 8001c3e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c42:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c46:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c4a:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8001dec <pid_calculate_command+0x210>
 8001c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d52d      	bpl.n	8001cb8 <pid_calculate_command+0xdc>
        i_term += PID_KI * error * 0.002f;  // faster integration rate
 8001c5c:	4b64      	ldr	r3, [pc, #400]	@ (8001df0 <pid_calculate_command+0x214>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001df4 <pid_calculate_command+0x218>
 8001c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c72:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
        if (i_term > 500.0f) i_term = 500.0f;   // clamp to prevent runaway
 8001c82:	4b5d      	ldr	r3, [pc, #372]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001dfc <pid_calculate_command+0x220>
 8001c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	dd02      	ble.n	8001c9c <pid_calculate_command+0xc0>
 8001c96:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <pid_calculate_command+0x224>)
 8001c9a:	601a      	str	r2, [r3, #0]
        if (i_term < -500.0f) i_term = -500.0f;
 8001c9c:	4b56      	ldr	r3, [pc, #344]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001e04 <pid_calculate_command+0x228>
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d50d      	bpl.n	8001ccc <pid_calculate_command+0xf0>
 8001cb0:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001cb2:	4a55      	ldr	r2, [pc, #340]	@ (8001e08 <pid_calculate_command+0x22c>)
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e009      	b.n	8001ccc <pid_calculate_command+0xf0>
    } else {
        i_term *= 0.95f; // small decay to prevent wind-up
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001e0c <pid_calculate_command+0x230>
 8001cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
    }

    // Derivative (filtered)
    float error_derivative = error - pid_last_error;
 8001ccc:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <pid_calculate_command+0x234>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cda:	edc7 7a08 	vstr	s15, [r7, #32]
    pid_last_error = error;
 8001cde:	4a4c      	ldr	r2, [pc, #304]	@ (8001e10 <pid_calculate_command+0x234>)
 8001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce2:	6013      	str	r3, [r2, #0]
    pid_filtered_error = (0.4f * error_derivative) + (0.6f * pid_filtered_error);
 8001ce4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001e14 <pid_calculate_command+0x238>
 8001cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf0:	4b49      	ldr	r3, [pc, #292]	@ (8001e18 <pid_calculate_command+0x23c>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001e1c <pid_calculate_command+0x240>
 8001cfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <pid_calculate_command+0x23c>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]
    float d_term = PID_KD * pid_filtered_error;
 8001d08:	4b45      	ldr	r3, [pc, #276]	@ (8001e20 <pid_calculate_command+0x244>)
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <pid_calculate_command+0x23c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d18:	edc7 7a07 	vstr	s15, [r7, #28]

    float pid_output = p_term + i_term + d_term;
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a06 	vstr	s15, [r7, #24]

    // --- FEEDFORWARD and SCALING ---
    uint16_t dshot_command;

    if (target_rpm <= 0.0f) {
 8001d36:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d80c      	bhi.n	8001d5e <pid_calculate_command+0x182>
        dshot_command = DSHOT_BASE_COMMAND;
 8001d44:	2330      	movs	r3, #48	@ 0x30
 8001d46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pid_last_error = pid_filtered_error = i_term = 0.0f;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <pid_calculate_command+0x21c>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4a31      	ldr	r2, [pc, #196]	@ (8001e18 <pid_calculate_command+0x23c>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <pid_calculate_command+0x23c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <pid_calculate_command+0x234>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e039      	b.n	8001dd2 <pid_calculate_command+0x1f6>
    } else {
        // Feedforward tuned for faster startup
        // Typical BLHeli_32 mapping ~0.18–0.25 per 1000 RPM
        float base_ff = (float)DSHOT_BASE_COMMAND;
 8001d5e:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <pid_calculate_command+0x248>)
 8001d60:	617b      	str	r3, [r7, #20]
        float ff_from_target = target_rpm * 0.22f; // was 0.15f
 8001d62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d66:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001e28 <pid_calculate_command+0x24c>
 8001d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6e:	edc7 7a04 	vstr	s15, [r7, #16]

        // PID correction scaling (more aggressive response)
        float pid_correction = pid_output * 0.15f;
 8001d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d76:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001e2c <pid_calculate_command+0x250>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	edc7 7a03 	vstr	s15, [r7, #12]

        float total_dshot = base_ff + ff_from_target + pid_correction;
 8001d82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	edc7 7a02 	vstr	s15, [r7, #8]
        dshot_command = (uint16_t)total_dshot;
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da2:	ee17 3a90 	vmov	r3, s15
 8001da6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        // Clamp range
        if (dshot_command < DSHOT_BASE_COMMAND) dshot_command = DSHOT_BASE_COMMAND;
 8001da8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001e30 <pid_calculate_command+0x254>
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d501      	bpl.n	8001dc4 <pid_calculate_command+0x1e8>
 8001dc0:	2330      	movs	r3, #48	@ 0x30
 8001dc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if (dshot_command > 2047) dshot_command = 2047;
 8001dc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dca:	d302      	bcc.n	8001dd2 <pid_calculate_command+0x1f6>
 8001dcc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001dd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          //      target_rpm, current_rpm, error, pid_output, dshot_command);
         //   last_debug_cmd = dshot_command;
       // }
    }

    last_sent_dshot_command = dshot_command;
 8001dd2:	4a18      	ldr	r2, [pc, #96]	@ (8001e34 <pid_calculate_command+0x258>)
 8001dd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dd6:	8013      	strh	r3, [r2, #0]
    return dshot_command;
 8001dd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	373c      	adds	r7, #60	@ 0x3c
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000
 8001dec:	3f99999a 	.word	0x3f99999a
 8001df0:	20000004 	.word	0x20000004
 8001df4:	3b03126f 	.word	0x3b03126f
 8001df8:	20000214 	.word	0x20000214
 8001dfc:	43fa0000 	.word	0x43fa0000
 8001e00:	43fa0000 	.word	0x43fa0000
 8001e04:	c3fa0000 	.word	0xc3fa0000
 8001e08:	c3fa0000 	.word	0xc3fa0000
 8001e0c:	3f733333 	.word	0x3f733333
 8001e10:	2000020c 	.word	0x2000020c
 8001e14:	3ecccccd 	.word	0x3ecccccd
 8001e18:	20000210 	.word	0x20000210
 8001e1c:	3f19999a 	.word	0x3f19999a
 8001e20:	20000008 	.word	0x20000008
 8001e24:	42400000 	.word	0x42400000
 8001e28:	3e6147ae 	.word	0x3e6147ae
 8001e2c:	3e19999a 	.word	0x3e19999a
 8001e30:	42400000 	.word	0x42400000
 8001e34:	20000208 	.word	0x20000208

08001e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_GPIO_Init+0x9c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f641 11f7 	movw	r1, #6647	@ 0x19f7
 8001ea8:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <MX_GPIO_Init+0xa0>)
 8001eaa:	f002 f839 	bl	8003f20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA6 PA7 PA8
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001eae:	f641 13f7 	movw	r3, #6647	@ 0x19f7
 8001eb2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <MX_GPIO_Init+0xa0>)
 8001ec8:	f001 fea6 	bl	8003c18 <HAL_GPIO_Init>

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b094      	sub	sp, #80	@ 0x50
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee2:	f001 f8ef 	bl	80030c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8002150 <main+0x274>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4a99      	ldr	r2, [pc, #612]	@ (8002150 <main+0x274>)
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef0:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ef2:	4b98      	ldr	r3, [pc, #608]	@ (8002154 <main+0x278>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a97      	ldr	r2, [pc, #604]	@ (8002154 <main+0x278>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efe:	f000 f9b3 	bl	8002268 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA clock
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b94      	ldr	r3, [pc, #592]	@ (8002158 <main+0x27c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a93      	ldr	r2, [pc, #588]	@ (8002158 <main+0x27c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b91      	ldr	r3, [pc, #580]	@ (8002158 <main+0x27c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1e:	f7ff ff8b 	bl	8001e38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f22:	f7ff f895 	bl	8001050 <MX_DMA_Init>
  MX_TIM1_Init();
 8001f26:	f000 fbed 	bl	8002704 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001f2a:	f000 fcbd 	bl	80028a8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001f2e:	f000 fc39 	bl	80027a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f32:	f000 ffaf 	bl	8002e94 <MX_USART1_UART_Init>
  UART_CMD_Init(&huart1); // Pass your UART handle
 8001f36:	4889      	ldr	r0, [pc, #548]	@ (800215c <main+0x280>)
 8001f38:	f000 fe18 	bl	8002b6c <UART_CMD_Init>
  PWM_Init();
 8001f3c:	f000 fa04 	bl	8002348 <PWM_Init>



  // --- DShot Initialization ---
  setup_Dshot_Tx_Only();
 8001f40:	f7ff fa92 	bl	8001468 <setup_Dshot_Tx_Only>
  preset_bb_Dshot_buffers();
 8001f44:	f7ff f91e 	bl	8001184 <preset_bb_Dshot_buffers>

  // Initialize all motor target RPMs to 0.0 (stop)
    for (int i = 0; i < MOTORS_COUNT; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f4c:	e009      	b.n	8001f62 <main+0x86>
        pid_target_speed_rpms[i] = value; // All motors initially stopped
 8001f4e:	4b84      	ldr	r3, [pc, #528]	@ (8002160 <main+0x284>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4984      	ldr	r1, [pc, #528]	@ (8002164 <main+0x288>)
 8001f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTORS_COUNT; i++) {
 8001f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f5e:	3301      	adds	r3, #1
 8001f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	ddf2      	ble.n	8001f4e <main+0x72>
    }

      for (int i = 0; i < MOTORS_COUNT; i++) {
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f6c:	e00c      	b.n	8001f88 <main+0xac>
           motor_values[i] = prepare_Dshot_package(0, false); // Send 0 throttle (disarmed)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff f9b5 	bl	80012e0 <prepare_Dshot_package>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002168 <main+0x28c>)
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0; i < MOTORS_COUNT; i++) {
 8001f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f84:	3301      	adds	r3, #1
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	ddef      	ble.n	8001f6e <main+0x92>
       }

  // Send this 0 throttle for 200ms
  uint32_t calibration_start_time = HAL_GetTick();
 8001f8e:	f001 f8ff 	bl	8003190 <HAL_GetTick>
 8001f92:	61f8      	str	r0, [r7, #28]
  while (HAL_GetTick() - calibration_start_time < 2000) {
 8001f94:	e00a      	b.n	8001fac <main+0xd0>
      update_motors_Tx_Only();
 8001f96:	f7ff f9d3 	bl	8001340 <update_motors_Tx_Only>
      // Keep the small delay to ensure signal integrity during calibration phase too
      for (volatile int i = 0; i < 100; i++);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	e002      	b.n	8001fa6 <main+0xca>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b63      	cmp	r3, #99	@ 0x63
 8001faa:	ddf9      	ble.n	8001fa0 <main+0xc4>
  while (HAL_GetTick() - calibration_start_time < 2000) {
 8001fac:	f001 f8f0 	bl	8003190 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001fba:	d3ec      	bcc.n	8001f96 <main+0xba>
  }


  for (int i = 0; i < MOTORS_COUNT; i++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fc0:	e00c      	b.n	8001fdc <main+0x100>
	  motor_values[i] = prepare_Dshot_package(10, false);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f7ff f98b 	bl	80012e0 <prepare_Dshot_package>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4a66      	ldr	r2, [pc, #408]	@ (8002168 <main+0x28c>)
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < MOTORS_COUNT; i++) {
 8001fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd8:	3301      	adds	r3, #1
 8001fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	ddef      	ble.n	8001fc2 <main+0xe6>
     }

   for (int t = 0; t < 10; t++){
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fe6:	e004      	b.n	8001ff2 <main+0x116>
   update_motors_Tx_Only();
 8001fe8:	f7ff f9aa 	bl	8001340 <update_motors_Tx_Only>
   for (int t = 0; t < 10; t++){
 8001fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fee:	3301      	adds	r3, #1
 8001ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	ddf7      	ble.n	8001fe8 <main+0x10c>
   }
   //for (volatile int i = 0; i < 5000; i++);
      HAL_Delay(200);
 8001ff8:	20c8      	movs	r0, #200	@ 0xc8
 8001ffa:	f001 f8d5 	bl	80031a8 <HAL_Delay>

   for (int i = 0; i < MOTORS_COUNT; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002002:	e00c      	b.n	800201e <main+0x142>
   	  motor_values[i] = prepare_Dshot_package(12, false);
 8002004:	2100      	movs	r1, #0
 8002006:	200c      	movs	r0, #12
 8002008:	f7ff f96a 	bl	80012e0 <prepare_Dshot_package>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	4a55      	ldr	r2, [pc, #340]	@ (8002168 <main+0x28c>)
 8002012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002014:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < MOTORS_COUNT; i++) {
 8002018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800201a:	3301      	adds	r3, #1
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002020:	2b09      	cmp	r3, #9
 8002022:	ddef      	ble.n	8002004 <main+0x128>
        }

   for (int t = 0; t < 10; t++){
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002028:	e004      	b.n	8002034 <main+0x158>
   update_motors_Tx_Only();
 800202a:	f7ff f989 	bl	8001340 <update_motors_Tx_Only>
   for (int t = 0; t < 10; t++){
 800202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002030:	3301      	adds	r3, #1
 8002032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002036:	2b09      	cmp	r3, #9
 8002038:	ddf7      	ble.n	800202a <main+0x14e>
   }
   HAL_Delay(200);
 800203a:	20c8      	movs	r0, #200	@ 0xc8
 800203c:	f001 f8b4 	bl	80031a8 <HAL_Delay>
   //for (volatile int i = 0; i < 5000; i++);
   //Power cycle the ESC (disconnect + reconnect battery)


   Debug_Send_DMA("--- STM32 DShot Controller Started ---\r\n");
 8002040:	484a      	ldr	r0, [pc, #296]	@ (800216c <main+0x290>)
 8002042:	f000 fdab 	bl	8002b9c <Debug_Send_DMA>



  /* Infinite loop */
     /* USER CODE BEGIN WHILE */
     uint32_t last_50hz_time = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
     uint32_t last_100hz_time = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	633b      	str	r3, [r7, #48]	@ 0x30
     uint32_t now2 = HAL_GetTick();
 800204e:	f001 f89f 	bl	8003190 <HAL_GetTick>
 8002052:	61b8      	str	r0, [r7, #24]


     uint32_t last_telemetry_timestamp = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
     bool telemetry_active = false; // Start with telemetry inactive until first successful read
 8002058:	2300      	movs	r3, #0
 800205a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
     uint16_t current_rpm = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	853b      	strh	r3, [r7, #40]	@ 0x28
  /* Infinite loop */
  while (1) {
	//  Debug_Send_DMA("VALUE:\r\n");

	  // Check if new UART data is available and process it
	  	         	          if (uart_new_data_available) {
 8002062:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <main+0x294>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <main+0x194>
	  	         	              process_uart_command(); // This will parse and update received_numeric_value
 800206c:	f000 fdd4 	bl	8002c18 <process_uart_command>
	  	         	         //  Debug_Send_DMA("NEW UART CMD processed!\r\n");
	  	         	          }

	  // Check if new telemetry data is ready
	      if (telemetry_done_flag){
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <main+0x298>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d045      	beq.n	8002106 <main+0x22a>
	          // Clear the flag immediately to prepare for the next cycle
	          telemetry_done_flag = 0;
 800207a:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <main+0x298>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
	          last_telemetry_timestamp = HAL_GetTick(); // Update timestamp on success
 8002080:	f001 f886 	bl	8003190 <HAL_GetTick>
 8002084:	62f8      	str	r0, [r7, #44]	@ 0x2c

	          // Step 1: Process the telemetry responses from the previous cycle
	          process_telemetry_with_new_method();
 8002086:	f7ff fd85 	bl	8001b94 <process_telemetry_with_new_method>


	          // Step 3: Loop through each motor to calculate a new command using PID
	          for (int m = 0; m < MOTORS_COUNT; m++){
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	e029      	b.n	80020e4 <main+0x208>
	             // uint16_t current_rpm = 0;

	        	  // Use received_numeric_value from UART as the PID target RPM
	        	   float pid_target_rpm_from_uart = pid_target_speed_rpms[m];
 8002090:	4a34      	ldr	r2, [pc, #208]	@ (8002164 <main+0x288>)
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]

	              if (motor_telemetry_data[m].valid_rpm) {
 800209c:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <main+0x29c>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	015b      	lsls	r3, r3, #5
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <main+0x1dc>
	                  current_rpm = motor_telemetry_data[m].raw_rpm_value;
 80020ac:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <main+0x29c>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	015b      	lsls	r3, r3, #5
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	853b      	strh	r3, [r7, #40]	@ 0x28
	            	  //current_rpm_for_pid = (uint32_t)fabsf(current_pid_target);
	              }
	              //if(current_rpm < 800 || current_rpm == 0)current_rpm = pid_target_speed_rpm ;
	             // uint16_t new_command = pid_calculate_command(current_rpm);
	              // Calculate PID command. Pass the current RPM and the target RPM from UART.
	               uint16_t new_command = pid_calculate_command(current_rpm, pid_target_rpm_from_uart);
 80020b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fd8c 	bl	8001bdc <pid_calculate_command>
 80020c4:	4603      	mov	r3, r0
 80020c6:	827b      	strh	r3, [r7, #18]
	              motor_values[m] = prepare_Dshot_package(new_command, false);
 80020c8:	8a7b      	ldrh	r3, [r7, #18]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f907 	bl	80012e0 <prepare_Dshot_package>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4a24      	ldr	r2, [pc, #144]	@ (8002168 <main+0x28c>)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          for (int m = 0; m < MOTORS_COUNT; m++){
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	ddd2      	ble.n	8002090 <main+0x1b4>


	          }

	          // Step 4: Send the new DShot commands and start the next telemetry reception
	          for (volatile int i = 0; i < 100; i++);
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e002      	b.n	80020f6 <main+0x21a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b63      	cmp	r3, #99	@ 0x63
 80020fa:	ddf9      	ble.n	80020f0 <main+0x214>
	          update_motors_Tx_Only();
 80020fc:	f7ff f920 	bl	8001340 <update_motors_Tx_Only>

	          telemetry_active = true;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	      }

	      // Add a check for telemetry timeout
	      if (telemetry_active && (HAL_GetTick() - last_telemetry_timestamp > 2000)) {
 8002106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03e      	beq.n	800218c <main+0x2b0>
 800210e:	f001 f83f 	bl	8003190 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800211c:	d936      	bls.n	800218c <main+0x2b0>
	          // Telemetry has failed, enter a safe open-loop mode
	          telemetry_active = false;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	          // For all motors, set a safe, constant throttle
	          for (int m = 0; m < MOTORS_COUNT; m++) {
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	e00c      	b.n	8002144 <main+0x268>
	              motor_values[m] = prepare_Dshot_package(DSHOT_BASE_COMMAND, false);
 800212a:	2100      	movs	r1, #0
 800212c:	2030      	movs	r0, #48	@ 0x30
 800212e:	f7ff f8d7 	bl	80012e0 <prepare_Dshot_package>
 8002132:	4603      	mov	r3, r0
 8002134:	4619      	mov	r1, r3
 8002136:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <main+0x28c>)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          for (int m = 0; m < MOTORS_COUNT; m++) {
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	3301      	adds	r3, #1
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	2b09      	cmp	r3, #9
 8002148:	ddef      	ble.n	800212a <main+0x24e>

	             // Debug_Send_DMA("FAILED: %d %d %d",m,motor_telemetry_data[m].raw_rpm_value , motor_telemetry_data[m].voltage);
	          }
	          for (volatile int i = 0; i < 100; i++);
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	e018      	b.n	8002182 <main+0x2a6>
 8002150:	e000edf0 	.word	0xe000edf0
 8002154:	e0001000 	.word	0xe0001000
 8002158:	40023800 	.word	0x40023800
 800215c:	20000a0c 	.word	0x20000a0c
 8002160:	20000010 	.word	0x20000010
 8002164:	20000218 	.word	0x20000218
 8002168:	20000240 	.word	0x20000240
 800216c:	0800b8d0 	.word	0x0800b8d0
 8002170:	20000986 	.word	0x20000986
 8002174:	20000458 	.word	0x20000458
 8002178:	20000684 	.word	0x20000684
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b63      	cmp	r3, #99	@ 0x63
 8002186:	ddf9      	ble.n	800217c <main+0x2a0>
	          update_motors_Tx_Only();
 8002188:	f7ff f8da 	bl	8001340 <update_motors_Tx_Only>
*/



	         	         // ---- SERVO PWM UPDATE - Different frequencies
	         	         now2 = HAL_GetTick();
 800218c:	f001 f800 	bl	8003190 <HAL_GetTick>
 8002190:	61b8      	str	r0, [r7, #24]

	         	         // Update 50Hz motors (every 20ms)
	         	         if (now2 - last_50hz_time >= 20) {
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b13      	cmp	r3, #19
 800219a:	d91f      	bls.n	80021dc <main+0x300>
	         	             static uint16_t angle_50hz = 500;
	         	             angle_50hz += 5;
 800219c:	4b23      	ldr	r3, [pc, #140]	@ (800222c <main+0x350>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	3305      	adds	r3, #5
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b21      	ldr	r3, [pc, #132]	@ (800222c <main+0x350>)
 80021a6:	801a      	strh	r2, [r3, #0]
	         	             if (angle_50hz > 2500) angle_50hz = 500;
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <main+0x350>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d903      	bls.n	80021bc <main+0x2e0>
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <main+0x350>)
 80021b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021ba:	801a      	strh	r2, [r3, #0]

	         	             PWM_SetDuty(&htim4, TIM_CHANNEL_1, angle_50hz); // PB6 - 50Hz
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <main+0x350>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	481a      	ldr	r0, [pc, #104]	@ (8002230 <main+0x354>)
 80021c6:	f000 f8d7 	bl	8002378 <PWM_SetDuty>
	         	             PWM_SetDuty(&htim4, TIM_CHANNEL_2, angle_50hz); // PB7 - 50Hz
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <main+0x350>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	2104      	movs	r1, #4
 80021d2:	4817      	ldr	r0, [pc, #92]	@ (8002230 <main+0x354>)
 80021d4:	f000 f8d0 	bl	8002378 <PWM_SetDuty>

	         	             last_50hz_time = now2;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
	         	         }

	         	         //Update 100Hz motors (every 10ms)
	         	        if (now2 - last_100hz_time >= 10) {
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	f67f af3d 	bls.w	8002062 <main+0x186>
	         	             static uint16_t angle_100hz = 500;
	         	            angle_100hz += 5;
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <main+0x358>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	3305      	adds	r3, #5
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <main+0x358>)
 80021f2:	801a      	strh	r2, [r3, #0]
	         	             if (angle_100hz > 2500) angle_100hz = 500;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <main+0x358>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d903      	bls.n	8002208 <main+0x32c>
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <main+0x358>)
 8002202:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002206:	801a      	strh	r2, [r3, #0]

	         	             PWM_SetDuty(&htim3, TIM_CHANNEL_1, angle_100hz); // e.g., PB4 - 100Hz
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <main+0x358>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	2100      	movs	r1, #0
 8002210:	4809      	ldr	r0, [pc, #36]	@ (8002238 <main+0x35c>)
 8002212:	f000 f8b1 	bl	8002378 <PWM_SetDuty>
	         	             PWM_SetDuty(&htim3, TIM_CHANNEL_2, angle_100hz); // e.g., PB5 - 100Hz
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <main+0x358>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	2104      	movs	r1, #4
 800221e:	4806      	ldr	r0, [pc, #24]	@ (8002238 <main+0x35c>)
 8002220:	f000 f8aa 	bl	8002378 <PWM_SetDuty>

	         	             last_100hz_time = now2;
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
	  	         	          if (uart_new_data_available) {
 8002228:	e71b      	b.n	8002062 <main+0x186>
 800222a:	bf00      	nop
 800222c:	20000014 	.word	0x20000014
 8002230:	2000085c 	.word	0x2000085c
 8002234:	20000016 	.word	0x20000016
 8002238:	20000814 	.word	0x20000814

0800223c <HAL_UART_TxCpltCallback>:

// --- UART Transmit Complete Callback ---
// This function is called by HAL when a UART DMA transmission is complete.
// It sets the uart_tx_ready flag back to true, allowing the next Debug_Send_DMA call.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Check if it's our USART1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <HAL_UART_TxCpltCallback+0x24>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d102      	bne.n	8002254 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_tx_ready = true; // Mark TX buffer as ready for next transmission
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_UART_TxCpltCallback+0x28>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]

    }

}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40011000 	.word	0x40011000
 8002264:	2000000d 	.word	0x2000000d

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	@ 0x50
 800226c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	2230      	movs	r2, #48	@ 0x30
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f005 fae4 	bl	8007844 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <SystemClock_Config+0xcc>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <SystemClock_Config+0xcc>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <SystemClock_Config+0xcc>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <SystemClock_Config+0xd0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022b4:	4a20      	ldr	r2, [pc, #128]	@ (8002338 <SystemClock_Config+0xd0>)
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <SystemClock_Config+0xd0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d2:	2302      	movs	r3, #2
 80022d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 25;
 80022dc:	2319      	movs	r3, #25
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLN = 168;
 80022e0:	23a8      	movs	r3, #168	@ 0xa8
 80022e2:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e8:	2304      	movs	r3, #4
 80022ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fe2f 	bl	8003f54 <HAL_RCC_OscConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x98>
	  {
	    Error_Handler();
 80022fc:	f000 f81e 	bl	800233c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002300:	230f      	movs	r3, #15
 8002302:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002310:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2102      	movs	r1, #2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 f891 	bl	8004444 <HAL_RCC_ClockConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0xc4>
	  {
	    Error_Handler();
 8002328:	f000 f808 	bl	800233c <Error_Handler>
	  }
}
 800232c:	bf00      	nop
 800232e:	3750      	adds	r7, #80	@ 0x50
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000

0800233c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002340:	b672      	cpsid	i
}
 8002342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <Error_Handler+0x8>

08002348 <PWM_Init>:
// Частота PWM 50 Гц (для сервоприводов)
//#define PWM_FREQUENCY_HZ 50
//#define TIMER_CLOCK_HZ   84000000 // 84 MHz

void PWM_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
    // Запуск PWM каналов
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // PB7
 800234c:	2104      	movs	r1, #4
 800234e:	4808      	ldr	r0, [pc, #32]	@ (8002370 <PWM_Init+0x28>)
 8002350:	f002 fb00 	bl	8004954 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // PB6
 8002354:	2100      	movs	r1, #0
 8002356:	4806      	ldr	r0, [pc, #24]	@ (8002370 <PWM_Init+0x28>)
 8002358:	f002 fafc 	bl	8004954 <HAL_TIM_PWM_Start>

     //Start 100Hz PWM channels (TIM3)
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // e.g., PB4- 100Hz
 800235c:	2100      	movs	r1, #0
 800235e:	4805      	ldr	r0, [pc, #20]	@ (8002374 <PWM_Init+0x2c>)
 8002360:	f002 faf8 	bl	8004954 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // e.g., PB5- 100Hz
 8002364:	2104      	movs	r1, #4
 8002366:	4803      	ldr	r0, [pc, #12]	@ (8002374 <PWM_Init+0x2c>)
 8002368:	f002 faf4 	bl	8004954 <HAL_TIM_PWM_Start>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000085c 	.word	0x2000085c
 8002374:	20000814 	.word	0x20000814

08002378 <PWM_SetDuty>:

void PWM_SetDuty(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t pulse_us)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
    // Clamp pulse to servo-safe range
    if (pulse_us < 500) pulse_us = 500;
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800238c:	d202      	bcs.n	8002394 <PWM_SetDuty+0x1c>
 800238e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002392:	80fb      	strh	r3, [r7, #6]
    if (pulse_us > 2500) pulse_us = 2500;
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800239a:	4293      	cmp	r3, r2
 800239c:	d902      	bls.n	80023a4 <PWM_SetDuty+0x2c>
 800239e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80023a2:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COMPARE(htim, channel, pulse_us);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <PWM_SetDuty+0x3c>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023b2:	e013      	b.n	80023dc <PWM_SetDuty+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_us);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d104      	bne.n	80023c4 <PWM_SetDuty+0x4c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80023c2:	e00b      	b.n	80023dc <PWM_SetDuty+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_us);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d104      	bne.n	80023d4 <PWM_SetDuty+0x5c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023d2:	e003      	b.n	80023dc <PWM_SetDuty+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_us);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <HAL_MspInit+0x4c>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_MspInit+0x4c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <NMI_Handler+0x4>

08002440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <MemManage_Handler+0x4>

08002450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <UsageFault_Handler+0x4>

08002460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248e:	f000 fe6b 	bl	8003168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800249c:	4802      	ldr	r0, [pc, #8]	@ (80024a8 <DMA2_Stream2_IRQHandler+0x10>)
 800249e:	f001 f951 	bl	8003744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000ab4 	.word	0x20000ab4

080024ac <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) {
 80024b2:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <USART1_IRQHandler+0x54>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d118      	bne.n	80024f2 <USART1_IRQHandler+0x46>
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80024c0:	2300      	movs	r3, #0
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <USART1_IRQHandler+0x54>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <USART1_IRQHandler+0x54>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

    uint16_t dma_remaining_bytes = __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <USART1_IRQHandler+0x54>)
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	80fb      	strh	r3, [r7, #6]
    uart_rx_write_pos = UART_RX_BUFFER_SIZE - dma_remaining_bytes;
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <USART1_IRQHandler+0x58>)
 80024ea:	801a      	strh	r2, [r3, #0]

    uart_new_data_available = true;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <USART1_IRQHandler+0x5c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_IRQHandler(&huart1);
 80024f2:	4803      	ldr	r0, [pc, #12]	@ (8002500 <USART1_IRQHandler+0x54>)
 80024f4:	f003 f8a8 	bl	8005648 <HAL_UART_IRQHandler>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000a0c 	.word	0x20000a0c
 8002504:	20000984 	.word	0x20000984
 8002508:	20000986 	.word	0x20000986

0800250c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA2_Stream7_IRQHandler+0x10>)
 8002512:	f001 f917 	bl	8003744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000a54 	.word	0x20000a54

08002520 <TIM3_IRQHandler>:

/* USER CODE BEGIN 1 */
// TIM3_IRQHandler (ensure it's only here)
void TIM3_IRQHandler(void) {
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <TIM3_IRQHandler+0x2c>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <TIM3_IRQHandler+0x22>
        TIM3->SR &= ~TIM_SR_UIF; // Clear the flag
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <TIM3_IRQHandler+0x2c>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a05      	ldr	r2, [pc, #20]	@ (800254c <TIM3_IRQHandler+0x2c>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6113      	str	r3, [r2, #16]
        dshot_send_flag = 1;     // Set global flag
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <TIM3_IRQHandler+0x30>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]


    }
    // If you use HAL, it might be HAL_TIM_IRQHandler(&htim3); instead, check your auto-generated code.
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40000400 	.word	0x40000400
 8002550:	200007c4 	.word	0x200007c4

08002554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return 1;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_kill>:

int _kill(int pid, int sig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800256e:	f005 fa17 	bl	80079a0 <__errno>
 8002572:	4603      	mov	r3, r0
 8002574:	2216      	movs	r2, #22
 8002576:	601a      	str	r2, [r3, #0]
  return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_exit>:

void _exit (int status)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffe7 	bl	8002564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <_exit+0x12>

0800259a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e00a      	b.n	80025c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ac:	f3af 8000 	nop.w
 80025b0:	4601      	mov	r1, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60ba      	str	r2, [r7, #8]
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbf0      	blt.n	80025ac <_read+0x12>
  }

  return len;
 80025ca:	687b      	ldr	r3, [r7, #4]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e009      	b.n	80025fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60ba      	str	r2, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dbf1      	blt.n	80025e6 <_write+0x12>
  }
  return len;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_close>:

int _close(int file)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002634:	605a      	str	r2, [r3, #4]
  return 0;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_isatty>:

int _isatty(int file)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f005 f97c 	bl	80079a0 <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20010000 	.word	0x20010000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	200007c8 	.word	0x200007c8
 80026dc:	20000c68 	.word	0x20000c68

080026e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <SystemInit+0x20>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <SystemInit+0x20>)
 80026ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002720:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <MX_TIM1_Init+0x98>)
 8002722:	4a1f      	ldr	r2, [pc, #124]	@ (80027a0 <MX_TIM1_Init+0x9c>)
 8002724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <MX_TIM1_Init+0x98>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <MX_TIM1_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 34;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <MX_TIM1_Init+0x98>)
 8002734:	2222      	movs	r2, #34	@ 0x22
 8002736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <MX_TIM1_Init+0x98>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <MX_TIM1_Init+0x98>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <MX_TIM1_Init+0x98>)
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800274a:	4814      	ldr	r0, [pc, #80]	@ (800279c <MX_TIM1_Init+0x98>)
 800274c:	f002 f85a 	bl	8004804 <HAL_TIM_Base_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002756:	f7ff fdf1 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800275e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	@ (800279c <MX_TIM1_Init+0x98>)
 8002768:	f002 fa66 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002772:	f7ff fde3 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800277e:	463b      	mov	r3, r7
 8002780:	4619      	mov	r1, r3
 8002782:	4806      	ldr	r0, [pc, #24]	@ (800279c <MX_TIM1_Init+0x98>)
 8002784:	f002 fdf2 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800278e:	f7ff fdd5 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200007cc 	.word	0x200007cc
 80027a0:	40010000 	.word	0x40010000

080027a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	@ 0x38
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027d4:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027d6:	4a33      	ldr	r2, [pc, #204]	@ (80028a4 <MX_TIM3_Init+0x100>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80027da:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027dc:	2253      	movs	r2, #83	@ 0x53
 80027de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b2f      	ldr	r3, [pc, #188]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80027e6:	4b2e      	ldr	r3, [pc, #184]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027e8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027fa:	4829      	ldr	r0, [pc, #164]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 80027fc:	f002 f802 	bl	8004804 <HAL_TIM_Base_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002806:	f7ff fd99 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800280a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002810:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002814:	4619      	mov	r1, r3
 8002816:	4822      	ldr	r0, [pc, #136]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 8002818:	f002 fa0e 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002822:	f7ff fd8b 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002826:	481e      	ldr	r0, [pc, #120]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 8002828:	f002 f83b 	bl	80048a2 <HAL_TIM_PWM_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002832:	f7ff fd83 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	4619      	mov	r1, r3
 8002844:	4816      	ldr	r0, [pc, #88]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 8002846:	f002 fd91 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002850:	f7ff fd74 	bl	800233c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002854:	2360      	movs	r3, #96	@ 0x60
 8002856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	4619      	mov	r1, r3
 800286a:	480d      	ldr	r0, [pc, #52]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 800286c:	f002 f922 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002876:	f7ff fd61 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	2204      	movs	r2, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 8002882:	f002 f917 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800288c:	f7ff fd56 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002890:	4803      	ldr	r0, [pc, #12]	@ (80028a0 <MX_TIM3_Init+0xfc>)
 8002892:	f000 f90b 	bl	8002aac <HAL_TIM_MspPostInit>

}
 8002896:	bf00      	nop
 8002898:	3738      	adds	r7, #56	@ 0x38
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000814 	.word	0x20000814
 80028a4:	40000400 	.word	0x40000400

080028a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	@ 0x38
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	f107 0320 	add.w	r3, r7, #32
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
 80028d4:	615a      	str	r2, [r3, #20]
 80028d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028da:	4a33      	ldr	r2, [pc, #204]	@ (80029a8 <MX_TIM4_Init+0x100>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028e0:	2253      	movs	r2, #83	@ 0x53
 80028e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e4:	4b2f      	ldr	r3, [pc, #188]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80028ea:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028ec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80028f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f2:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028fe:	4829      	ldr	r0, [pc, #164]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 8002900:	f001 ff80 	bl	8004804 <HAL_TIM_Base_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800290a:	f7ff fd17 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002914:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002918:	4619      	mov	r1, r3
 800291a:	4822      	ldr	r0, [pc, #136]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 800291c:	f002 f98c 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002926:	f7ff fd09 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800292a:	481e      	ldr	r0, [pc, #120]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 800292c:	f001 ffb9 	bl	80048a2 <HAL_TIM_PWM_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002936:	f7ff fd01 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002942:	f107 0320 	add.w	r3, r7, #32
 8002946:	4619      	mov	r1, r3
 8002948:	4816      	ldr	r0, [pc, #88]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 800294a:	f002 fd0f 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002954:	f7ff fcf2 	bl	800233c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002958:	2360      	movs	r3, #96	@ 0x60
 800295a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	480d      	ldr	r0, [pc, #52]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 8002970:	f002 f8a0 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800297a:	f7ff fcdf 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2204      	movs	r2, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4807      	ldr	r0, [pc, #28]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 8002986:	f002 f895 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002990:	f7ff fcd4 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002994:	4803      	ldr	r0, [pc, #12]	@ (80029a4 <MX_TIM4_Init+0xfc>)
 8002996:	f000 f889 	bl	8002aac <HAL_TIM_MspPostInit>

}
 800299a:	bf00      	nop
 800299c:	3738      	adds	r7, #56	@ 0x38
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000085c 	.word	0x2000085c
 80029a8:	40000800 	.word	0x40000800

080029ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a36      	ldr	r2, [pc, #216]	@ (8002a94 <HAL_TIM_Base_MspInit+0xe8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d13f      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	4b35      	ldr	r3, [pc, #212]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a34      	ldr	r2, [pc, #208]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80029da:	4b30      	ldr	r3, [pc, #192]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029dc:	4a30      	ldr	r2, [pc, #192]	@ (8002aa0 <HAL_TIM_Base_MspInit+0xf4>)
 80029de:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80029e0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029e2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029ea:	2240      	movs	r2, #64	@ 0x40
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029fa:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 80029fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a02:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a0a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8002a0c:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a12:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a18:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002a20:	481e      	ldr	r0, [pc, #120]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a22:	f000 fcf7 	bl	8003414 <HAL_DMA_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002a2c:	f7ff fc86 	bl	800233c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a34:	621a      	str	r2, [r3, #32]
 8002a36:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf0>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a3c:	e026      	b.n	8002a8c <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_TIM_Base_MspInit+0xf8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10e      	bne.n	8002a66 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	4a11      	ldr	r2, [pc, #68]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
}
 8002a64:	e012      	b.n	8002a8c <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM4)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_TIM_Base_MspInit+0xfc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10d      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_TIM_Base_MspInit+0xec>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	200008a4 	.word	0x200008a4
 8002aa0:	40026488 	.word	0x40026488
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_TIM_MspPostInit+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d11e      	bne.n	8002b0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002aea:	2330      	movs	r3, #48	@ 0x30
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002afa:	2302      	movs	r3, #2
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4817      	ldr	r0, [pc, #92]	@ (8002b64 <HAL_TIM_MspPostInit+0xb8>)
 8002b06:	f001 f887 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b0a:	e022      	b.n	8002b52 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <HAL_TIM_MspPostInit+0xbc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d11d      	bne.n	8002b52 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	4a10      	ldr	r2, [pc, #64]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_TIM_MspPostInit+0xb4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b32:	23c0      	movs	r3, #192	@ 0xc0
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b42:	2302      	movs	r3, #2
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	@ (8002b64 <HAL_TIM_MspPostInit+0xb8>)
 8002b4e:	f001 f863 	bl	8003c18 <HAL_GPIO_Init>
}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	@ 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40000800 	.word	0x40000800

08002b6c <UART_CMD_Init>:

// External symbols
extern UART_HandleTypeDef huart1;
extern volatile float pid_target_speed_rpms[MOTORS_COUNT];

void UART_CMD_Init(UART_HandleTypeDef *huart) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, uart_rx_buffer, UART_RX_BUFFER_SIZE);
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	4908      	ldr	r1, [pc, #32]	@ (8002b98 <UART_CMD_Init+0x2c>)
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f002 fd40 	bl	80055fe <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0210 	orr.w	r2, r2, #16
 8002b8c:	60da      	str	r2, [r3, #12]
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000904 	.word	0x20000904

08002b9c <Debug_Send_DMA>:

// Non-blocking UART transmit with timeout protection
void Debug_Send_DMA(const char* format, ...) {
 8002b9c:	b40f      	push	{r0, r1, r2, r3}
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
    // If UART is busy, skip this message to avoid blocking
    if (uart_tx_busy) {
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <Debug_Send_DMA+0x70>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d126      	bne.n	8002bfc <Debug_Send_DMA+0x60>
        return;
    }

    va_list args;
    va_start(args, format);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	607b      	str	r3, [r7, #4]
    int len = vsnprintf(uart_tx_buffer, sizeof(uart_tx_buffer), format, args);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	4815      	ldr	r0, [pc, #84]	@ (8002c10 <Debug_Send_DMA+0x74>)
 8002bbc:	f004 fe34 	bl	8007828 <vsniprintf>
 8002bc0:	60f8      	str	r0, [r7, #12]
    va_end(args);

    if (len > 0 && len < (int)sizeof(uart_tx_buffer)) {
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	dd1a      	ble.n	8002bfe <Debug_Send_DMA+0x62>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bcc:	dc17      	bgt.n	8002bfe <Debug_Send_DMA+0x62>
        uart_tx_busy = true;
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <Debug_Send_DMA+0x70>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]

        // Use HAL_UART_Transmit with reasonable timeout
        // This will block briefly but not disrupt DShot timing too much
        HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buffer, len, 10);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	230a      	movs	r3, #10
 8002bda:	490d      	ldr	r1, [pc, #52]	@ (8002c10 <Debug_Send_DMA+0x74>)
 8002bdc:	480d      	ldr	r0, [pc, #52]	@ (8002c14 <Debug_Send_DMA+0x78>)
 8002bde:	f002 fc83 	bl	80054e8 <HAL_UART_Transmit>
 8002be2:	4603      	mov	r3, r0
 8002be4:	72fb      	strb	r3, [r7, #11]

        if (status != HAL_OK) {
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <Debug_Send_DMA+0x58>
            // Transmission failed or timed out
            uart_tx_busy = false;
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <Debug_Send_DMA+0x70>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e004      	b.n	8002bfe <Debug_Send_DMA+0x62>
        } else {
            uart_tx_busy = false;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <Debug_Send_DMA+0x70>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e000      	b.n	8002bfe <Debug_Send_DMA+0x62>
        return;
 8002bfc:	bf00      	nop
        }
    }
}
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c06:	b004      	add	sp, #16
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000987 	.word	0x20000987
 8002c10:	20000988 	.word	0x20000988
 8002c14:	20000a0c 	.word	0x20000a0c

08002c18 <process_uart_command>:

    if (len > 0) {
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)dma_tx_buffer, len);
    }
}
void process_uart_command(void) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b0ab      	sub	sp, #172	@ 0xac
 8002c1c:	af00      	add	r7, sp, #0
    static uint16_t read_pos_tracker = 0;
    uint16_t current_end_pos = uart_rx_write_pos;
 8002c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8002e58 <process_uart_command+0x240>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    uint16_t bytes_received;
    if (current_end_pos >= read_pos_tracker) {
 8002c26:	4b8d      	ldr	r3, [pc, #564]	@ (8002e5c <process_uart_command+0x244>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d307      	bcc.n	8002c42 <process_uart_command+0x2a>
        bytes_received = current_end_pos - read_pos_tracker;
 8002c32:	4b8a      	ldr	r3, [pc, #552]	@ (8002e5c <process_uart_command+0x244>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8002c40:	e008      	b.n	8002c54 <process_uart_command+0x3c>
    } else {
        bytes_received = UART_RX_BUFFER_SIZE - read_pos_tracker + current_end_pos;
 8002c42:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <process_uart_command+0x244>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3380      	adds	r3, #128	@ 0x80
 8002c50:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    }

    uart_new_data_available = false;
 8002c54:	4b82      	ldr	r3, [pc, #520]	@ (8002e60 <process_uart_command+0x248>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    if (bytes_received == 0) return;
 8002c5a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80f5 	beq.w	8002e4e <process_uart_command+0x236>

    // Copy received bytes into a temporary buffer
    char temp_buffer[UART_RX_BUFFER_SIZE + 1];
    if (current_end_pos >= read_pos_tracker) {
 8002c64:	4b7d      	ldr	r3, [pc, #500]	@ (8002e5c <process_uart_command+0x244>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d30c      	bcc.n	8002c8a <process_uart_command+0x72>
        memcpy(temp_buffer, &uart_rx_buffer[read_pos_tracker], bytes_received);
 8002c70:	4b7a      	ldr	r3, [pc, #488]	@ (8002e5c <process_uart_command+0x244>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b7b      	ldr	r3, [pc, #492]	@ (8002e64 <process_uart_command+0x24c>)
 8002c78:	18d1      	adds	r1, r2, r3
 8002c7a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 feb9 	bl	80079fa <memcpy>
 8002c88:	e01c      	b.n	8002cc4 <process_uart_command+0xac>
    } else {
        memcpy(temp_buffer, &uart_rx_buffer[read_pos_tracker], UART_RX_BUFFER_SIZE - read_pos_tracker);
 8002c8a:	4b74      	ldr	r3, [pc, #464]	@ (8002e5c <process_uart_command+0x244>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b74      	ldr	r3, [pc, #464]	@ (8002e64 <process_uart_command+0x24c>)
 8002c92:	18d1      	adds	r1, r2, r3
 8002c94:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <process_uart_command+0x244>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fea9 	bl	80079fa <memcpy>
        memcpy(temp_buffer + (UART_RX_BUFFER_SIZE - read_pos_tracker), uart_rx_buffer, current_end_pos);
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e5c <process_uart_command+0x244>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002cbc:	4969      	ldr	r1, [pc, #420]	@ (8002e64 <process_uart_command+0x24c>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 fe9b 	bl	80079fa <memcpy>
    }
    temp_buffer[bytes_received] = '\0'; // null-terminate
 8002cc4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002cc8:	33a8      	adds	r3, #168	@ 0xa8
 8002cca:	443b      	add	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f803 2c9c 	strb.w	r2, [r3, #-156]
    read_pos_tracker = current_end_pos;
 8002cd2:	4a62      	ldr	r2, [pc, #392]	@ (8002e5c <process_uart_command+0x244>)
 8002cd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002cd8:	8013      	strh	r3, [r2, #0]

    // Process each line separately (split by '\r' or '\n')
    char *line = strtok(temp_buffer, "\r\n");
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4962      	ldr	r1, [pc, #392]	@ (8002e68 <process_uart_command+0x250>)
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fdb7 	bl	8007854 <strtok>
 8002ce6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (line != NULL) {
 8002cea:	e0aa      	b.n	8002e42 <process_uart_command+0x22a>
        // Trim leading spaces/tabs
        while (*line == ' ' || *line == '\t') line++;
 8002cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d0f5      	beq.n	8002cec <process_uart_command+0xd4>
 8002d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b09      	cmp	r3, #9
 8002d08:	d0f0      	beq.n	8002cec <process_uart_command+0xd4>
        // Trim trailing spaces/tabs
        size_t len = strlen(line);
 8002d0a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d0e:	f7fd fac7 	bl	80002a0 <strlen>
 8002d12:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        while (len > 0 && (line[len-1] == ' ' || line[len-1] == '\t')) line[--len] = '\0';
 8002d16:	e00b      	b.n	8002d30 <process_uart_command+0x118>
 8002d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d22:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d011      	beq.n	8002d5c <process_uart_command+0x144>
 8002d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d0e6      	beq.n	8002d18 <process_uart_command+0x100>
 8002d4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d0dd      	beq.n	8002d18 <process_uart_command+0x100>

        // Skip empty lines
        if (len > 0) {
 8002d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d068      	beq.n	8002e36 <process_uart_command+0x21e>
            // Special case: "0.00" -> zero all motors
            if (strcmp(line, "0.00") == 0) {
 8002d64:	4941      	ldr	r1, [pc, #260]	@ (8002e6c <process_uart_command+0x254>)
 8002d66:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d6a:	f7fd fa39 	bl	80001e0 <strcmp>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d118      	bne.n	8002da6 <process_uart_command+0x18e>
                for (unsigned int i = 0; i < MOTORS_COUNT; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d7a:	e00c      	b.n	8002d96 <process_uart_command+0x17e>
                    pid_target_speed_rpms[i] = 0.0f;
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e70 <process_uart_command+0x258>)
 8002d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
                for (unsigned int i = 0; i < MOTORS_COUNT; i++)
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d9ee      	bls.n	8002d7c <process_uart_command+0x164>
                Debug_Send_DMA("CMD: Set ALL motors to 0 RPM\r\n");
 8002d9e:	4835      	ldr	r0, [pc, #212]	@ (8002e74 <process_uart_command+0x25c>)
 8002da0:	f7ff fefc 	bl	8002b9c <Debug_Send_DMA>
 8002da4:	e047      	b.n	8002e36 <process_uart_command+0x21e>
            } else {
                // Parse command "<motor>.<rpm>"
                unsigned int motor_idx;
                float new_value;
                int parsed_items = sscanf(line, "%u.%f", &motor_idx, &new_value);
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	f107 0208 	add.w	r2, r7, #8
 8002dac:	4932      	ldr	r1, [pc, #200]	@ (8002e78 <process_uart_command+0x260>)
 8002dae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002db2:	f004 fc99 	bl	80076e8 <siscanf>
 8002db6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if (parsed_items == 2) {
 8002dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d136      	bne.n	8002e30 <process_uart_command+0x218>
                    if (motor_idx < MOTORS_COUNT) {
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d82d      	bhi.n	8002e24 <process_uart_command+0x20c>
                        // Clamp or validate RPM range if needed
                        #define MAX_ALLOWED_VALUE 10000.0f
                        #define MIN_ALLOWED_VALUE -10000.0f
                        if (new_value >= MIN_ALLOWED_VALUE && new_value <= MAX_ALLOWED_VALUE) {
 8002dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dcc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002e7c <process_uart_command+0x264>
 8002dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	db1a      	blt.n	8002e10 <process_uart_command+0x1f8>
 8002dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dde:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002e80 <process_uart_command+0x268>
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	d811      	bhi.n	8002e10 <process_uart_command+0x1f8>
                            pid_target_speed_rpms[motor_idx] = new_value;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	491f      	ldr	r1, [pc, #124]	@ (8002e70 <process_uart_command+0x258>)
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	601a      	str	r2, [r3, #0]
                            Debug_Send_DMA("CMD: M%u -> %.0f RPM\r\n", motor_idx, new_value);
 8002df8:	68bc      	ldr	r4, [r7, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fbbb 	bl	8000578 <__aeabi_f2d>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4621      	mov	r1, r4
 8002e08:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <process_uart_command+0x26c>)
 8002e0a:	f7ff fec7 	bl	8002b9c <Debug_Send_DMA>
 8002e0e:	e012      	b.n	8002e36 <process_uart_command+0x21e>
                        } else {
                            Debug_Send_DMA("CMD: Value %.0f out of range\r\n", new_value);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fbb0 	bl	8000578 <__aeabi_f2d>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	481a      	ldr	r0, [pc, #104]	@ (8002e88 <process_uart_command+0x270>)
 8002e1e:	f7ff febd 	bl	8002b9c <Debug_Send_DMA>
 8002e22:	e008      	b.n	8002e36 <process_uart_command+0x21e>
                        }
                    } else {
                        Debug_Send_DMA("CMD: Invalid motor %u\r\n", motor_idx);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4818      	ldr	r0, [pc, #96]	@ (8002e8c <process_uart_command+0x274>)
 8002e2a:	f7ff feb7 	bl	8002b9c <Debug_Send_DMA>
 8002e2e:	e002      	b.n	8002e36 <process_uart_command+0x21e>
                    }
                } else {
                    Debug_Send_DMA("CMD: Bad format. Use: <motor>.<rpm>\r\n");
 8002e30:	4817      	ldr	r0, [pc, #92]	@ (8002e90 <process_uart_command+0x278>)
 8002e32:	f7ff feb3 	bl	8002b9c <Debug_Send_DMA>
                }
            }
        }

        line = strtok(NULL, "\r\n"); // next line in buffer
 8002e36:	490c      	ldr	r1, [pc, #48]	@ (8002e68 <process_uart_command+0x250>)
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f004 fd0b 	bl	8007854 <strtok>
 8002e3e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (line != NULL) {
 8002e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f47f af55 	bne.w	8002cf6 <process_uart_command+0xde>
 8002e4c:	e000      	b.n	8002e50 <process_uart_command+0x238>
    if (bytes_received == 0) return;
 8002e4e:	bf00      	nop
    }
}
 8002e50:	37ac      	adds	r7, #172	@ 0xac
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000984 	.word	0x20000984
 8002e5c:	20000a08 	.word	0x20000a08
 8002e60:	20000986 	.word	0x20000986
 8002e64:	20000904 	.word	0x20000904
 8002e68:	0800b8fc 	.word	0x0800b8fc
 8002e6c:	0800b900 	.word	0x0800b900
 8002e70:	20000218 	.word	0x20000218
 8002e74:	0800b908 	.word	0x0800b908
 8002e78:	0800b928 	.word	0x0800b928
 8002e7c:	c61c4000 	.word	0xc61c4000
 8002e80:	461c4000 	.word	0x461c4000
 8002e84:	0800b930 	.word	0x0800b930
 8002e88:	0800b948 	.word	0x0800b948
 8002e8c:	0800b968 	.word	0x0800b968
 8002e90:	0800b980 	.word	0x0800b980

08002e94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <MX_USART1_UART_Init+0x50>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eca:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ecc:	f002 fabc 	bl	8005448 <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ed6:	f7ff fa31 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000a0c 	.word	0x20000a0c
 8002ee4:	40011000 	.word	0x40011000

08002ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_UART_MspInit+0x168>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f040 809d 	bne.w	8003046 <HAL_UART_MspInit+0x15e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	4b50      	ldr	r3, [pc, #320]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	4a4f      	ldr	r2, [pc, #316]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4a48      	ldr	r2, [pc, #288]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f38:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <HAL_UART_MspInit+0x16c>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f56:	2307      	movs	r3, #7
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	4619      	mov	r1, r3
 8002f60:	483d      	ldr	r0, [pc, #244]	@ (8003058 <HAL_UART_MspInit+0x170>)
 8002f62:	f000 fe59 	bl	8003c18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f66:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f68:	4a3d      	ldr	r2, [pc, #244]	@ (8003060 <HAL_UART_MspInit+0x178>)
 8002f6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f74:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f76:	2240      	movs	r2, #64	@ 0x40
 8002f78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7a:	4b38      	ldr	r3, [pc, #224]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f80:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f88:	4b34      	ldr	r3, [pc, #208]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f90:	4b32      	ldr	r3, [pc, #200]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f98:	4b30      	ldr	r3, [pc, #192]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002fa0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fa4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fac:	482b      	ldr	r0, [pc, #172]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002fae:	f000 fa31 	bl	8003414 <HAL_DMA_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8002fb8:	f7ff f9c0 	bl	800233c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a27      	ldr	r2, [pc, #156]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fc2:	4a26      	ldr	r2, [pc, #152]	@ (800305c <HAL_UART_MspInit+0x174>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_UART_MspInit+0x180>)
 8002fcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002fce:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fd0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8002ffe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003002:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003004:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800300a:	4816      	ldr	r0, [pc, #88]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 800300c:	f000 fa02 	bl	8003414 <HAL_DMA_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8003016:	f7ff f991 	bl	800233c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a11      	ldr	r2, [pc, #68]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 800301e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003020:	4a10      	ldr	r2, [pc, #64]	@ (8003064 <HAL_UART_MspInit+0x17c>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	2025      	movs	r0, #37	@ 0x25
 800302c:	f000 f9bb 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003030:	2025      	movs	r0, #37	@ 0x25
 8003032:	f000 f9d4 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <HAL_UART_MspInit+0x184>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_UART_MspInit+0x184>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0210 	orr.w	r2, r2, #16
 8003044:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	@ 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40011000 	.word	0x40011000
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	20000a54 	.word	0x20000a54
 8003060:	400264b8 	.word	0x400264b8
 8003064:	20000ab4 	.word	0x20000ab4
 8003068:	40026440 	.word	0x40026440
 800306c:	20000a0c 	.word	0x20000a0c

08003070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003074:	f7ff fb34 	bl	80026e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800307a:	490d      	ldr	r1, [pc, #52]	@ (80030b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003090:	4c0a      	ldr	r4, [pc, #40]	@ (80030bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309e:	f004 fc85 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a2:	f7fe ff1b 	bl	8001edc <main>
  bx  lr    
 80030a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80030b4:	0800bf0c 	.word	0x0800bf0c
  ldr r2, =_sbss
 80030b8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80030bc:	20000c64 	.word	0x20000c64

080030c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC_IRQHandler>
	...

080030c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <HAL_Init+0x40>)
 80030ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_Init+0x40>)
 80030da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a07      	ldr	r2, [pc, #28]	@ (8003104 <HAL_Init+0x40>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ec:	2003      	movs	r0, #3
 80030ee:	f000 f94f 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f2:	200f      	movs	r0, #15
 80030f4:	f000 f808 	bl	8003108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f8:	f7ff f976 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003110:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_InitTick+0x54>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <HAL_InitTick+0x58>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f967 	bl	80033fa <HAL_SYSTICK_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00e      	b.n	8003154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d80a      	bhi.n	8003152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800313c:	2200      	movs	r2, #0
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f000 f92f 	bl	80033a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003148:	4a06      	ldr	r2, [pc, #24]	@ (8003164 <HAL_InitTick+0x5c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000018 	.word	0x20000018
 8003160:	20000020 	.word	0x20000020
 8003164:	2000001c 	.word	0x2000001c

08003168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800316c:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_IncTick+0x20>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_IncTick+0x24>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4413      	add	r3, r2
 8003178:	4a04      	ldr	r2, [pc, #16]	@ (800318c <HAL_IncTick+0x24>)
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000020 	.word	0x20000020
 800318c:	20000b14 	.word	0x20000b14

08003190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return uwTick;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_GetTick+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000b14 	.word	0x20000b14

080031a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff ffee 	bl	8003190 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d005      	beq.n	80031ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c2:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <HAL_Delay+0x44>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ce:	bf00      	nop
 80031d0:	f7ff ffde 	bl	8003190 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d8f7      	bhi.n	80031d0 <HAL_Delay+0x28>
  {
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000020 	.word	0x20000020

080031f0 <__NVIC_SetPriorityGrouping>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4907      	ldr	r1, [pc, #28]	@ (800328c <__NVIC_EnableIRQ+0x38>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	@ (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff29 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b8:	f7ff ff3e 	bl	8003238 <__NVIC_GetPriorityGrouping>
 80033bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff8e 	bl	80032e4 <NVIC_EncodePriority>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff5d 	bl	8003290 <__NVIC_SetPriority>
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff31 	bl	8003254 <__NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ffa2 	bl	800334c <SysTick_Config>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff feb6 	bl	8003190 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e099      	b.n	8003564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003450:	e00f      	b.n	8003472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003452:	f7ff fe9d 	bl	8003190 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b05      	cmp	r3, #5
 800345e:	d908      	bls.n	8003472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2203      	movs	r2, #3
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e078      	b.n	8003564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e8      	bne.n	8003452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4b38      	ldr	r3, [pc, #224]	@ (800356c <HAL_DMA_Init+0x158>)
 800348c:	4013      	ands	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d107      	bne.n	80034dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	4313      	orrs	r3, r2
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	2b04      	cmp	r3, #4
 8003504:	d117      	bne.n	8003536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fb01 	bl	8003b20 <DMA_CheckFifoParam>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003532:	2301      	movs	r3, #1
 8003534:	e016      	b.n	8003564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fab8 	bl	8003ab4 <DMA_CalcBaseAndBitshift>
 8003544:	4603      	mov	r3, r0
 8003546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	223f      	movs	r2, #63	@ 0x3f
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	f010803f 	.word	0xf010803f

08003570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_DMA_Start_IT+0x26>
 8003592:	2302      	movs	r3, #2
 8003594:	e040      	b.n	8003618 <HAL_DMA_Start_IT+0xa8>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d12f      	bne.n	800360a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa4a 	bl	8003a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	223f      	movs	r2, #63	@ 0x3f
 80035ca:	409a      	lsls	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0216 	orr.w	r2, r2, #22
 80035de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e005      	b.n	8003616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003612:	2302      	movs	r3, #2
 8003614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800362e:	f7ff fdaf 	bl	8003190 <HAL_GetTick>
 8003632:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d008      	beq.n	8003652 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2280      	movs	r2, #128	@ 0x80
 8003644:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e052      	b.n	80036f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0216 	bic.w	r2, r2, #22
 8003660:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003670:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_DMA_Abort+0x62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	e013      	b.n	80036cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a4:	f7ff fd74 	bl	8003190 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d90c      	bls.n	80036cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e015      	b.n	80036f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e4      	bne.n	80036a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	223f      	movs	r2, #63	@ 0x3f
 80036e0:	409a      	lsls	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d004      	beq.n	800371e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00c      	b.n	8003738 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2205      	movs	r2, #5
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003750:	4b8e      	ldr	r3, [pc, #568]	@ (800398c <HAL_DMA_IRQHandler+0x248>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a8e      	ldr	r2, [pc, #568]	@ (8003990 <HAL_DMA_IRQHandler+0x24c>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	2208      	movs	r2, #8
 8003770:	409a      	lsls	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01a      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2208      	movs	r2, #8
 800379e:	409a      	lsls	r2, r3
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	2201      	movs	r2, #1
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	f043 0202 	orr.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	2204      	movs	r2, #4
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d012      	beq.n	800381c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	2204      	movs	r2, #4
 800380a:	409a      	lsls	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	2210      	movs	r2, #16
 8003822:	409a      	lsls	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d043      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d03c      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	2210      	movs	r2, #16
 8003840:	409a      	lsls	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d024      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e01f      	b.n	80038b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e016      	b.n	80038b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0208 	bic.w	r2, r2, #8
 80038a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	2220      	movs	r2, #32
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 808f 	beq.w	80039e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8087 	beq.w	80039e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	2220      	movs	r2, #32
 80038dc:	409a      	lsls	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d136      	bne.n	800395c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0216 	bic.w	r2, r2, #22
 80038fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <HAL_DMA_IRQHandler+0x1da>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0208 	bic.w	r2, r2, #8
 800392c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	223f      	movs	r2, #63	@ 0x3f
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	2b00      	cmp	r3, #0
 8003950:	d07e      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
        }
        return;
 800395a:	e079      	b.n	8003a50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01d      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10d      	bne.n	8003994 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	2b00      	cmp	r3, #0
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e02c      	b.n	80039e4 <HAL_DMA_IRQHandler+0x2a0>
 800398a:	bf00      	nop
 800398c:	20000018 	.word	0x20000018
 8003990:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d023      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
 80039a4:	e01e      	b.n	80039e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10f      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0210 	bic.w	r2, r2, #16
 80039c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d032      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2205      	movs	r2, #5
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d307      	bcc.n	8003a2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f2      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x2cc>
 8003a2a:	e000      	b.n	8003a2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	e000      	b.n	8003a52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a50:	bf00      	nop
    }
  }
}
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b40      	cmp	r3, #64	@ 0x40
 8003a84:	d108      	bne.n	8003a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a96:	e007      	b.n	8003aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3b10      	subs	r3, #16
 8003ac4:	4a14      	ldr	r2, [pc, #80]	@ (8003b18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ace:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <DMA_CalcBaseAndBitshift+0x68>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d909      	bls.n	8003af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003af4:	e007      	b.n	8003b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	aaaaaaab 	.word	0xaaaaaaab
 8003b1c:	0800ba58 	.word	0x0800ba58

08003b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d856      	bhi.n	8003bee <DMA_CheckFifoParam+0xce>
 8003b40:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <DMA_CheckFifoParam+0x28>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b6b 	.word	0x08003b6b
 8003b50:	08003b59 	.word	0x08003b59
 8003b54:	08003bef 	.word	0x08003bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d046      	beq.n	8003bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b68:	e043      	b.n	8003bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b72:	d140      	bne.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b78:	e03d      	b.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b82:	d121      	bne.n	8003bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d837      	bhi.n	8003bfa <DMA_CheckFifoParam+0xda>
 8003b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <DMA_CheckFifoParam+0x70>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003ba7 	.word	0x08003ba7
 8003b98:	08003ba1 	.word	0x08003ba1
 8003b9c:	08003bb9 	.word	0x08003bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e030      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d025      	beq.n	8003bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb6:	e022      	b.n	8003bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bc0:	d11f      	bne.n	8003c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bc6:	e01c      	b.n	8003c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d903      	bls.n	8003bd6 <DMA_CheckFifoParam+0xb6>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d003      	beq.n	8003bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd4:	e018      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bda:	e015      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      break;
 8003bec:	e00b      	b.n	8003c06 <DMA_CheckFifoParam+0xe6>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e00a      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e008      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e006      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
    }
  } 
  
  return status; 
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop

08003c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	@ 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e159      	b.n	8003ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f040 8148 	bne.w	8003ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d005      	beq.n	8003c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d130      	bne.n	8003ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 0201 	and.w	r2, r3, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d017      	beq.n	8003d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d123      	bne.n	8003d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3208      	adds	r2, #8
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a2 	beq.w	8003ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	4b57      	ldr	r3, [pc, #348]	@ (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da6:	4a56      	ldr	r2, [pc, #344]	@ (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dae:	4b54      	ldr	r3, [pc, #336]	@ (8003f00 <HAL_GPIO_Init+0x2e8>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dba:	4a52      	ldr	r2, [pc, #328]	@ (8003f04 <HAL_GPIO_Init+0x2ec>)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a49      	ldr	r2, [pc, #292]	@ (8003f08 <HAL_GPIO_Init+0x2f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d019      	beq.n	8003e1a <HAL_GPIO_Init+0x202>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a48      	ldr	r2, [pc, #288]	@ (8003f0c <HAL_GPIO_Init+0x2f4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_GPIO_Init+0x1fe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a47      	ldr	r2, [pc, #284]	@ (8003f10 <HAL_GPIO_Init+0x2f8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00d      	beq.n	8003e12 <HAL_GPIO_Init+0x1fa>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a46      	ldr	r2, [pc, #280]	@ (8003f14 <HAL_GPIO_Init+0x2fc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <HAL_GPIO_Init+0x1f6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a45      	ldr	r2, [pc, #276]	@ (8003f18 <HAL_GPIO_Init+0x300>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_GPIO_Init+0x1f2>
 8003e06:	2304      	movs	r3, #4
 8003e08:	e008      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e004      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e002      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_GPIO_Init+0x204>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f002 0203 	and.w	r2, r2, #3
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	4093      	lsls	r3, r2
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2c:	4935      	ldr	r1, [pc, #212]	@ (8003f04 <HAL_GPIO_Init+0x2ec>)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	3302      	adds	r3, #2
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3a:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e88:	4a24      	ldr	r2, [pc, #144]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e8e:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003edc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f1c <HAL_GPIO_Init+0x304>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	f67f aea2 	bls.w	8003c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020c00 	.word	0x40020c00
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40013c00 	.word	0x40013c00

08003f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f30:	787b      	ldrb	r3, [r7, #1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f3c:	e003      	b.n	8003f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	041a      	lsls	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e267      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f72:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b85      	ldr	r3, [pc, #532]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d112      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b7e      	ldr	r3, [pc, #504]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x108>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e242      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x74>
 8003fba:	4b76      	ldr	r3, [pc, #472]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a75      	ldr	r2, [pc, #468]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b6d      	ldr	r3, [pc, #436]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fec:	4b69      	ldr	r3, [pc, #420]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a68      	ldr	r2, [pc, #416]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7ff f8c0 	bl	8003190 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7ff f8bc 	bl	8003190 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	@ 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e207      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b5b      	ldr	r3, [pc, #364]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xc0>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7ff f8ac 	bl	8003190 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7ff f8a8 	bl	8003190 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	@ 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1f3      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b51      	ldr	r3, [pc, #324]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0xe8>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800406a:	4b4a      	ldr	r3, [pc, #296]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b47      	ldr	r3, [pc, #284]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b44      	ldr	r3, [pc, #272]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b41      	ldr	r3, [pc, #260]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1c7      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4937      	ldr	r1, [pc, #220]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e03a      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b34      	ldr	r3, [pc, #208]	@ (8004198 <HAL_RCC_OscConfig+0x244>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7ff f861 	bl	8003190 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d2:	f7ff f85d 	bl	8003190 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1a8      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4925      	ldr	r1, [pc, #148]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_OscConfig+0x244>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff f840 	bl	8003190 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004114:	f7ff f83c 	bl	8003190 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e187      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <HAL_RCC_OscConfig+0x248>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7ff f820 	bl	8003190 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004154:	f7ff f81c 	bl	8003190 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e167      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_RCC_OscConfig+0x240>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x200>
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004174:	4b09      	ldr	r3, [pc, #36]	@ (800419c <HAL_RCC_OscConfig+0x248>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7ff f809 	bl	8003190 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e00e      	b.n	80041a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7ff f805 	bl	8003190 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d907      	bls.n	80041a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e150      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	42470000 	.word	0x42470000
 800419c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b88      	ldr	r3, [pc, #544]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ea      	bne.n	8004182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8097 	beq.w	80042e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b81      	ldr	r3, [pc, #516]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b7d      	ldr	r3, [pc, #500]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4a7c      	ldr	r2, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041da:	4b7a      	ldr	r3, [pc, #488]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b77      	ldr	r3, [pc, #476]	@ (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b74      	ldr	r3, [pc, #464]	@ (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a73      	ldr	r2, [pc, #460]	@ (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe ffc5 	bl	8003190 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fe ffc1 	bl	8003190 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e10c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b6a      	ldr	r3, [pc, #424]	@ (80043c8 <HAL_RCC_OscConfig+0x474>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x2ea>
 8004230:	4b64      	ldr	r3, [pc, #400]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a63      	ldr	r2, [pc, #396]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	e01c      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x30c>
 8004246:	4b5f      	ldr	r3, [pc, #380]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a5e      	ldr	r2, [pc, #376]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	@ 0x70
 8004252:	4b5c      	ldr	r3, [pc, #368]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a5b      	ldr	r2, [pc, #364]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 8004260:	4b58      	ldr	r3, [pc, #352]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	4a57      	ldr	r2, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	@ 0x70
 800426c:	4b55      	ldr	r3, [pc, #340]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	4a54      	ldr	r2, [pc, #336]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe ff86 	bl	8003190 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fe ff82 	bl	8003190 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0cb      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	4b49      	ldr	r3, [pc, #292]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <HAL_RCC_OscConfig+0x334>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fe ff70 	bl	8003190 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fe ff6c 	bl	8003190 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b5      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ee      	bne.n	80042b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a1 	beq.w	8004434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f2:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d05c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d141      	bne.n	800438a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b31      	ldr	r3, [pc, #196]	@ (80043cc <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fe ff40 	bl	8003190 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fe ff3c 	bl	8003190 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e087      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b27      	ldr	r3, [pc, #156]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	491b      	ldr	r1, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x478>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe ff15 	bl	8003190 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fe ff11 	bl	8003190 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e05c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x416>
 8004388:	e054      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fefe 	bl	8003190 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe fefa 	bl	8003190 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e045      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
 80043b6:	e03d      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e038      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x4ec>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d028      	beq.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d121      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fe fe2c 	bl	8003190 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fe fe28 	bl	8003190 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	@ (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	@ (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fd8c 	bl	8003108 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	0800ba40 	.word	0x0800ba40
 8004608:	20000018 	.word	0x20000018
 800460c:	2000001c 	.word	0x2000001c

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004614:	b090      	sub	sp, #64	@ 0x40
 8004616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004628:	4b59      	ldr	r3, [pc, #356]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d00d      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x40>
 8004634:	2b08      	cmp	r3, #8
 8004636:	f200 80a1 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x16c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x3a>
 8004642:	e09b      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b53      	ldr	r3, [pc, #332]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004648:	e09b      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800464c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800464e:	e098      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004650:	4b4f      	ldr	r3, [pc, #316]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004658:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4b4d      	ldr	r3, [pc, #308]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b4a      	ldr	r3, [pc, #296]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	2200      	movs	r2, #0
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	627a      	str	r2, [r7, #36]	@ 0x24
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004678:	2100      	movs	r1, #0
 800467a:	4b47      	ldr	r3, [pc, #284]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	fb03 f201 	mul.w	r2, r3, r1
 8004680:	2300      	movs	r3, #0
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	4413      	add	r3, r2
 8004688:	4a43      	ldr	r2, [pc, #268]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800468a:	fba0 1202 	umull	r1, r2, r0, r2
 800468e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004690:	460a      	mov	r2, r1
 8004692:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004696:	4413      	add	r3, r2
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	2200      	movs	r2, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046aa:	f7fc fb05 	bl	8000cb8 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4613      	mov	r3, r2
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b6:	e053      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b8:	4b35      	ldr	r3, [pc, #212]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	2200      	movs	r2, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	617a      	str	r2, [r7, #20]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046ca:	f04f 0b00 	mov.w	fp, #0
 80046ce:	4652      	mov	r2, sl
 80046d0:	465b      	mov	r3, fp
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	0159      	lsls	r1, r3, #5
 80046dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e0:	0150      	lsls	r0, r2, #5
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	ebb2 080a 	subs.w	r8, r2, sl
 80046ea:	eb63 090b 	sbc.w	r9, r3, fp
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004702:	ebb2 0408 	subs.w	r4, r2, r8
 8004706:	eb63 0509 	sbc.w	r5, r3, r9
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	00eb      	lsls	r3, r5, #3
 8004714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004718:	00e2      	lsls	r2, r4, #3
 800471a:	4614      	mov	r4, r2
 800471c:	461d      	mov	r5, r3
 800471e:	eb14 030a 	adds.w	r3, r4, sl
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	eb45 030b 	adc.w	r3, r5, fp
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	2200      	movs	r2, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	60fa      	str	r2, [r7, #12]
 8004750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004754:	f7fc fab0 	bl	8000cb8 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004770:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800477a:	e002      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 800477e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004784:	4618      	mov	r0, r3
 8004786:	3740      	adds	r7, #64	@ 0x40
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	017d7840 	.word	0x017d7840

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b03      	ldr	r3, [pc, #12]	@ (80047b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000018 	.word	0x20000018

080047b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047b8:	f7ff fff0 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	@ (80047d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	0800ba50 	.word	0x0800ba50

080047dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e0:	f7ff ffdc 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	0b5b      	lsrs	r3, r3, #13
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	@ (8004800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	0800ba50 	.word	0x0800ba50

08004804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe f8be 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fac0 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e041      	b.n	8004938 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f839 	bl	8004940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 fa71 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_TIM_PWM_Start+0x24>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e022      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d109      	bne.n	8004992 <HAL_TIM_PWM_Start+0x3e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e015      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start+0x58>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e008      	b.n	80049be <HAL_TIM_PWM_Start+0x6a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e068      	b.n	8004a98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x82>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d4:	e013      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x92>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e4:	e00b      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xa2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	e003      	b.n	80049fe <HAL_TIM_PWM_Start+0xaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc8a 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <HAL_TIM_PWM_Start+0x14c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d107      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <HAL_TIM_PWM_Start+0x14c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d013      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <HAL_TIM_PWM_Start+0x150>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <HAL_TIM_PWM_Start+0x154>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_TIM_PWM_Start+0x158>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x10e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <HAL_TIM_PWM_Start+0x15c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d010      	beq.n	8004a96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	e007      	b.n	8004a96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40014000 	.word	0x40014000

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ae      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	f200 809f 	bhi.w	8004c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004c21 	.word	0x08004c21
 8004af0:	08004c21 	.word	0x08004c21
 8004af4:	08004c21 	.word	0x08004c21
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	08004c21 	.word	0x08004c21
 8004b04:	08004c21 	.word	0x08004c21
 8004b08:	08004b9f 	.word	0x08004b9f
 8004b0c:	08004c21 	.word	0x08004c21
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	08004c21 	.word	0x08004c21
 8004b18:	08004bdf 	.word	0x08004bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f9d6 	bl	8004ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e064      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa1c 	bl	8004fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e043      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa67 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fab1 	bl	800514c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0b4      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd4>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x172>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xa6>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	f000 faf7 	bl	80052e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 fae0 	bl	80052e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa54 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	@ 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 faad 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fa73 	bl	800524a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	@ 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa9d 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa34 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fa8d 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fa84 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a37      	ldr	r2, [pc, #220]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a34      	ldr	r2, [pc, #208]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a21      	ldr	r2, [pc, #132]	@ (8004ecc <TIM_Base_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ed0 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d103      	bne.n	8004e92 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 0201 	bic.w	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0308 	bic.w	r3, r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d111      	bne.n	8004f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000

08004fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f023 0210 	bic.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0320 	bic.w	r3, r3, #32
 8004fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8005074 <TIM_OC2_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <TIM_OC2_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10d      	bne.n	80050f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	@ (80051e8 <TIM_OC4_SetConfig+0x9c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d109      	bne.n	80051c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0210 	bic.w	r2, r3, #16
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e050      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e042      	b.n	80054e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd fd3a 	bl	8002ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	@ 0x24
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800548a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 ff6f 	bl	8006370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	d175      	bne.n	80055f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Transmit+0x2c>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e06e      	b.n	80055f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2221      	movs	r2, #33	@ 0x21
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005526:	f7fd fe33 	bl	8003190 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005540:	d108      	bne.n	8005554 <HAL_UART_Transmit+0x6c>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e003      	b.n	800555c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800555c:	e02e      	b.n	80055bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	2180      	movs	r1, #128	@ 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fc3f 	bl	8005dec <UART_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e03a      	b.n	80055f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	3302      	adds	r3, #2
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	e007      	b.n	80055ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1cb      	bne.n	800555e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2140      	movs	r1, #64	@ 0x40
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fc0b 	bl	8005dec <UART_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	d112      	bne.n	800563e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Receive_DMA+0x26>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e00b      	b.n	8005640 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	461a      	mov	r2, r3
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fc33 	bl	8005ea0 <UART_Start_Receive_DMA>
 800563a:	4603      	mov	r3, r0
 800563c:	e000      	b.n	8005640 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b0ba      	sub	sp, #232	@ 0xe8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_UART_IRQHandler+0x66>
 800569a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fda4 	bl	80061f4 <UART_Receive_IT>
      return;
 80056ac:	e273      	b.n	8005b96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80de 	beq.w	8005874 <HAL_UART_IRQHandler+0x22c>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80d1 	beq.w	8005874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_UART_IRQHandler+0xae>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_UART_IRQHandler+0xd2>
 8005702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	f043 0202 	orr.w	r2, r3, #2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_UART_IRQHandler+0xf6>
 8005726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d011      	beq.n	800576e <HAL_UART_IRQHandler+0x126>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f043 0208 	orr.w	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 820a 	beq.w	8005b8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_UART_IRQHandler+0x14e>
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fd2f 	bl	80061f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <HAL_UART_IRQHandler+0x17a>
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04f      	beq.n	8005862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fc3a 	bl	800603c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d2:	2b40      	cmp	r3, #64	@ 0x40
 80057d4:	d141      	bne.n	800585a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800580e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800581a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1d9      	bne.n	80057d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d013      	beq.n	8005852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582e:	4a8a      	ldr	r2, [pc, #552]	@ (8005a58 <HAL_UART_IRQHandler+0x410>)
 8005830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005836:	4618      	mov	r0, r3
 8005838:	f7fd ff62 	bl	8003700 <HAL_DMA_Abort_IT>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	e00e      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9b6 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e00a      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9b2 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e006      	b.n	8005870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9ae 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800586e:	e18d      	b.n	8005b8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	bf00      	nop
    return;
 8005872:	e18b      	b.n	8005b8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 8167 	bne.w	8005b4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8160 	beq.w	8005b4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8159 	beq.w	8005b4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	f040 80ce 	bne.w	8005a5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80a9 	beq.w	8005a28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058de:	429a      	cmp	r2, r3
 80058e0:	f080 80a2 	bcs.w	8005a28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f6:	f000 8088 	beq.w	8005a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800592a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800593e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d9      	bne.n	80058fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800596a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800596e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800597c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e1      	bne.n	8005946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80059ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e3      	bne.n	80059c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fd fe0b 	bl	8003620 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8d9 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a26:	e0b3      	b.n	8005b90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a30:	429a      	cmp	r2, r3
 8005a32:	f040 80ad 	bne.w	8005b90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a40:	f040 80a6 	bne.w	8005b90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8c1 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
      return;
 8005a56:	e09b      	b.n	8005b90 <HAL_UART_IRQHandler+0x548>
 8005a58:	08006103 	.word	0x08006103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 808e 	beq.w	8005b94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8089 	beq.w	8005b94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e3      	bne.n	8005a82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	617b      	str	r3, [r7, #20]
   return(result);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e3      	bne.n	8005b00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f847 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b4a:	e023      	b.n	8005b94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <HAL_UART_IRQHandler+0x524>
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fadd 	bl	8006124 <UART_Transmit_IT>
    return;
 8005b6a:	e014      	b.n	8005b96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <HAL_UART_IRQHandler+0x54e>
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb1d 	bl	80061c4 <UART_EndTransmit_IT>
    return;
 8005b8a:	e004      	b.n	8005b96 <HAL_UART_IRQHandler+0x54e>
    return;
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b94:	bf00      	nop
  }
}
 8005b96:	37e8      	adds	r7, #232	@ 0xe8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b09c      	sub	sp, #112	@ 0x70
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d172      	bne.n	8005cf2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c0e:	2200      	movs	r2, #0
 8005c10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e5      	bne.n	8005c46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d119      	bne.n	8005cf2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
 8005cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005cde:	61fa      	str	r2, [r7, #28]
 8005ce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	69b9      	ldr	r1, [r7, #24]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	617b      	str	r3, [r7, #20]
   return(result);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d106      	bne.n	8005d0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d04:	4619      	mov	r1, r3
 8005d06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d08:	f7ff ff66 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d0c:	e002      	b.n	8005d14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005d0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d10:	f7ff ff44 	bl	8005b9c <HAL_UART_RxCpltCallback>
}
 8005d14:	bf00      	nop
 8005d16:	3770      	adds	r7, #112	@ 0x70
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d108      	bne.n	8005d4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ff48 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d48:	e002      	b.n	8005d50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff ff30 	bl	8005bb0 <HAL_UART_RxHalfCpltCallback>
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d74:	2b80      	cmp	r3, #128	@ 0x80
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b21      	cmp	r3, #33	@ 0x21
 8005d8a:	d108      	bne.n	8005d9e <UART_DMAError+0x46>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d98:	68b8      	ldr	r0, [r7, #8]
 8005d9a:	f000 f927 	bl	8005fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da8:	2b40      	cmp	r3, #64	@ 0x40
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b22      	cmp	r3, #34	@ 0x22
 8005dbe:	d108      	bne.n	8005dd2 <UART_DMAError+0x7a>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005dcc:	68b8      	ldr	r0, [r7, #8]
 8005dce:	f000 f935 	bl	800603c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	f043 0210 	orr.w	r2, r3, #16
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dde:	68b8      	ldr	r0, [r7, #8]
 8005de0:	f7ff fef0 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfc:	e03b      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d037      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fd f9c3 	bl	8003190 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e03a      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d023      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b80      	cmp	r3, #128	@ 0x80
 8005e32:	d020      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b40      	cmp	r3, #64	@ 0x40
 8005e38:	d01d      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d116      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f8ec 	bl	800603c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2208      	movs	r2, #8
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e00f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d0b4      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b098      	sub	sp, #96	@ 0x60
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2222      	movs	r2, #34	@ 0x22
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	4a44      	ldr	r2, [pc, #272]	@ (8005fe0 <UART_Start_Receive_DMA+0x140>)
 8005ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	4a43      	ldr	r2, [pc, #268]	@ (8005fe4 <UART_Start_Receive_DMA+0x144>)
 8005ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	4a42      	ldr	r2, [pc, #264]	@ (8005fe8 <UART_Start_Receive_DMA+0x148>)
 8005ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ee8:	f107 0308 	add.w	r3, r7, #8
 8005eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	f7fd fb36 	bl	8003570 <HAL_DMA_Start_IT>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e05d      	b.n	8005fd8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d019      	beq.n	8005f6e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e5      	bne.n	8005f3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6a39      	ldr	r1, [r7, #32]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e5      	bne.n	8005fa2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3760      	adds	r7, #96	@ 0x60
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	08005bf1 	.word	0x08005bf1
 8005fe4:	08005d1d 	.word	0x08005d1d
 8005fe8:	08005d59 	.word	0x08005d59

08005fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	@ 0x24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330c      	adds	r3, #12
 8005ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	60bb      	str	r3, [r7, #8]
   return(result);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	61ba      	str	r2, [r7, #24]
 8006016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	613b      	str	r3, [r7, #16]
   return(result);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e5      	bne.n	8005ff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006030:	bf00      	nop
 8006032:	3724      	adds	r7, #36	@ 0x24
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b095      	sub	sp, #84	@ 0x54
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800605a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006064:	643a      	str	r2, [r7, #64]	@ 0x40
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800606a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e5      	bne.n	8006044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3314      	adds	r3, #20
 800607e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	61fb      	str	r3, [r7, #28]
   return(result);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800609e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d119      	bne.n	80060e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0310 	bic.w	r3, r3, #16
 80060ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060d4:	61ba      	str	r2, [r7, #24]
 80060d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	613b      	str	r3, [r7, #16]
   return(result);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e5      	bne.n	80060b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060f6:	bf00      	nop
 80060f8:	3754      	adds	r7, #84	@ 0x54
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fd54 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b21      	cmp	r3, #33	@ 0x21
 8006136:	d13e      	bne.n	80061b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006140:	d114      	bne.n	800616c <UART_Transmit_IT+0x48>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d110      	bne.n	800616c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	e008      	b.n	800617e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6211      	str	r1, [r2, #32]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fc f829 	bl	800223c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	@ 0x30
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b22      	cmp	r3, #34	@ 0x22
 800620e:	f040 80aa 	bne.w	8006366 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621a:	d115      	bne.n	8006248 <UART_Receive_IT+0x54>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d111      	bne.n	8006248 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	b29a      	uxth	r2, r3
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	629a      	str	r2, [r3, #40]	@ 0x28
 8006246:	e024      	b.n	8006292 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006256:	d007      	beq.n	8006268 <UART_Receive_IT+0x74>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <UART_Receive_IT+0x82>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e008      	b.n	8006288 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d15d      	bne.n	8006362 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0220 	bic.w	r2, r2, #32
 80062b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d135      	bne.n	8006358 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006312:	623a      	str	r2, [r7, #32]
 8006314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	69f9      	ldr	r1, [r7, #28]
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b10      	cmp	r3, #16
 8006332:	d10a      	bne.n	800634a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fc41 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
 8006356:	e002      	b.n	800635e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fc1f 	bl	8005b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e002      	b.n	8006368 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3730      	adds	r7, #48	@ 0x30
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006374:	b0c0      	sub	sp, #256	@ 0x100
 8006376:	af00      	add	r7, sp, #0
 8006378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	68d9      	ldr	r1, [r3, #12]
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	ea40 0301 	orr.w	r3, r0, r1
 8006398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063c8:	f021 010c 	bic.w	r1, r1, #12
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063d6:	430b      	orrs	r3, r1
 80063d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	6999      	ldr	r1, [r3, #24]
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	ea40 0301 	orr.w	r3, r0, r1
 80063f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b8f      	ldr	r3, [pc, #572]	@ (800663c <UART_SetConfig+0x2cc>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d005      	beq.n	8006410 <UART_SetConfig+0xa0>
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <UART_SetConfig+0x2d0>)
 800640c:	429a      	cmp	r2, r3
 800640e:	d104      	bne.n	800641a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fe f9e4 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 8006414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006418:	e003      	b.n	8006422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800641a:	f7fe f9cb 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 800641e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800642c:	f040 810c 	bne.w	8006648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800643a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800643e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	1891      	adds	r1, r2, r2
 8006448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800644a:	415b      	adcs	r3, r3
 800644c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800644e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006452:	4621      	mov	r1, r4
 8006454:	eb12 0801 	adds.w	r8, r2, r1
 8006458:	4629      	mov	r1, r5
 800645a:	eb43 0901 	adc.w	r9, r3, r1
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800646a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800646e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006472:	4690      	mov	r8, r2
 8006474:	4699      	mov	r9, r3
 8006476:	4623      	mov	r3, r4
 8006478:	eb18 0303 	adds.w	r3, r8, r3
 800647c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006480:	462b      	mov	r3, r5
 8006482:	eb49 0303 	adc.w	r3, r9, r3
 8006486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800649a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800649e:	460b      	mov	r3, r1
 80064a0:	18db      	adds	r3, r3, r3
 80064a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a4:	4613      	mov	r3, r2
 80064a6:	eb42 0303 	adc.w	r3, r2, r3
 80064aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80064ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064b4:	f7fa fc00 	bl	8000cb8 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4b61      	ldr	r3, [pc, #388]	@ (8006644 <UART_SetConfig+0x2d4>)
 80064be:	fba3 2302 	umull	r2, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	011c      	lsls	r4, r3, #4
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064e0:	415b      	adcs	r3, r3
 80064e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064e8:	4641      	mov	r1, r8
 80064ea:	eb12 0a01 	adds.w	sl, r2, r1
 80064ee:	4649      	mov	r1, r9
 80064f0:	eb43 0b01 	adc.w	fp, r3, r1
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006508:	4692      	mov	sl, r2
 800650a:	469b      	mov	fp, r3
 800650c:	4643      	mov	r3, r8
 800650e:	eb1a 0303 	adds.w	r3, sl, r3
 8006512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006516:	464b      	mov	r3, r9
 8006518:	eb4b 0303 	adc.w	r3, fp, r3
 800651c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800652c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006534:	460b      	mov	r3, r1
 8006536:	18db      	adds	r3, r3, r3
 8006538:	643b      	str	r3, [r7, #64]	@ 0x40
 800653a:	4613      	mov	r3, r2
 800653c:	eb42 0303 	adc.w	r3, r2, r3
 8006540:	647b      	str	r3, [r7, #68]	@ 0x44
 8006542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800654a:	f7fa fbb5 	bl	8000cb8 <__aeabi_uldivmod>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4611      	mov	r1, r2
 8006554:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006556:	fba3 2301 	umull	r2, r3, r3, r1
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2264      	movs	r2, #100	@ 0x64
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800656a:	4b36      	ldr	r3, [pc, #216]	@ (8006644 <UART_SetConfig+0x2d4>)
 800656c:	fba3 2302 	umull	r2, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006578:	441c      	add	r4, r3
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	1891      	adds	r1, r2, r2
 8006592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006594:	415b      	adcs	r3, r3
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800659c:	4641      	mov	r1, r8
 800659e:	1851      	adds	r1, r2, r1
 80065a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065a2:	4649      	mov	r1, r9
 80065a4:	414b      	adcs	r3, r1
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065b4:	4659      	mov	r1, fp
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	4651      	mov	r1, sl
 80065ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065be:	4651      	mov	r1, sl
 80065c0:	00ca      	lsls	r2, r1, #3
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	4642      	mov	r2, r8
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065d0:	464b      	mov	r3, r9
 80065d2:	460a      	mov	r2, r1
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065f0:	460b      	mov	r3, r1
 80065f2:	18db      	adds	r3, r3, r3
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	4613      	mov	r3, r2
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006606:	f7fa fb57 	bl	8000cb8 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	@ 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	3332      	adds	r3, #50	@ 0x32
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 0207 	and.w	r2, r3, #7
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4422      	add	r2, r4
 8006636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006638:	e106      	b.n	8006848 <UART_SetConfig+0x4d8>
 800663a:	bf00      	nop
 800663c:	40011000 	.word	0x40011000
 8006640:	40011400 	.word	0x40011400
 8006644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664c:	2200      	movs	r2, #0
 800664e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	1891      	adds	r1, r2, r2
 8006660:	6239      	str	r1, [r7, #32]
 8006662:	415b      	adcs	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
 8006666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800666a:	4641      	mov	r1, r8
 800666c:	1854      	adds	r4, r2, r1
 800666e:	4649      	mov	r1, r9
 8006670:	eb43 0501 	adc.w	r5, r3, r1
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	00eb      	lsls	r3, r5, #3
 800667e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006682:	00e2      	lsls	r2, r4, #3
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	4643      	mov	r3, r8
 800668a:	18e3      	adds	r3, r4, r3
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006690:	464b      	mov	r3, r9
 8006692:	eb45 0303 	adc.w	r3, r5, r3
 8006696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066b6:	4629      	mov	r1, r5
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	4621      	mov	r1, r4
 80066bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c0:	4621      	mov	r1, r4
 80066c2:	008a      	lsls	r2, r1, #2
 80066c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066c8:	f7fa faf6 	bl	8000cb8 <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <UART_SetConfig+0x4e4>)
 80066d2:	fba3 2302 	umull	r2, r3, r3, r2
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	011c      	lsls	r4, r3, #4
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	1891      	adds	r1, r2, r2
 80066f2:	61b9      	str	r1, [r7, #24]
 80066f4:	415b      	adcs	r3, r3
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066fc:	4641      	mov	r1, r8
 80066fe:	1851      	adds	r1, r2, r1
 8006700:	6139      	str	r1, [r7, #16]
 8006702:	4649      	mov	r1, r9
 8006704:	414b      	adcs	r3, r1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006714:	4659      	mov	r1, fp
 8006716:	00cb      	lsls	r3, r1, #3
 8006718:	4651      	mov	r1, sl
 800671a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671e:	4651      	mov	r1, sl
 8006720:	00ca      	lsls	r2, r1, #3
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	4603      	mov	r3, r0
 8006728:	4642      	mov	r2, r8
 800672a:	189b      	adds	r3, r3, r2
 800672c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006754:	4649      	mov	r1, r9
 8006756:	008b      	lsls	r3, r1, #2
 8006758:	4641      	mov	r1, r8
 800675a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675e:	4641      	mov	r1, r8
 8006760:	008a      	lsls	r2, r1, #2
 8006762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006766:	f7fa faa7 	bl	8000cb8 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4611      	mov	r1, r2
 8006770:	4b38      	ldr	r3, [pc, #224]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006772:	fba3 2301 	umull	r2, r3, r3, r1
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	2264      	movs	r2, #100	@ 0x64
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	1acb      	subs	r3, r1, r3
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	3332      	adds	r3, #50	@ 0x32
 8006784:	4a33      	ldr	r2, [pc, #204]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006790:	441c      	add	r4, r3
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	673b      	str	r3, [r7, #112]	@ 0x70
 800679a:	677a      	str	r2, [r7, #116]	@ 0x74
 800679c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	1891      	adds	r1, r2, r2
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	415b      	adcs	r3, r3
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067b0:	4641      	mov	r1, r8
 80067b2:	1851      	adds	r1, r2, r1
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	4649      	mov	r1, r9
 80067b8:	414b      	adcs	r3, r1
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067c8:	4659      	mov	r1, fp
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	4651      	mov	r1, sl
 80067ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d2:	4651      	mov	r1, sl
 80067d4:	00ca      	lsls	r2, r1, #3
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	4642      	mov	r2, r8
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067e2:	464b      	mov	r3, r9
 80067e4:	460a      	mov	r2, r1
 80067e6:	eb42 0303 	adc.w	r3, r2, r3
 80067ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006804:	4649      	mov	r1, r9
 8006806:	008b      	lsls	r3, r1, #2
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680e:	4641      	mov	r1, r8
 8006810:	008a      	lsls	r2, r1, #2
 8006812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006816:	f7fa fa4f 	bl	8000cb8 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	2164      	movs	r1, #100	@ 0x64
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	3332      	adds	r3, #50	@ 0x32
 8006832:	4a08      	ldr	r2, [pc, #32]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4422      	add	r2, r4
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800684e:	46bd      	mov	sp, r7
 8006850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006854:	51eb851f 	.word	0x51eb851f

08006858 <__cvt>:
 8006858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	ec57 6b10 	vmov	r6, r7, d0
 8006860:	2f00      	cmp	r7, #0
 8006862:	460c      	mov	r4, r1
 8006864:	4619      	mov	r1, r3
 8006866:	463b      	mov	r3, r7
 8006868:	bfbb      	ittet	lt
 800686a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800686e:	461f      	movlt	r7, r3
 8006870:	2300      	movge	r3, #0
 8006872:	232d      	movlt	r3, #45	@ 0x2d
 8006874:	700b      	strb	r3, [r1, #0]
 8006876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006878:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800687c:	4691      	mov	r9, r2
 800687e:	f023 0820 	bic.w	r8, r3, #32
 8006882:	bfbc      	itt	lt
 8006884:	4632      	movlt	r2, r6
 8006886:	4616      	movlt	r6, r2
 8006888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800688c:	d005      	beq.n	800689a <__cvt+0x42>
 800688e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006892:	d100      	bne.n	8006896 <__cvt+0x3e>
 8006894:	3401      	adds	r4, #1
 8006896:	2102      	movs	r1, #2
 8006898:	e000      	b.n	800689c <__cvt+0x44>
 800689a:	2103      	movs	r1, #3
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	ab02      	add	r3, sp, #8
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	ec47 6b10 	vmov	d0, r6, r7
 80068a8:	4653      	mov	r3, sl
 80068aa:	4622      	mov	r2, r4
 80068ac:	f001 f960 	bl	8007b70 <_dtoa_r>
 80068b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068b4:	4605      	mov	r5, r0
 80068b6:	d119      	bne.n	80068ec <__cvt+0x94>
 80068b8:	f019 0f01 	tst.w	r9, #1
 80068bc:	d00e      	beq.n	80068dc <__cvt+0x84>
 80068be:	eb00 0904 	add.w	r9, r0, r4
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7fa f915 	bl	8000af8 <__aeabi_dcmpeq>
 80068ce:	b108      	cbz	r0, 80068d4 <__cvt+0x7c>
 80068d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80068d4:	2230      	movs	r2, #48	@ 0x30
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	454b      	cmp	r3, r9
 80068da:	d31e      	bcc.n	800691a <__cvt+0xc2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068e0:	1b5b      	subs	r3, r3, r5
 80068e2:	4628      	mov	r0, r5
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	b004      	add	sp, #16
 80068e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068f0:	eb00 0904 	add.w	r9, r0, r4
 80068f4:	d1e5      	bne.n	80068c2 <__cvt+0x6a>
 80068f6:	7803      	ldrb	r3, [r0, #0]
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d10a      	bne.n	8006912 <__cvt+0xba>
 80068fc:	2200      	movs	r2, #0
 80068fe:	2300      	movs	r3, #0
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f8f8 	bl	8000af8 <__aeabi_dcmpeq>
 8006908:	b918      	cbnz	r0, 8006912 <__cvt+0xba>
 800690a:	f1c4 0401 	rsb	r4, r4, #1
 800690e:	f8ca 4000 	str.w	r4, [sl]
 8006912:	f8da 3000 	ldr.w	r3, [sl]
 8006916:	4499      	add	r9, r3
 8006918:	e7d3      	b.n	80068c2 <__cvt+0x6a>
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e7d9      	b.n	80068d6 <__cvt+0x7e>

08006922 <__exponent>:
 8006922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006924:	2900      	cmp	r1, #0
 8006926:	bfba      	itte	lt
 8006928:	4249      	neglt	r1, r1
 800692a:	232d      	movlt	r3, #45	@ 0x2d
 800692c:	232b      	movge	r3, #43	@ 0x2b
 800692e:	2909      	cmp	r1, #9
 8006930:	7002      	strb	r2, [r0, #0]
 8006932:	7043      	strb	r3, [r0, #1]
 8006934:	dd29      	ble.n	800698a <__exponent+0x68>
 8006936:	f10d 0307 	add.w	r3, sp, #7
 800693a:	461d      	mov	r5, r3
 800693c:	270a      	movs	r7, #10
 800693e:	461a      	mov	r2, r3
 8006940:	fbb1 f6f7 	udiv	r6, r1, r7
 8006944:	fb07 1416 	mls	r4, r7, r6, r1
 8006948:	3430      	adds	r4, #48	@ 0x30
 800694a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800694e:	460c      	mov	r4, r1
 8006950:	2c63      	cmp	r4, #99	@ 0x63
 8006952:	f103 33ff 	add.w	r3, r3, #4294967295
 8006956:	4631      	mov	r1, r6
 8006958:	dcf1      	bgt.n	800693e <__exponent+0x1c>
 800695a:	3130      	adds	r1, #48	@ 0x30
 800695c:	1e94      	subs	r4, r2, #2
 800695e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006962:	1c41      	adds	r1, r0, #1
 8006964:	4623      	mov	r3, r4
 8006966:	42ab      	cmp	r3, r5
 8006968:	d30a      	bcc.n	8006980 <__exponent+0x5e>
 800696a:	f10d 0309 	add.w	r3, sp, #9
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	42ac      	cmp	r4, r5
 8006972:	bf88      	it	hi
 8006974:	2300      	movhi	r3, #0
 8006976:	3302      	adds	r3, #2
 8006978:	4403      	add	r3, r0
 800697a:	1a18      	subs	r0, r3, r0
 800697c:	b003      	add	sp, #12
 800697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006980:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006984:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006988:	e7ed      	b.n	8006966 <__exponent+0x44>
 800698a:	2330      	movs	r3, #48	@ 0x30
 800698c:	3130      	adds	r1, #48	@ 0x30
 800698e:	7083      	strb	r3, [r0, #2]
 8006990:	70c1      	strb	r1, [r0, #3]
 8006992:	1d03      	adds	r3, r0, #4
 8006994:	e7f1      	b.n	800697a <__exponent+0x58>
	...

08006998 <_printf_float>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	b08d      	sub	sp, #52	@ 0x34
 800699e:	460c      	mov	r4, r1
 80069a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069a4:	4616      	mov	r6, r2
 80069a6:	461f      	mov	r7, r3
 80069a8:	4605      	mov	r5, r0
 80069aa:	f000 ffaf 	bl	800790c <_localeconv_r>
 80069ae:	6803      	ldr	r3, [r0, #0]
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7f9 fc74 	bl	80002a0 <strlen>
 80069b8:	2300      	movs	r3, #0
 80069ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80069bc:	f8d8 3000 	ldr.w	r3, [r8]
 80069c0:	9005      	str	r0, [sp, #20]
 80069c2:	3307      	adds	r3, #7
 80069c4:	f023 0307 	bic.w	r3, r3, #7
 80069c8:	f103 0208 	add.w	r2, r3, #8
 80069cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069d0:	f8d4 b000 	ldr.w	fp, [r4]
 80069d4:	f8c8 2000 	str.w	r2, [r8]
 80069d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069e0:	9307      	str	r3, [sp, #28]
 80069e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80069e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006c60 <_printf_float+0x2c8>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	f7fa f8b2 	bl	8000b5c <__aeabi_dcmpun>
 80069f8:	bb70      	cbnz	r0, 8006a58 <_printf_float+0xc0>
 80069fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069fe:	4b98      	ldr	r3, [pc, #608]	@ (8006c60 <_printf_float+0x2c8>)
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	f7fa f88c 	bl	8000b20 <__aeabi_dcmple>
 8006a08:	bb30      	cbnz	r0, 8006a58 <_printf_float+0xc0>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7fa f87b 	bl	8000b0c <__aeabi_dcmplt>
 8006a16:	b110      	cbz	r0, 8006a1e <_printf_float+0x86>
 8006a18:	232d      	movs	r3, #45	@ 0x2d
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a1e:	4a91      	ldr	r2, [pc, #580]	@ (8006c64 <_printf_float+0x2cc>)
 8006a20:	4b91      	ldr	r3, [pc, #580]	@ (8006c68 <_printf_float+0x2d0>)
 8006a22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a26:	bf8c      	ite	hi
 8006a28:	4690      	movhi	r8, r2
 8006a2a:	4698      	movls	r8, r3
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f02b 0304 	bic.w	r3, fp, #4
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	f04f 0900 	mov.w	r9, #0
 8006a3a:	9700      	str	r7, [sp, #0]
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f9d2 	bl	8006dec <_printf_common>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f040 808d 	bne.w	8006b68 <_printf_float+0x1d0>
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a52:	b00d      	add	sp, #52	@ 0x34
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f87c 	bl	8000b5c <__aeabi_dcmpun>
 8006a64:	b140      	cbz	r0, 8006a78 <_printf_float+0xe0>
 8006a66:	464b      	mov	r3, r9
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfbc      	itt	lt
 8006a6c:	232d      	movlt	r3, #45	@ 0x2d
 8006a6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a72:	4a7e      	ldr	r2, [pc, #504]	@ (8006c6c <_printf_float+0x2d4>)
 8006a74:	4b7e      	ldr	r3, [pc, #504]	@ (8006c70 <_printf_float+0x2d8>)
 8006a76:	e7d4      	b.n	8006a22 <_printf_float+0x8a>
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a7e:	9206      	str	r2, [sp, #24]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	d13b      	bne.n	8006afc <_printf_float+0x164>
 8006a84:	2306      	movs	r3, #6
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6022      	str	r2, [r4, #0]
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a98:	ab09      	add	r3, sp, #36	@ 0x24
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	6861      	ldr	r1, [r4, #4]
 8006a9e:	ec49 8b10 	vmov	d0, r8, r9
 8006aa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f7ff fed6 	bl	8006858 <__cvt>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ab0:	2b47      	cmp	r3, #71	@ 0x47
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	d129      	bne.n	8006b0a <_printf_float+0x172>
 8006ab6:	1cc8      	adds	r0, r1, #3
 8006ab8:	db02      	blt.n	8006ac0 <_printf_float+0x128>
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	4299      	cmp	r1, r3
 8006abe:	dd41      	ble.n	8006b44 <_printf_float+0x1ac>
 8006ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ac8:	3901      	subs	r1, #1
 8006aca:	4652      	mov	r2, sl
 8006acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ad2:	f7ff ff26 	bl	8006922 <__exponent>
 8006ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ad8:	1813      	adds	r3, r2, r0
 8006ada:	2a01      	cmp	r2, #1
 8006adc:	4681      	mov	r9, r0
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	dc02      	bgt.n	8006ae8 <_printf_float+0x150>
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	07d2      	lsls	r2, r2, #31
 8006ae6:	d501      	bpl.n	8006aec <_printf_float+0x154>
 8006ae8:	3301      	adds	r3, #1
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0a2      	beq.n	8006a3a <_printf_float+0xa2>
 8006af4:	232d      	movs	r3, #45	@ 0x2d
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afa:	e79e      	b.n	8006a3a <_printf_float+0xa2>
 8006afc:	9a06      	ldr	r2, [sp, #24]
 8006afe:	2a47      	cmp	r2, #71	@ 0x47
 8006b00:	d1c2      	bne.n	8006a88 <_printf_float+0xf0>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1c0      	bne.n	8006a88 <_printf_float+0xf0>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7bd      	b.n	8006a86 <_printf_float+0xee>
 8006b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b0e:	d9db      	bls.n	8006ac8 <_printf_float+0x130>
 8006b10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b14:	d118      	bne.n	8006b48 <_printf_float+0x1b0>
 8006b16:	2900      	cmp	r1, #0
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	dd0b      	ble.n	8006b34 <_printf_float+0x19c>
 8006b1c:	6121      	str	r1, [r4, #16]
 8006b1e:	b913      	cbnz	r3, 8006b26 <_printf_float+0x18e>
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	07d0      	lsls	r0, r2, #31
 8006b24:	d502      	bpl.n	8006b2c <_printf_float+0x194>
 8006b26:	3301      	adds	r3, #1
 8006b28:	440b      	add	r3, r1
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	e7db      	b.n	8006aec <_printf_float+0x154>
 8006b34:	b913      	cbnz	r3, 8006b3c <_printf_float+0x1a4>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	07d2      	lsls	r2, r2, #31
 8006b3a:	d501      	bpl.n	8006b40 <_printf_float+0x1a8>
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	e7f4      	b.n	8006b2a <_printf_float+0x192>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e7f2      	b.n	8006b2a <_printf_float+0x192>
 8006b44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	db05      	blt.n	8006b5a <_printf_float+0x1c2>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	6121      	str	r1, [r4, #16]
 8006b52:	07d8      	lsls	r0, r3, #31
 8006b54:	d5ea      	bpl.n	8006b2c <_printf_float+0x194>
 8006b56:	1c4b      	adds	r3, r1, #1
 8006b58:	e7e7      	b.n	8006b2a <_printf_float+0x192>
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	bfd4      	ite	le
 8006b5e:	f1c1 0202 	rsble	r2, r1, #2
 8006b62:	2201      	movgt	r2, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	e7e0      	b.n	8006b2a <_printf_float+0x192>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	055a      	lsls	r2, r3, #21
 8006b6c:	d407      	bmi.n	8006b7e <_printf_float+0x1e6>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	4642      	mov	r2, r8
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d12b      	bne.n	8006bd4 <_printf_float+0x23c>
 8006b7c:	e767      	b.n	8006a4e <_printf_float+0xb6>
 8006b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b82:	f240 80dd 	bls.w	8006d40 <_printf_float+0x3a8>
 8006b86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f7f9 ffb3 	bl	8000af8 <__aeabi_dcmpeq>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d033      	beq.n	8006bfe <_printf_float+0x266>
 8006b96:	4a37      	ldr	r2, [pc, #220]	@ (8006c74 <_printf_float+0x2dc>)
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f af54 	beq.w	8006a4e <_printf_float+0xb6>
 8006ba6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006baa:	4543      	cmp	r3, r8
 8006bac:	db02      	blt.n	8006bb4 <_printf_float+0x21c>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	07d8      	lsls	r0, r3, #31
 8006bb2:	d50f      	bpl.n	8006bd4 <_printf_float+0x23c>
 8006bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af45 	beq.w	8006a4e <_printf_float+0xb6>
 8006bc4:	f04f 0900 	mov.w	r9, #0
 8006bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bcc:	f104 0a1a 	add.w	sl, r4, #26
 8006bd0:	45c8      	cmp	r8, r9
 8006bd2:	dc09      	bgt.n	8006be8 <_printf_float+0x250>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	f100 8103 	bmi.w	8006de2 <_printf_float+0x44a>
 8006bdc:	68e0      	ldr	r0, [r4, #12]
 8006bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006be0:	4298      	cmp	r0, r3
 8006be2:	bfb8      	it	lt
 8006be4:	4618      	movlt	r0, r3
 8006be6:	e734      	b.n	8006a52 <_printf_float+0xba>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4652      	mov	r2, sl
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f af2b 	beq.w	8006a4e <_printf_float+0xb6>
 8006bf8:	f109 0901 	add.w	r9, r9, #1
 8006bfc:	e7e8      	b.n	8006bd0 <_printf_float+0x238>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc39      	bgt.n	8006c78 <_printf_float+0x2e0>
 8006c04:	4a1b      	ldr	r2, [pc, #108]	@ (8006c74 <_printf_float+0x2dc>)
 8006c06:	2301      	movs	r3, #1
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f43f af1d 	beq.w	8006a4e <_printf_float+0xb6>
 8006c14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c18:	ea59 0303 	orrs.w	r3, r9, r3
 8006c1c:	d102      	bne.n	8006c24 <_printf_float+0x28c>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	07d9      	lsls	r1, r3, #31
 8006c22:	d5d7      	bpl.n	8006bd4 <_printf_float+0x23c>
 8006c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f af0d 	beq.w	8006a4e <_printf_float+0xb6>
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	f104 0b1a 	add.w	fp, r4, #26
 8006c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3e:	425b      	negs	r3, r3
 8006c40:	4553      	cmp	r3, sl
 8006c42:	dc01      	bgt.n	8006c48 <_printf_float+0x2b0>
 8006c44:	464b      	mov	r3, r9
 8006c46:	e793      	b.n	8006b70 <_printf_float+0x1d8>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	465a      	mov	r2, fp
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f aefb 	beq.w	8006a4e <_printf_float+0xb6>
 8006c58:	f10a 0a01 	add.w	sl, sl, #1
 8006c5c:	e7ee      	b.n	8006c3c <_printf_float+0x2a4>
 8006c5e:	bf00      	nop
 8006c60:	7fefffff 	.word	0x7fefffff
 8006c64:	0800ba64 	.word	0x0800ba64
 8006c68:	0800ba60 	.word	0x0800ba60
 8006c6c:	0800ba6c 	.word	0x0800ba6c
 8006c70:	0800ba68 	.word	0x0800ba68
 8006c74:	0800bc3c 	.word	0x0800bc3c
 8006c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c7e:	4553      	cmp	r3, sl
 8006c80:	bfa8      	it	ge
 8006c82:	4653      	movge	r3, sl
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	4699      	mov	r9, r3
 8006c88:	dc36      	bgt.n	8006cf8 <_printf_float+0x360>
 8006c8a:	f04f 0b00 	mov.w	fp, #0
 8006c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c92:	f104 021a 	add.w	r2, r4, #26
 8006c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c98:	9306      	str	r3, [sp, #24]
 8006c9a:	eba3 0309 	sub.w	r3, r3, r9
 8006c9e:	455b      	cmp	r3, fp
 8006ca0:	dc31      	bgt.n	8006d06 <_printf_float+0x36e>
 8006ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca4:	459a      	cmp	sl, r3
 8006ca6:	dc3a      	bgt.n	8006d1e <_printf_float+0x386>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	07da      	lsls	r2, r3, #31
 8006cac:	d437      	bmi.n	8006d1e <_printf_float+0x386>
 8006cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb0:	ebaa 0903 	sub.w	r9, sl, r3
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006cba:	4599      	cmp	r9, r3
 8006cbc:	bfa8      	it	ge
 8006cbe:	4699      	movge	r9, r3
 8006cc0:	f1b9 0f00 	cmp.w	r9, #0
 8006cc4:	dc33      	bgt.n	8006d2e <_printf_float+0x396>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cce:	f104 0b1a 	add.w	fp, r4, #26
 8006cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8006cd8:	eba3 0309 	sub.w	r3, r3, r9
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	f77f af79 	ble.w	8006bd4 <_printf_float+0x23c>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	465a      	mov	r2, fp
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f aeae 	beq.w	8006a4e <_printf_float+0xb6>
 8006cf2:	f108 0801 	add.w	r8, r8, #1
 8006cf6:	e7ec      	b.n	8006cd2 <_printf_float+0x33a>
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	d1c2      	bne.n	8006c8a <_printf_float+0x2f2>
 8006d04:	e6a3      	b.n	8006a4e <_printf_float+0xb6>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	9206      	str	r2, [sp, #24]
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae9c 	beq.w	8006a4e <_printf_float+0xb6>
 8006d16:	9a06      	ldr	r2, [sp, #24]
 8006d18:	f10b 0b01 	add.w	fp, fp, #1
 8006d1c:	e7bb      	b.n	8006c96 <_printf_float+0x2fe>
 8006d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1c0      	bne.n	8006cae <_printf_float+0x316>
 8006d2c:	e68f      	b.n	8006a4e <_printf_float+0xb6>
 8006d2e:	9a06      	ldr	r2, [sp, #24]
 8006d30:	464b      	mov	r3, r9
 8006d32:	4442      	add	r2, r8
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d1c3      	bne.n	8006cc6 <_printf_float+0x32e>
 8006d3e:	e686      	b.n	8006a4e <_printf_float+0xb6>
 8006d40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d44:	f1ba 0f01 	cmp.w	sl, #1
 8006d48:	dc01      	bgt.n	8006d4e <_printf_float+0x3b6>
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d536      	bpl.n	8006dbc <_printf_float+0x424>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4642      	mov	r2, r8
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f43f ae78 	beq.w	8006a4e <_printf_float+0xb6>
 8006d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f ae70 	beq.w	8006a4e <_printf_float+0xb6>
 8006d6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d72:	2200      	movs	r2, #0
 8006d74:	2300      	movs	r3, #0
 8006d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d7a:	f7f9 febd 	bl	8000af8 <__aeabi_dcmpeq>
 8006d7e:	b9c0      	cbnz	r0, 8006db2 <_printf_float+0x41a>
 8006d80:	4653      	mov	r3, sl
 8006d82:	f108 0201 	add.w	r2, r8, #1
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d10c      	bne.n	8006daa <_printf_float+0x412>
 8006d90:	e65d      	b.n	8006a4e <_printf_float+0xb6>
 8006d92:	2301      	movs	r3, #1
 8006d94:	465a      	mov	r2, fp
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae56 	beq.w	8006a4e <_printf_float+0xb6>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	45d0      	cmp	r8, sl
 8006da8:	dbf3      	blt.n	8006d92 <_printf_float+0x3fa>
 8006daa:	464b      	mov	r3, r9
 8006dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006db0:	e6df      	b.n	8006b72 <_printf_float+0x1da>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	f104 0b1a 	add.w	fp, r4, #26
 8006dba:	e7f4      	b.n	8006da6 <_printf_float+0x40e>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	e7e1      	b.n	8006d86 <_printf_float+0x3ee>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f ae3e 	beq.w	8006a4e <_printf_float+0xb6>
 8006dd2:	f108 0801 	add.w	r8, r8, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	4543      	cmp	r3, r8
 8006dde:	dcf0      	bgt.n	8006dc2 <_printf_float+0x42a>
 8006de0:	e6fc      	b.n	8006bdc <_printf_float+0x244>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 0919 	add.w	r9, r4, #25
 8006dea:	e7f4      	b.n	8006dd6 <_printf_float+0x43e>

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4698      	mov	r8, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	3b00      	subs	r3, #0
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e48:	4641      	mov	r1, r8
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c8      	blx	r9
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	bf02      	ittt	eq
 8006e5e:	68e5      	ldreq	r5, [r4, #12]
 8006e60:	6833      	ldreq	r3, [r6, #0]
 8006e62:	1aed      	subeq	r5, r5, r3
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4641      	mov	r1, r8
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c8      	blx	r9
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	@ 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4641      	mov	r1, r8
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c8      	blx	r9
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ed0:	2f78      	cmp	r7, #120	@ 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	@ 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d1 	beq.w	800708c <_printf_i+0x1c4>
 8006eea:	2f58      	cmp	r7, #88	@ 0x58
 8006eec:	f000 80b8 	beq.w	8007060 <_printf_i+0x198>
 8006ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	@ (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007073 	.word	0x08007073
 8006f38:	08006f9f 	.word	0x08006f9f
 8006f3c:	0800702d 	.word	0x0800702d
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	08007095 	.word	0x08007095
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006f9f 	.word	0x08006f9f
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	08007035 	.word	0x08007035
 8006f60:	6833      	ldr	r3, [r6, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6032      	str	r2, [r6, #0]
 8006f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e09c      	b.n	80070ae <_printf_i+0x1e6>
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	6820      	ldr	r0, [r4, #0]
 8006f78:	1d19      	adds	r1, r3, #4
 8006f7a:	6031      	str	r1, [r6, #0]
 8006f7c:	0606      	lsls	r6, r0, #24
 8006f7e:	d501      	bpl.n	8006f84 <_printf_i+0xbc>
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	e003      	b.n	8006f8c <_printf_i+0xc4>
 8006f84:	0645      	lsls	r5, r0, #25
 8006f86:	d5fb      	bpl.n	8006f80 <_printf_i+0xb8>
 8006f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	da03      	bge.n	8006f98 <_printf_i+0xd0>
 8006f90:	232d      	movs	r3, #45	@ 0x2d
 8006f92:	426d      	negs	r5, r5
 8006f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f98:	4858      	ldr	r0, [pc, #352]	@ (80070fc <_printf_i+0x234>)
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e011      	b.n	8006fc2 <_printf_i+0xfa>
 8006f9e:	6821      	ldr	r1, [r4, #0]
 8006fa0:	6833      	ldr	r3, [r6, #0]
 8006fa2:	0608      	lsls	r0, r1, #24
 8006fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fa8:	d402      	bmi.n	8006fb0 <_printf_i+0xe8>
 8006faa:	0649      	lsls	r1, r1, #25
 8006fac:	bf48      	it	mi
 8006fae:	b2ad      	uxthmi	r5, r5
 8006fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fb2:	4852      	ldr	r0, [pc, #328]	@ (80070fc <_printf_i+0x234>)
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	bf14      	ite	ne
 8006fb8:	230a      	movne	r3, #10
 8006fba:	2308      	moveq	r3, #8
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fc2:	6866      	ldr	r6, [r4, #4]
 8006fc4:	60a6      	str	r6, [r4, #8]
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	db05      	blt.n	8006fd6 <_printf_i+0x10e>
 8006fca:	6821      	ldr	r1, [r4, #0]
 8006fcc:	432e      	orrs	r6, r5
 8006fce:	f021 0104 	bic.w	r1, r1, #4
 8006fd2:	6021      	str	r1, [r4, #0]
 8006fd4:	d04b      	beq.n	800706e <_printf_i+0x1a6>
 8006fd6:	4616      	mov	r6, r2
 8006fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8006fe0:	5dc7      	ldrb	r7, [r0, r7]
 8006fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fe6:	462f      	mov	r7, r5
 8006fe8:	42bb      	cmp	r3, r7
 8006fea:	460d      	mov	r5, r1
 8006fec:	d9f4      	bls.n	8006fd8 <_printf_i+0x110>
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d10b      	bne.n	800700a <_printf_i+0x142>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	07df      	lsls	r7, r3, #31
 8006ff6:	d508      	bpl.n	800700a <_printf_i+0x142>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	6861      	ldr	r1, [r4, #4]
 8006ffc:	4299      	cmp	r1, r3
 8006ffe:	bfde      	ittt	le
 8007000:	2330      	movle	r3, #48	@ 0x30
 8007002:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007006:	f106 36ff 	addle.w	r6, r6, #4294967295
 800700a:	1b92      	subs	r2, r2, r6
 800700c:	6122      	str	r2, [r4, #16]
 800700e:	f8cd a000 	str.w	sl, [sp]
 8007012:	464b      	mov	r3, r9
 8007014:	aa03      	add	r2, sp, #12
 8007016:	4621      	mov	r1, r4
 8007018:	4640      	mov	r0, r8
 800701a:	f7ff fee7 	bl	8006dec <_printf_common>
 800701e:	3001      	adds	r0, #1
 8007020:	d14a      	bne.n	80070b8 <_printf_i+0x1f0>
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	b004      	add	sp, #16
 8007028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	f043 0320 	orr.w	r3, r3, #32
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	4832      	ldr	r0, [pc, #200]	@ (8007100 <_printf_i+0x238>)
 8007036:	2778      	movs	r7, #120	@ 0x78
 8007038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	6831      	ldr	r1, [r6, #0]
 8007040:	061f      	lsls	r7, r3, #24
 8007042:	f851 5b04 	ldr.w	r5, [r1], #4
 8007046:	d402      	bmi.n	800704e <_printf_i+0x186>
 8007048:	065f      	lsls	r7, r3, #25
 800704a:	bf48      	it	mi
 800704c:	b2ad      	uxthmi	r5, r5
 800704e:	6031      	str	r1, [r6, #0]
 8007050:	07d9      	lsls	r1, r3, #31
 8007052:	bf44      	itt	mi
 8007054:	f043 0320 	orrmi.w	r3, r3, #32
 8007058:	6023      	strmi	r3, [r4, #0]
 800705a:	b11d      	cbz	r5, 8007064 <_printf_i+0x19c>
 800705c:	2310      	movs	r3, #16
 800705e:	e7ad      	b.n	8006fbc <_printf_i+0xf4>
 8007060:	4826      	ldr	r0, [pc, #152]	@ (80070fc <_printf_i+0x234>)
 8007062:	e7e9      	b.n	8007038 <_printf_i+0x170>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f023 0320 	bic.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	e7f6      	b.n	800705c <_printf_i+0x194>
 800706e:	4616      	mov	r6, r2
 8007070:	e7bd      	b.n	8006fee <_printf_i+0x126>
 8007072:	6833      	ldr	r3, [r6, #0]
 8007074:	6825      	ldr	r5, [r4, #0]
 8007076:	6961      	ldr	r1, [r4, #20]
 8007078:	1d18      	adds	r0, r3, #4
 800707a:	6030      	str	r0, [r6, #0]
 800707c:	062e      	lsls	r6, r5, #24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	d501      	bpl.n	8007086 <_printf_i+0x1be>
 8007082:	6019      	str	r1, [r3, #0]
 8007084:	e002      	b.n	800708c <_printf_i+0x1c4>
 8007086:	0668      	lsls	r0, r5, #25
 8007088:	d5fb      	bpl.n	8007082 <_printf_i+0x1ba>
 800708a:	8019      	strh	r1, [r3, #0]
 800708c:	2300      	movs	r3, #0
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	4616      	mov	r6, r2
 8007092:	e7bc      	b.n	800700e <_printf_i+0x146>
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	1d1a      	adds	r2, r3, #4
 8007098:	6032      	str	r2, [r6, #0]
 800709a:	681e      	ldr	r6, [r3, #0]
 800709c:	6862      	ldr	r2, [r4, #4]
 800709e:	2100      	movs	r1, #0
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7f9 f8ad 	bl	8000200 <memchr>
 80070a6:	b108      	cbz	r0, 80070ac <_printf_i+0x1e4>
 80070a8:	1b80      	subs	r0, r0, r6
 80070aa:	6060      	str	r0, [r4, #4]
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	2300      	movs	r3, #0
 80070b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b6:	e7aa      	b.n	800700e <_printf_i+0x146>
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	4632      	mov	r2, r6
 80070bc:	4649      	mov	r1, r9
 80070be:	4640      	mov	r0, r8
 80070c0:	47d0      	blx	sl
 80070c2:	3001      	adds	r0, #1
 80070c4:	d0ad      	beq.n	8007022 <_printf_i+0x15a>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	079b      	lsls	r3, r3, #30
 80070ca:	d413      	bmi.n	80070f4 <_printf_i+0x22c>
 80070cc:	68e0      	ldr	r0, [r4, #12]
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	4298      	cmp	r0, r3
 80070d2:	bfb8      	it	lt
 80070d4:	4618      	movlt	r0, r3
 80070d6:	e7a6      	b.n	8007026 <_printf_i+0x15e>
 80070d8:	2301      	movs	r3, #1
 80070da:	4632      	mov	r2, r6
 80070dc:	4649      	mov	r1, r9
 80070de:	4640      	mov	r0, r8
 80070e0:	47d0      	blx	sl
 80070e2:	3001      	adds	r0, #1
 80070e4:	d09d      	beq.n	8007022 <_printf_i+0x15a>
 80070e6:	3501      	adds	r5, #1
 80070e8:	68e3      	ldr	r3, [r4, #12]
 80070ea:	9903      	ldr	r1, [sp, #12]
 80070ec:	1a5b      	subs	r3, r3, r1
 80070ee:	42ab      	cmp	r3, r5
 80070f0:	dcf2      	bgt.n	80070d8 <_printf_i+0x210>
 80070f2:	e7eb      	b.n	80070cc <_printf_i+0x204>
 80070f4:	2500      	movs	r5, #0
 80070f6:	f104 0619 	add.w	r6, r4, #25
 80070fa:	e7f5      	b.n	80070e8 <_printf_i+0x220>
 80070fc:	0800ba70 	.word	0x0800ba70
 8007100:	0800ba81 	.word	0x0800ba81

08007104 <_scanf_float>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	b087      	sub	sp, #28
 800710a:	4691      	mov	r9, r2
 800710c:	9303      	str	r3, [sp, #12]
 800710e:	688b      	ldr	r3, [r1, #8]
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007116:	bf81      	itttt	hi
 8007118:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800711c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007120:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007124:	608b      	strhi	r3, [r1, #8]
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	460a      	mov	r2, r1
 800712a:	f04f 0500 	mov.w	r5, #0
 800712e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007132:	f842 3b1c 	str.w	r3, [r2], #28
 8007136:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800713a:	4680      	mov	r8, r0
 800713c:	460c      	mov	r4, r1
 800713e:	bf98      	it	ls
 8007140:	f04f 0b00 	movls.w	fp, #0
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	4616      	mov	r6, r2
 8007148:	46aa      	mov	sl, r5
 800714a:	462f      	mov	r7, r5
 800714c:	9502      	str	r5, [sp, #8]
 800714e:	68a2      	ldr	r2, [r4, #8]
 8007150:	b15a      	cbz	r2, 800716a <_scanf_float+0x66>
 8007152:	f8d9 3000 	ldr.w	r3, [r9]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b4e      	cmp	r3, #78	@ 0x4e
 800715a:	d863      	bhi.n	8007224 <_scanf_float+0x120>
 800715c:	2b40      	cmp	r3, #64	@ 0x40
 800715e:	d83b      	bhi.n	80071d8 <_scanf_float+0xd4>
 8007160:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007164:	b2c8      	uxtb	r0, r1
 8007166:	280e      	cmp	r0, #14
 8007168:	d939      	bls.n	80071de <_scanf_float+0xda>
 800716a:	b11f      	cbz	r7, 8007174 <_scanf_float+0x70>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007178:	f1ba 0f01 	cmp.w	sl, #1
 800717c:	f200 8114 	bhi.w	80073a8 <_scanf_float+0x2a4>
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	429e      	cmp	r6, r3
 8007184:	f200 8105 	bhi.w	8007392 <_scanf_float+0x28e>
 8007188:	2001      	movs	r0, #1
 800718a:	b007      	add	sp, #28
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007194:	2a0d      	cmp	r2, #13
 8007196:	d8e8      	bhi.n	800716a <_scanf_float+0x66>
 8007198:	a101      	add	r1, pc, #4	@ (adr r1, 80071a0 <_scanf_float+0x9c>)
 800719a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080072e9 	.word	0x080072e9
 80071a4:	0800716b 	.word	0x0800716b
 80071a8:	0800716b 	.word	0x0800716b
 80071ac:	0800716b 	.word	0x0800716b
 80071b0:	08007345 	.word	0x08007345
 80071b4:	0800731f 	.word	0x0800731f
 80071b8:	0800716b 	.word	0x0800716b
 80071bc:	0800716b 	.word	0x0800716b
 80071c0:	080072f7 	.word	0x080072f7
 80071c4:	0800716b 	.word	0x0800716b
 80071c8:	0800716b 	.word	0x0800716b
 80071cc:	0800716b 	.word	0x0800716b
 80071d0:	0800716b 	.word	0x0800716b
 80071d4:	080072b3 	.word	0x080072b3
 80071d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80071dc:	e7da      	b.n	8007194 <_scanf_float+0x90>
 80071de:	290e      	cmp	r1, #14
 80071e0:	d8c3      	bhi.n	800716a <_scanf_float+0x66>
 80071e2:	a001      	add	r0, pc, #4	@ (adr r0, 80071e8 <_scanf_float+0xe4>)
 80071e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071e8:	080072a3 	.word	0x080072a3
 80071ec:	0800716b 	.word	0x0800716b
 80071f0:	080072a3 	.word	0x080072a3
 80071f4:	08007333 	.word	0x08007333
 80071f8:	0800716b 	.word	0x0800716b
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007289 	.word	0x08007289
 8007204:	08007289 	.word	0x08007289
 8007208:	08007289 	.word	0x08007289
 800720c:	08007289 	.word	0x08007289
 8007210:	08007289 	.word	0x08007289
 8007214:	08007289 	.word	0x08007289
 8007218:	08007289 	.word	0x08007289
 800721c:	08007289 	.word	0x08007289
 8007220:	08007289 	.word	0x08007289
 8007224:	2b6e      	cmp	r3, #110	@ 0x6e
 8007226:	d809      	bhi.n	800723c <_scanf_float+0x138>
 8007228:	2b60      	cmp	r3, #96	@ 0x60
 800722a:	d8b1      	bhi.n	8007190 <_scanf_float+0x8c>
 800722c:	2b54      	cmp	r3, #84	@ 0x54
 800722e:	d07b      	beq.n	8007328 <_scanf_float+0x224>
 8007230:	2b59      	cmp	r3, #89	@ 0x59
 8007232:	d19a      	bne.n	800716a <_scanf_float+0x66>
 8007234:	2d07      	cmp	r5, #7
 8007236:	d198      	bne.n	800716a <_scanf_float+0x66>
 8007238:	2508      	movs	r5, #8
 800723a:	e02f      	b.n	800729c <_scanf_float+0x198>
 800723c:	2b74      	cmp	r3, #116	@ 0x74
 800723e:	d073      	beq.n	8007328 <_scanf_float+0x224>
 8007240:	2b79      	cmp	r3, #121	@ 0x79
 8007242:	e7f6      	b.n	8007232 <_scanf_float+0x12e>
 8007244:	6821      	ldr	r1, [r4, #0]
 8007246:	05c8      	lsls	r0, r1, #23
 8007248:	d51e      	bpl.n	8007288 <_scanf_float+0x184>
 800724a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800724e:	6021      	str	r1, [r4, #0]
 8007250:	3701      	adds	r7, #1
 8007252:	f1bb 0f00 	cmp.w	fp, #0
 8007256:	d003      	beq.n	8007260 <_scanf_float+0x15c>
 8007258:	3201      	adds	r2, #1
 800725a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800725e:	60a2      	str	r2, [r4, #8]
 8007260:	68a3      	ldr	r3, [r4, #8]
 8007262:	3b01      	subs	r3, #1
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	3301      	adds	r3, #1
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007270:	3b01      	subs	r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	f8c9 3004 	str.w	r3, [r9, #4]
 8007278:	f340 8082 	ble.w	8007380 <_scanf_float+0x27c>
 800727c:	f8d9 3000 	ldr.w	r3, [r9]
 8007280:	3301      	adds	r3, #1
 8007282:	f8c9 3000 	str.w	r3, [r9]
 8007286:	e762      	b.n	800714e <_scanf_float+0x4a>
 8007288:	eb1a 0105 	adds.w	r1, sl, r5
 800728c:	f47f af6d 	bne.w	800716a <_scanf_float+0x66>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007296:	6022      	str	r2, [r4, #0]
 8007298:	460d      	mov	r5, r1
 800729a:	468a      	mov	sl, r1
 800729c:	f806 3b01 	strb.w	r3, [r6], #1
 80072a0:	e7de      	b.n	8007260 <_scanf_float+0x15c>
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	0610      	lsls	r0, r2, #24
 80072a6:	f57f af60 	bpl.w	800716a <_scanf_float+0x66>
 80072aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	e7f4      	b.n	800729c <_scanf_float+0x198>
 80072b2:	f1ba 0f00 	cmp.w	sl, #0
 80072b6:	d10c      	bne.n	80072d2 <_scanf_float+0x1ce>
 80072b8:	b977      	cbnz	r7, 80072d8 <_scanf_float+0x1d4>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072c4:	d108      	bne.n	80072d8 <_scanf_float+0x1d4>
 80072c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	f04f 0a01 	mov.w	sl, #1
 80072d0:	e7e4      	b.n	800729c <_scanf_float+0x198>
 80072d2:	f1ba 0f02 	cmp.w	sl, #2
 80072d6:	d050      	beq.n	800737a <_scanf_float+0x276>
 80072d8:	2d01      	cmp	r5, #1
 80072da:	d002      	beq.n	80072e2 <_scanf_float+0x1de>
 80072dc:	2d04      	cmp	r5, #4
 80072de:	f47f af44 	bne.w	800716a <_scanf_float+0x66>
 80072e2:	3501      	adds	r5, #1
 80072e4:	b2ed      	uxtb	r5, r5
 80072e6:	e7d9      	b.n	800729c <_scanf_float+0x198>
 80072e8:	f1ba 0f01 	cmp.w	sl, #1
 80072ec:	f47f af3d 	bne.w	800716a <_scanf_float+0x66>
 80072f0:	f04f 0a02 	mov.w	sl, #2
 80072f4:	e7d2      	b.n	800729c <_scanf_float+0x198>
 80072f6:	b975      	cbnz	r5, 8007316 <_scanf_float+0x212>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	f47f af37 	bne.w	800716c <_scanf_float+0x68>
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007304:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007308:	f040 8103 	bne.w	8007512 <_scanf_float+0x40e>
 800730c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	2501      	movs	r5, #1
 8007314:	e7c2      	b.n	800729c <_scanf_float+0x198>
 8007316:	2d03      	cmp	r5, #3
 8007318:	d0e3      	beq.n	80072e2 <_scanf_float+0x1de>
 800731a:	2d05      	cmp	r5, #5
 800731c:	e7df      	b.n	80072de <_scanf_float+0x1da>
 800731e:	2d02      	cmp	r5, #2
 8007320:	f47f af23 	bne.w	800716a <_scanf_float+0x66>
 8007324:	2503      	movs	r5, #3
 8007326:	e7b9      	b.n	800729c <_scanf_float+0x198>
 8007328:	2d06      	cmp	r5, #6
 800732a:	f47f af1e 	bne.w	800716a <_scanf_float+0x66>
 800732e:	2507      	movs	r5, #7
 8007330:	e7b4      	b.n	800729c <_scanf_float+0x198>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	0591      	lsls	r1, r2, #22
 8007336:	f57f af18 	bpl.w	800716a <_scanf_float+0x66>
 800733a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	9702      	str	r7, [sp, #8]
 8007342:	e7ab      	b.n	800729c <_scanf_float+0x198>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800734a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800734e:	d005      	beq.n	800735c <_scanf_float+0x258>
 8007350:	0550      	lsls	r0, r2, #21
 8007352:	f57f af0a 	bpl.w	800716a <_scanf_float+0x66>
 8007356:	2f00      	cmp	r7, #0
 8007358:	f000 80db 	beq.w	8007512 <_scanf_float+0x40e>
 800735c:	0591      	lsls	r1, r2, #22
 800735e:	bf58      	it	pl
 8007360:	9902      	ldrpl	r1, [sp, #8]
 8007362:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007366:	bf58      	it	pl
 8007368:	1a79      	subpl	r1, r7, r1
 800736a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800736e:	bf58      	it	pl
 8007370:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	2700      	movs	r7, #0
 8007378:	e790      	b.n	800729c <_scanf_float+0x198>
 800737a:	f04f 0a03 	mov.w	sl, #3
 800737e:	e78d      	b.n	800729c <_scanf_float+0x198>
 8007380:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007384:	4649      	mov	r1, r9
 8007386:	4640      	mov	r0, r8
 8007388:	4798      	blx	r3
 800738a:	2800      	cmp	r0, #0
 800738c:	f43f aedf 	beq.w	800714e <_scanf_float+0x4a>
 8007390:	e6eb      	b.n	800716a <_scanf_float+0x66>
 8007392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007396:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800739a:	464a      	mov	r2, r9
 800739c:	4640      	mov	r0, r8
 800739e:	4798      	blx	r3
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	6123      	str	r3, [r4, #16]
 80073a6:	e6eb      	b.n	8007180 <_scanf_float+0x7c>
 80073a8:	1e6b      	subs	r3, r5, #1
 80073aa:	2b06      	cmp	r3, #6
 80073ac:	d824      	bhi.n	80073f8 <_scanf_float+0x2f4>
 80073ae:	2d02      	cmp	r5, #2
 80073b0:	d836      	bhi.n	8007420 <_scanf_float+0x31c>
 80073b2:	9b01      	ldr	r3, [sp, #4]
 80073b4:	429e      	cmp	r6, r3
 80073b6:	f67f aee7 	bls.w	8007188 <_scanf_float+0x84>
 80073ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073c2:	464a      	mov	r2, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	4798      	blx	r3
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	e7f0      	b.n	80073b2 <_scanf_float+0x2ae>
 80073d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073d8:	464a      	mov	r2, r9
 80073da:	4640      	mov	r0, r8
 80073dc:	4798      	blx	r3
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	6123      	str	r3, [r4, #16]
 80073e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073e8:	fa5f fa8a 	uxtb.w	sl, sl
 80073ec:	f1ba 0f02 	cmp.w	sl, #2
 80073f0:	d1ee      	bne.n	80073d0 <_scanf_float+0x2cc>
 80073f2:	3d03      	subs	r5, #3
 80073f4:	b2ed      	uxtb	r5, r5
 80073f6:	1b76      	subs	r6, r6, r5
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	05da      	lsls	r2, r3, #23
 80073fc:	d530      	bpl.n	8007460 <_scanf_float+0x35c>
 80073fe:	055b      	lsls	r3, r3, #21
 8007400:	d511      	bpl.n	8007426 <_scanf_float+0x322>
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	429e      	cmp	r6, r3
 8007406:	f67f aebf 	bls.w	8007188 <_scanf_float+0x84>
 800740a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800740e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007412:	464a      	mov	r2, r9
 8007414:	4640      	mov	r0, r8
 8007416:	4798      	blx	r3
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	3b01      	subs	r3, #1
 800741c:	6123      	str	r3, [r4, #16]
 800741e:	e7f0      	b.n	8007402 <_scanf_float+0x2fe>
 8007420:	46aa      	mov	sl, r5
 8007422:	46b3      	mov	fp, r6
 8007424:	e7de      	b.n	80073e4 <_scanf_float+0x2e0>
 8007426:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	2965      	cmp	r1, #101	@ 0x65
 800742e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007432:	f106 35ff 	add.w	r5, r6, #4294967295
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	d00c      	beq.n	8007454 <_scanf_float+0x350>
 800743a:	2945      	cmp	r1, #69	@ 0x45
 800743c:	d00a      	beq.n	8007454 <_scanf_float+0x350>
 800743e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007442:	464a      	mov	r2, r9
 8007444:	4640      	mov	r0, r8
 8007446:	4798      	blx	r3
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800744e:	3b01      	subs	r3, #1
 8007450:	1eb5      	subs	r5, r6, #2
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007458:	464a      	mov	r2, r9
 800745a:	4640      	mov	r0, r8
 800745c:	4798      	blx	r3
 800745e:	462e      	mov	r6, r5
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	f012 0210 	ands.w	r2, r2, #16
 8007466:	d001      	beq.n	800746c <_scanf_float+0x368>
 8007468:	2000      	movs	r0, #0
 800746a:	e68e      	b.n	800718a <_scanf_float+0x86>
 800746c:	7032      	strb	r2, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007478:	d125      	bne.n	80074c6 <_scanf_float+0x3c2>
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	429f      	cmp	r7, r3
 800747e:	d00a      	beq.n	8007496 <_scanf_float+0x392>
 8007480:	1bda      	subs	r2, r3, r7
 8007482:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007486:	429e      	cmp	r6, r3
 8007488:	bf28      	it	cs
 800748a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800748e:	4922      	ldr	r1, [pc, #136]	@ (8007518 <_scanf_float+0x414>)
 8007490:	4630      	mov	r0, r6
 8007492:	f000 f907 	bl	80076a4 <siprintf>
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	4640      	mov	r0, r8
 800749c:	f002 fce4 	bl	8009e68 <_strtod_r>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	6821      	ldr	r1, [r4, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f011 0f02 	tst.w	r1, #2
 80074aa:	ec57 6b10 	vmov	r6, r7, d0
 80074ae:	f103 0204 	add.w	r2, r3, #4
 80074b2:	d015      	beq.n	80074e0 <_scanf_float+0x3dc>
 80074b4:	9903      	ldr	r1, [sp, #12]
 80074b6:	600a      	str	r2, [r1, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	e9c3 6700 	strd	r6, r7, [r3]
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60e3      	str	r3, [r4, #12]
 80074c4:	e7d0      	b.n	8007468 <_scanf_float+0x364>
 80074c6:	9b04      	ldr	r3, [sp, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0e4      	beq.n	8007496 <_scanf_float+0x392>
 80074cc:	9905      	ldr	r1, [sp, #20]
 80074ce:	230a      	movs	r3, #10
 80074d0:	3101      	adds	r1, #1
 80074d2:	4640      	mov	r0, r8
 80074d4:	f002 fd48 	bl	8009f68 <_strtol_r>
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	9e05      	ldr	r6, [sp, #20]
 80074dc:	1ac2      	subs	r2, r0, r3
 80074de:	e7d0      	b.n	8007482 <_scanf_float+0x37e>
 80074e0:	f011 0f04 	tst.w	r1, #4
 80074e4:	9903      	ldr	r1, [sp, #12]
 80074e6:	600a      	str	r2, [r1, #0]
 80074e8:	d1e6      	bne.n	80074b8 <_scanf_float+0x3b4>
 80074ea:	681d      	ldr	r5, [r3, #0]
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f9 fb32 	bl	8000b5c <__aeabi_dcmpun>
 80074f8:	b128      	cbz	r0, 8007506 <_scanf_float+0x402>
 80074fa:	4808      	ldr	r0, [pc, #32]	@ (800751c <_scanf_float+0x418>)
 80074fc:	f000 fa8c 	bl	8007a18 <nanf>
 8007500:	ed85 0a00 	vstr	s0, [r5]
 8007504:	e7db      	b.n	80074be <_scanf_float+0x3ba>
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	f7f9 fb85 	bl	8000c18 <__aeabi_d2f>
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	e7d5      	b.n	80074be <_scanf_float+0x3ba>
 8007512:	2700      	movs	r7, #0
 8007514:	e62e      	b.n	8007174 <_scanf_float+0x70>
 8007516:	bf00      	nop
 8007518:	0800ba92 	.word	0x0800ba92
 800751c:	0800bb43 	.word	0x0800bb43

08007520 <std>:
 8007520:	2300      	movs	r3, #0
 8007522:	b510      	push	{r4, lr}
 8007524:	4604      	mov	r4, r0
 8007526:	e9c0 3300 	strd	r3, r3, [r0]
 800752a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800752e:	6083      	str	r3, [r0, #8]
 8007530:	8181      	strh	r1, [r0, #12]
 8007532:	6643      	str	r3, [r0, #100]	@ 0x64
 8007534:	81c2      	strh	r2, [r0, #14]
 8007536:	6183      	str	r3, [r0, #24]
 8007538:	4619      	mov	r1, r3
 800753a:	2208      	movs	r2, #8
 800753c:	305c      	adds	r0, #92	@ 0x5c
 800753e:	f000 f981 	bl	8007844 <memset>
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <std+0x58>)
 8007544:	6263      	str	r3, [r4, #36]	@ 0x24
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <std+0x5c>)
 8007548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <std+0x60>)
 800754c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800754e:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <std+0x64>)
 8007550:	6323      	str	r3, [r4, #48]	@ 0x30
 8007552:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <std+0x68>)
 8007554:	6224      	str	r4, [r4, #32]
 8007556:	429c      	cmp	r4, r3
 8007558:	d006      	beq.n	8007568 <std+0x48>
 800755a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800755e:	4294      	cmp	r4, r2
 8007560:	d002      	beq.n	8007568 <std+0x48>
 8007562:	33d0      	adds	r3, #208	@ 0xd0
 8007564:	429c      	cmp	r4, r3
 8007566:	d105      	bne.n	8007574 <std+0x54>
 8007568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007570:	f000 ba40 	b.w	80079f4 <__retarget_lock_init_recursive>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	bf00      	nop
 8007578:	08007741 	.word	0x08007741
 800757c:	08007767 	.word	0x08007767
 8007580:	0800779f 	.word	0x0800779f
 8007584:	080077c3 	.word	0x080077c3
 8007588:	20000b18 	.word	0x20000b18

0800758c <stdio_exit_handler>:
 800758c:	4a02      	ldr	r2, [pc, #8]	@ (8007598 <stdio_exit_handler+0xc>)
 800758e:	4903      	ldr	r1, [pc, #12]	@ (800759c <stdio_exit_handler+0x10>)
 8007590:	4803      	ldr	r0, [pc, #12]	@ (80075a0 <stdio_exit_handler+0x14>)
 8007592:	f000 b869 	b.w	8007668 <_fwalk_sglue>
 8007596:	bf00      	nop
 8007598:	20000024 	.word	0x20000024
 800759c:	0800a961 	.word	0x0800a961
 80075a0:	20000034 	.word	0x20000034

080075a4 <cleanup_stdio>:
 80075a4:	6841      	ldr	r1, [r0, #4]
 80075a6:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <cleanup_stdio+0x34>)
 80075a8:	4299      	cmp	r1, r3
 80075aa:	b510      	push	{r4, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	d001      	beq.n	80075b4 <cleanup_stdio+0x10>
 80075b0:	f003 f9d6 	bl	800a960 <_fflush_r>
 80075b4:	68a1      	ldr	r1, [r4, #8]
 80075b6:	4b09      	ldr	r3, [pc, #36]	@ (80075dc <cleanup_stdio+0x38>)
 80075b8:	4299      	cmp	r1, r3
 80075ba:	d002      	beq.n	80075c2 <cleanup_stdio+0x1e>
 80075bc:	4620      	mov	r0, r4
 80075be:	f003 f9cf 	bl	800a960 <_fflush_r>
 80075c2:	68e1      	ldr	r1, [r4, #12]
 80075c4:	4b06      	ldr	r3, [pc, #24]	@ (80075e0 <cleanup_stdio+0x3c>)
 80075c6:	4299      	cmp	r1, r3
 80075c8:	d004      	beq.n	80075d4 <cleanup_stdio+0x30>
 80075ca:	4620      	mov	r0, r4
 80075cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d0:	f003 b9c6 	b.w	800a960 <_fflush_r>
 80075d4:	bd10      	pop	{r4, pc}
 80075d6:	bf00      	nop
 80075d8:	20000b18 	.word	0x20000b18
 80075dc:	20000b80 	.word	0x20000b80
 80075e0:	20000be8 	.word	0x20000be8

080075e4 <global_stdio_init.part.0>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <global_stdio_init.part.0+0x30>)
 80075e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007618 <global_stdio_init.part.0+0x34>)
 80075ea:	4a0c      	ldr	r2, [pc, #48]	@ (800761c <global_stdio_init.part.0+0x38>)
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	4620      	mov	r0, r4
 80075f0:	2200      	movs	r2, #0
 80075f2:	2104      	movs	r1, #4
 80075f4:	f7ff ff94 	bl	8007520 <std>
 80075f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075fc:	2201      	movs	r2, #1
 80075fe:	2109      	movs	r1, #9
 8007600:	f7ff ff8e 	bl	8007520 <std>
 8007604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007608:	2202      	movs	r2, #2
 800760a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760e:	2112      	movs	r1, #18
 8007610:	f7ff bf86 	b.w	8007520 <std>
 8007614:	20000c50 	.word	0x20000c50
 8007618:	20000b18 	.word	0x20000b18
 800761c:	0800758d 	.word	0x0800758d

08007620 <__sfp_lock_acquire>:
 8007620:	4801      	ldr	r0, [pc, #4]	@ (8007628 <__sfp_lock_acquire+0x8>)
 8007622:	f000 b9e8 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	20000c59 	.word	0x20000c59

0800762c <__sfp_lock_release>:
 800762c:	4801      	ldr	r0, [pc, #4]	@ (8007634 <__sfp_lock_release+0x8>)
 800762e:	f000 b9e3 	b.w	80079f8 <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	20000c59 	.word	0x20000c59

08007638 <__sinit>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	f7ff fff0 	bl	8007620 <__sfp_lock_acquire>
 8007640:	6a23      	ldr	r3, [r4, #32]
 8007642:	b11b      	cbz	r3, 800764c <__sinit+0x14>
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	f7ff bff0 	b.w	800762c <__sfp_lock_release>
 800764c:	4b04      	ldr	r3, [pc, #16]	@ (8007660 <__sinit+0x28>)
 800764e:	6223      	str	r3, [r4, #32]
 8007650:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <__sinit+0x2c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f5      	bne.n	8007644 <__sinit+0xc>
 8007658:	f7ff ffc4 	bl	80075e4 <global_stdio_init.part.0>
 800765c:	e7f2      	b.n	8007644 <__sinit+0xc>
 800765e:	bf00      	nop
 8007660:	080075a5 	.word	0x080075a5
 8007664:	20000c50 	.word	0x20000c50

08007668 <_fwalk_sglue>:
 8007668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800766c:	4607      	mov	r7, r0
 800766e:	4688      	mov	r8, r1
 8007670:	4614      	mov	r4, r2
 8007672:	2600      	movs	r6, #0
 8007674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007678:	f1b9 0901 	subs.w	r9, r9, #1
 800767c:	d505      	bpl.n	800768a <_fwalk_sglue+0x22>
 800767e:	6824      	ldr	r4, [r4, #0]
 8007680:	2c00      	cmp	r4, #0
 8007682:	d1f7      	bne.n	8007674 <_fwalk_sglue+0xc>
 8007684:	4630      	mov	r0, r6
 8007686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d907      	bls.n	80076a0 <_fwalk_sglue+0x38>
 8007690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007694:	3301      	adds	r3, #1
 8007696:	d003      	beq.n	80076a0 <_fwalk_sglue+0x38>
 8007698:	4629      	mov	r1, r5
 800769a:	4638      	mov	r0, r7
 800769c:	47c0      	blx	r8
 800769e:	4306      	orrs	r6, r0
 80076a0:	3568      	adds	r5, #104	@ 0x68
 80076a2:	e7e9      	b.n	8007678 <_fwalk_sglue+0x10>

080076a4 <siprintf>:
 80076a4:	b40e      	push	{r1, r2, r3}
 80076a6:	b510      	push	{r4, lr}
 80076a8:	b09d      	sub	sp, #116	@ 0x74
 80076aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80076ac:	9002      	str	r0, [sp, #8]
 80076ae:	9006      	str	r0, [sp, #24]
 80076b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076b4:	480a      	ldr	r0, [pc, #40]	@ (80076e0 <siprintf+0x3c>)
 80076b6:	9107      	str	r1, [sp, #28]
 80076b8:	9104      	str	r1, [sp, #16]
 80076ba:	490a      	ldr	r1, [pc, #40]	@ (80076e4 <siprintf+0x40>)
 80076bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c0:	9105      	str	r1, [sp, #20]
 80076c2:	2400      	movs	r4, #0
 80076c4:	a902      	add	r1, sp, #8
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80076cc:	f002 fcaa 	bl	800a024 <_svfiprintf_r>
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	701c      	strb	r4, [r3, #0]
 80076d4:	b01d      	add	sp, #116	@ 0x74
 80076d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076da:	b003      	add	sp, #12
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000030 	.word	0x20000030
 80076e4:	ffff0208 	.word	0xffff0208

080076e8 <siscanf>:
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	b570      	push	{r4, r5, r6, lr}
 80076ec:	b09d      	sub	sp, #116	@ 0x74
 80076ee:	ac21      	add	r4, sp, #132	@ 0x84
 80076f0:	2500      	movs	r5, #0
 80076f2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80076f6:	f854 6b04 	ldr.w	r6, [r4], #4
 80076fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80076fe:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007700:	9002      	str	r0, [sp, #8]
 8007702:	9006      	str	r0, [sp, #24]
 8007704:	f7f8 fdcc 	bl	80002a0 <strlen>
 8007708:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <siscanf+0x50>)
 800770a:	9003      	str	r0, [sp, #12]
 800770c:	9007      	str	r0, [sp, #28]
 800770e:	480b      	ldr	r0, [pc, #44]	@ (800773c <siscanf+0x54>)
 8007710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007716:	f8ad 3016 	strh.w	r3, [sp, #22]
 800771a:	4632      	mov	r2, r6
 800771c:	4623      	mov	r3, r4
 800771e:	a902      	add	r1, sp, #8
 8007720:	6800      	ldr	r0, [r0, #0]
 8007722:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007724:	9514      	str	r5, [sp, #80]	@ 0x50
 8007726:	9401      	str	r4, [sp, #4]
 8007728:	f002 fdd2 	bl	800a2d0 <__ssvfiscanf_r>
 800772c:	b01d      	add	sp, #116	@ 0x74
 800772e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007732:	b003      	add	sp, #12
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	08007763 	.word	0x08007763
 800773c:	20000030 	.word	0x20000030

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f906 	bl	8007958 <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__seofread>:
 8007762:	2000      	movs	r0, #0
 8007764:	4770      	bx	lr

08007766 <__swrite>:
 8007766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776a:	461f      	mov	r7, r3
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	05db      	lsls	r3, r3, #23
 8007770:	4605      	mov	r5, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4616      	mov	r6, r2
 8007776:	d505      	bpl.n	8007784 <__swrite+0x1e>
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	2302      	movs	r3, #2
 800777e:	2200      	movs	r2, #0
 8007780:	f000 f8d8 	bl	8007934 <_lseek_r>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779a:	f000 b8ef 	b.w	800797c <_write_r>

0800779e <__sseek>:
 800779e:	b510      	push	{r4, lr}
 80077a0:	460c      	mov	r4, r1
 80077a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a6:	f000 f8c5 	bl	8007934 <_lseek_r>
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	bf15      	itete	ne
 80077b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ba:	81a3      	strheq	r3, [r4, #12]
 80077bc:	bf18      	it	ne
 80077be:	81a3      	strhne	r3, [r4, #12]
 80077c0:	bd10      	pop	{r4, pc}

080077c2 <__sclose>:
 80077c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c6:	f000 b8a5 	b.w	8007914 <_close_r>

080077ca <_vsniprintf_r>:
 80077ca:	b530      	push	{r4, r5, lr}
 80077cc:	4614      	mov	r4, r2
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	b09b      	sub	sp, #108	@ 0x6c
 80077d2:	4605      	mov	r5, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	da05      	bge.n	80077e4 <_vsniprintf_r+0x1a>
 80077d8:	238b      	movs	r3, #139	@ 0x8b
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	b01b      	add	sp, #108	@ 0x6c
 80077e2:	bd30      	pop	{r4, r5, pc}
 80077e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077f2:	bf14      	ite	ne
 80077f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077f8:	4623      	moveq	r3, r4
 80077fa:	9302      	str	r3, [sp, #8]
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007802:	9100      	str	r1, [sp, #0]
 8007804:	9104      	str	r1, [sp, #16]
 8007806:	f8ad 300e 	strh.w	r3, [sp, #14]
 800780a:	4669      	mov	r1, sp
 800780c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800780e:	f002 fc09 	bl	800a024 <_svfiprintf_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	bfbc      	itt	lt
 8007816:	238b      	movlt	r3, #139	@ 0x8b
 8007818:	602b      	strlt	r3, [r5, #0]
 800781a:	2c00      	cmp	r4, #0
 800781c:	d0e0      	beq.n	80077e0 <_vsniprintf_r+0x16>
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	e7dc      	b.n	80077e0 <_vsniprintf_r+0x16>
	...

08007828 <vsniprintf>:
 8007828:	b507      	push	{r0, r1, r2, lr}
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	460a      	mov	r2, r1
 8007830:	4601      	mov	r1, r0
 8007832:	4803      	ldr	r0, [pc, #12]	@ (8007840 <vsniprintf+0x18>)
 8007834:	6800      	ldr	r0, [r0, #0]
 8007836:	f7ff ffc8 	bl	80077ca <_vsniprintf_r>
 800783a:	b003      	add	sp, #12
 800783c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007840:	20000030 	.word	0x20000030

08007844 <memset>:
 8007844:	4402      	add	r2, r0
 8007846:	4603      	mov	r3, r0
 8007848:	4293      	cmp	r3, r2
 800784a:	d100      	bne.n	800784e <memset+0xa>
 800784c:	4770      	bx	lr
 800784e:	f803 1b01 	strb.w	r1, [r3], #1
 8007852:	e7f9      	b.n	8007848 <memset+0x4>

08007854 <strtok>:
 8007854:	4b16      	ldr	r3, [pc, #88]	@ (80078b0 <strtok+0x5c>)
 8007856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	681f      	ldr	r7, [r3, #0]
 800785c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800785e:	4605      	mov	r5, r0
 8007860:	460e      	mov	r6, r1
 8007862:	b9ec      	cbnz	r4, 80078a0 <strtok+0x4c>
 8007864:	2050      	movs	r0, #80	@ 0x50
 8007866:	f000 ff9d 	bl	80087a4 <malloc>
 800786a:	4602      	mov	r2, r0
 800786c:	6478      	str	r0, [r7, #68]	@ 0x44
 800786e:	b920      	cbnz	r0, 800787a <strtok+0x26>
 8007870:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <strtok+0x60>)
 8007872:	4811      	ldr	r0, [pc, #68]	@ (80078b8 <strtok+0x64>)
 8007874:	215b      	movs	r1, #91	@ 0x5b
 8007876:	f000 f8d5 	bl	8007a24 <__assert_func>
 800787a:	e9c0 4400 	strd	r4, r4, [r0]
 800787e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007882:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007886:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800788a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800788e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007892:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007896:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800789a:	6184      	str	r4, [r0, #24]
 800789c:	7704      	strb	r4, [r0, #28]
 800789e:	6244      	str	r4, [r0, #36]	@ 0x24
 80078a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	2301      	movs	r3, #1
 80078a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	f000 b806 	b.w	80078bc <__strtok_r>
 80078b0:	20000030 	.word	0x20000030
 80078b4:	0800ba97 	.word	0x0800ba97
 80078b8:	0800baae 	.word	0x0800baae

080078bc <__strtok_r>:
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	4604      	mov	r4, r0
 80078c0:	b908      	cbnz	r0, 80078c6 <__strtok_r+0xa>
 80078c2:	6814      	ldr	r4, [r2, #0]
 80078c4:	b144      	cbz	r4, 80078d8 <__strtok_r+0x1c>
 80078c6:	4620      	mov	r0, r4
 80078c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80078cc:	460f      	mov	r7, r1
 80078ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80078d2:	b91e      	cbnz	r6, 80078dc <__strtok_r+0x20>
 80078d4:	b965      	cbnz	r5, 80078f0 <__strtok_r+0x34>
 80078d6:	6015      	str	r5, [r2, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e005      	b.n	80078e8 <__strtok_r+0x2c>
 80078dc:	42b5      	cmp	r5, r6
 80078de:	d1f6      	bne.n	80078ce <__strtok_r+0x12>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <__strtok_r+0xa>
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	7003      	strb	r3, [r0, #0]
 80078e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ea:	461c      	mov	r4, r3
 80078ec:	e00c      	b.n	8007908 <__strtok_r+0x4c>
 80078ee:	b91d      	cbnz	r5, 80078f8 <__strtok_r+0x3c>
 80078f0:	4627      	mov	r7, r4
 80078f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078f6:	460e      	mov	r6, r1
 80078f8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	d1f6      	bne.n	80078ee <__strtok_r+0x32>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f2      	beq.n	80078ea <__strtok_r+0x2e>
 8007904:	2300      	movs	r3, #0
 8007906:	703b      	strb	r3, [r7, #0]
 8007908:	6014      	str	r4, [r2, #0]
 800790a:	e7ed      	b.n	80078e8 <__strtok_r+0x2c>

0800790c <_localeconv_r>:
 800790c:	4800      	ldr	r0, [pc, #0]	@ (8007910 <_localeconv_r+0x4>)
 800790e:	4770      	bx	lr
 8007910:	20000170 	.word	0x20000170

08007914 <_close_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	@ (8007930 <_close_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7fa fe74 	bl	800260c <_close>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_close_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_close_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20000c54 	.word	0x20000c54

08007934 <_lseek_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	@ (8007954 <_lseek_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa fe89 	bl	800265a <_lseek>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_lseek_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_lseek_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000c54 	.word	0x20000c54

08007958 <_read_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	@ (8007978 <_read_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fa fe17 	bl	800259a <_read>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_read_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_read_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20000c54 	.word	0x20000c54

0800797c <_write_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	@ (800799c <_write_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fa fe22 	bl	80025d4 <_write>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_write_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_write_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000c54 	.word	0x20000c54

080079a0 <__errno>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	@ (80079a8 <__errno+0x8>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000030 	.word	0x20000030

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	@ (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	@ (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	@ (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	@ (80079f0 <__libc_init_array+0x44>)
 80079c0:	f003 ff78 	bl	800b8b4 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	0800bf04 	.word	0x0800bf04
 80079e8:	0800bf04 	.word	0x0800bf04
 80079ec:	0800bf04 	.word	0x0800bf04
 80079f0:	0800bf08 	.word	0x0800bf08

080079f4 <__retarget_lock_init_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_acquire_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <__retarget_lock_release_recursive>:
 80079f8:	4770      	bx	lr

080079fa <memcpy>:
 80079fa:	440a      	add	r2, r1
 80079fc:	4291      	cmp	r1, r2
 80079fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a02:	d100      	bne.n	8007a06 <memcpy+0xc>
 8007a04:	4770      	bx	lr
 8007a06:	b510      	push	{r4, lr}
 8007a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a10:	4291      	cmp	r1, r2
 8007a12:	d1f9      	bne.n	8007a08 <memcpy+0xe>
 8007a14:	bd10      	pop	{r4, pc}
	...

08007a18 <nanf>:
 8007a18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a20 <nanf+0x8>
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	7fc00000 	.word	0x7fc00000

08007a24 <__assert_func>:
 8007a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a26:	4614      	mov	r4, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <__assert_func+0x2c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4605      	mov	r5, r0
 8007a30:	68d8      	ldr	r0, [r3, #12]
 8007a32:	b14c      	cbz	r4, 8007a48 <__assert_func+0x24>
 8007a34:	4b07      	ldr	r3, [pc, #28]	@ (8007a54 <__assert_func+0x30>)
 8007a36:	9100      	str	r1, [sp, #0]
 8007a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a3c:	4906      	ldr	r1, [pc, #24]	@ (8007a58 <__assert_func+0x34>)
 8007a3e:	462b      	mov	r3, r5
 8007a40:	f002 ffb6 	bl	800a9b0 <fiprintf>
 8007a44:	f003 f880 	bl	800ab48 <abort>
 8007a48:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <__assert_func+0x38>)
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	e7f3      	b.n	8007a36 <__assert_func+0x12>
 8007a4e:	bf00      	nop
 8007a50:	20000030 	.word	0x20000030
 8007a54:	0800bb08 	.word	0x0800bb08
 8007a58:	0800bb15 	.word	0x0800bb15
 8007a5c:	0800bb43 	.word	0x0800bb43

08007a60 <quorem>:
 8007a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	6903      	ldr	r3, [r0, #16]
 8007a66:	690c      	ldr	r4, [r1, #16]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	4607      	mov	r7, r0
 8007a6c:	db7e      	blt.n	8007b6c <quorem+0x10c>
 8007a6e:	3c01      	subs	r4, #1
 8007a70:	f101 0814 	add.w	r8, r1, #20
 8007a74:	00a3      	lsls	r3, r4, #2
 8007a76:	f100 0514 	add.w	r5, r0, #20
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a92:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a96:	d32e      	bcc.n	8007af6 <quorem+0x96>
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	46c4      	mov	ip, r8
 8007a9e:	46ae      	mov	lr, r5
 8007aa0:	46d3      	mov	fp, sl
 8007aa2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007aa6:	b298      	uxth	r0, r3
 8007aa8:	fb06 a000 	mla	r0, r6, r0, sl
 8007aac:	0c02      	lsrs	r2, r0, #16
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	fb06 2303 	mla	r3, r6, r3, r2
 8007ab4:	f8de 2000 	ldr.w	r2, [lr]
 8007ab8:	b280      	uxth	r0, r0
 8007aba:	b292      	uxth	r2, r2
 8007abc:	1a12      	subs	r2, r2, r0
 8007abe:	445a      	add	r2, fp
 8007ac0:	f8de 0000 	ldr.w	r0, [lr]
 8007ac4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ace:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ad2:	b292      	uxth	r2, r2
 8007ad4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ad8:	45e1      	cmp	r9, ip
 8007ada:	f84e 2b04 	str.w	r2, [lr], #4
 8007ade:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ae2:	d2de      	bcs.n	8007aa2 <quorem+0x42>
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	58eb      	ldr	r3, [r5, r3]
 8007ae8:	b92b      	cbnz	r3, 8007af6 <quorem+0x96>
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	429d      	cmp	r5, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	d32f      	bcc.n	8007b54 <quorem+0xf4>
 8007af4:	613c      	str	r4, [r7, #16]
 8007af6:	4638      	mov	r0, r7
 8007af8:	f001 f9c6 	bl	8008e88 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	db25      	blt.n	8007b4c <quorem+0xec>
 8007b00:	4629      	mov	r1, r5
 8007b02:	2000      	movs	r0, #0
 8007b04:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b08:	f8d1 c000 	ldr.w	ip, [r1]
 8007b0c:	fa1f fe82 	uxth.w	lr, r2
 8007b10:	fa1f f38c 	uxth.w	r3, ip
 8007b14:	eba3 030e 	sub.w	r3, r3, lr
 8007b18:	4403      	add	r3, r0
 8007b1a:	0c12      	lsrs	r2, r2, #16
 8007b1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b2a:	45c1      	cmp	r9, r8
 8007b2c:	f841 3b04 	str.w	r3, [r1], #4
 8007b30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b34:	d2e6      	bcs.n	8007b04 <quorem+0xa4>
 8007b36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b3e:	b922      	cbnz	r2, 8007b4a <quorem+0xea>
 8007b40:	3b04      	subs	r3, #4
 8007b42:	429d      	cmp	r5, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	d30b      	bcc.n	8007b60 <quorem+0x100>
 8007b48:	613c      	str	r4, [r7, #16]
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	3b04      	subs	r3, #4
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d1cb      	bne.n	8007af4 <quorem+0x94>
 8007b5c:	3c01      	subs	r4, #1
 8007b5e:	e7c6      	b.n	8007aee <quorem+0x8e>
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	3b04      	subs	r3, #4
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d1ef      	bne.n	8007b48 <quorem+0xe8>
 8007b68:	3c01      	subs	r4, #1
 8007b6a:	e7ea      	b.n	8007b42 <quorem+0xe2>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7ee      	b.n	8007b4e <quorem+0xee>

08007b70 <_dtoa_r>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	69c7      	ldr	r7, [r0, #28]
 8007b76:	b097      	sub	sp, #92	@ 0x5c
 8007b78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007b7c:	ec55 4b10 	vmov	r4, r5, d0
 8007b80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007b82:	9107      	str	r1, [sp, #28]
 8007b84:	4681      	mov	r9, r0
 8007b86:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b88:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b8a:	b97f      	cbnz	r7, 8007bac <_dtoa_r+0x3c>
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f000 fe09 	bl	80087a4 <malloc>
 8007b92:	4602      	mov	r2, r0
 8007b94:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b98:	b920      	cbnz	r0, 8007ba4 <_dtoa_r+0x34>
 8007b9a:	4ba9      	ldr	r3, [pc, #676]	@ (8007e40 <_dtoa_r+0x2d0>)
 8007b9c:	21ef      	movs	r1, #239	@ 0xef
 8007b9e:	48a9      	ldr	r0, [pc, #676]	@ (8007e44 <_dtoa_r+0x2d4>)
 8007ba0:	f7ff ff40 	bl	8007a24 <__assert_func>
 8007ba4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ba8:	6007      	str	r7, [r0, #0]
 8007baa:	60c7      	str	r7, [r0, #12]
 8007bac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	b159      	cbz	r1, 8007bcc <_dtoa_r+0x5c>
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	604a      	str	r2, [r1, #4]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4093      	lsls	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
 8007bbe:	4648      	mov	r0, r9
 8007bc0:	f000 fee6 	bl	8008990 <_Bfree>
 8007bc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	1e2b      	subs	r3, r5, #0
 8007bce:	bfb9      	ittee	lt
 8007bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bd4:	9305      	strlt	r3, [sp, #20]
 8007bd6:	2300      	movge	r3, #0
 8007bd8:	6033      	strge	r3, [r6, #0]
 8007bda:	9f05      	ldr	r7, [sp, #20]
 8007bdc:	4b9a      	ldr	r3, [pc, #616]	@ (8007e48 <_dtoa_r+0x2d8>)
 8007bde:	bfbc      	itt	lt
 8007be0:	2201      	movlt	r2, #1
 8007be2:	6032      	strlt	r2, [r6, #0]
 8007be4:	43bb      	bics	r3, r7
 8007be6:	d112      	bne.n	8007c0e <_dtoa_r+0x9e>
 8007be8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bf4:	4323      	orrs	r3, r4
 8007bf6:	f000 855a 	beq.w	80086ae <_dtoa_r+0xb3e>
 8007bfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bfc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007e5c <_dtoa_r+0x2ec>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 855c 	beq.w	80086be <_dtoa_r+0xb4e>
 8007c06:	f10a 0303 	add.w	r3, sl, #3
 8007c0a:	f000 bd56 	b.w	80086ba <_dtoa_r+0xb4a>
 8007c0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c12:	2200      	movs	r2, #0
 8007c14:	ec51 0b17 	vmov	r0, r1, d7
 8007c18:	2300      	movs	r3, #0
 8007c1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007c1e:	f7f8 ff6b 	bl	8000af8 <__aeabi_dcmpeq>
 8007c22:	4680      	mov	r8, r0
 8007c24:	b158      	cbz	r0, 8007c3e <_dtoa_r+0xce>
 8007c26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c28:	2301      	movs	r3, #1
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c2e:	b113      	cbz	r3, 8007c36 <_dtoa_r+0xc6>
 8007c30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c32:	4b86      	ldr	r3, [pc, #536]	@ (8007e4c <_dtoa_r+0x2dc>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007e60 <_dtoa_r+0x2f0>
 8007c3a:	f000 bd40 	b.w	80086be <_dtoa_r+0xb4e>
 8007c3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007c42:	aa14      	add	r2, sp, #80	@ 0x50
 8007c44:	a915      	add	r1, sp, #84	@ 0x54
 8007c46:	4648      	mov	r0, r9
 8007c48:	f001 fa3e 	bl	80090c8 <__d2b>
 8007c4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c50:	9002      	str	r0, [sp, #8]
 8007c52:	2e00      	cmp	r6, #0
 8007c54:	d078      	beq.n	8007d48 <_dtoa_r+0x1d8>
 8007c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c70:	4619      	mov	r1, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	4b76      	ldr	r3, [pc, #472]	@ (8007e50 <_dtoa_r+0x2e0>)
 8007c76:	f7f8 fb1f 	bl	80002b8 <__aeabi_dsub>
 8007c7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007e28 <_dtoa_r+0x2b8>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fcd2 	bl	8000628 <__aeabi_dmul>
 8007c84:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e30 <_dtoa_r+0x2c0>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fb17 	bl	80002bc <__adddf3>
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4630      	mov	r0, r6
 8007c92:	460d      	mov	r5, r1
 8007c94:	f7f8 fc5e 	bl	8000554 <__aeabi_i2d>
 8007c98:	a367      	add	r3, pc, #412	@ (adr r3, 8007e38 <_dtoa_r+0x2c8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fcc3 	bl	8000628 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 fb07 	bl	80002bc <__adddf3>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	f7f8 ff69 	bl	8000b88 <__aeabi_d2iz>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4607      	mov	r7, r0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 ff24 	bl	8000b0c <__aeabi_dcmplt>
 8007cc4:	b140      	cbz	r0, 8007cd8 <_dtoa_r+0x168>
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f7f8 fc44 	bl	8000554 <__aeabi_i2d>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	462b      	mov	r3, r5
 8007cd0:	f7f8 ff12 	bl	8000af8 <__aeabi_dcmpeq>
 8007cd4:	b900      	cbnz	r0, 8007cd8 <_dtoa_r+0x168>
 8007cd6:	3f01      	subs	r7, #1
 8007cd8:	2f16      	cmp	r7, #22
 8007cda:	d852      	bhi.n	8007d82 <_dtoa_r+0x212>
 8007cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8007e54 <_dtoa_r+0x2e4>)
 8007cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cea:	f7f8 ff0f 	bl	8000b0c <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d049      	beq.n	8007d86 <_dtoa_r+0x216>
 8007cf2:	3f01      	subs	r7, #1
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cfa:	1b9b      	subs	r3, r3, r6
 8007cfc:	1e5a      	subs	r2, r3, #1
 8007cfe:	bf45      	ittet	mi
 8007d00:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d04:	9300      	strmi	r3, [sp, #0]
 8007d06:	2300      	movpl	r3, #0
 8007d08:	2300      	movmi	r3, #0
 8007d0a:	9206      	str	r2, [sp, #24]
 8007d0c:	bf54      	ite	pl
 8007d0e:	9300      	strpl	r3, [sp, #0]
 8007d10:	9306      	strmi	r3, [sp, #24]
 8007d12:	2f00      	cmp	r7, #0
 8007d14:	db39      	blt.n	8007d8a <_dtoa_r+0x21a>
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	970d      	str	r7, [sp, #52]	@ 0x34
 8007d1a:	443b      	add	r3, r7
 8007d1c:	9306      	str	r3, [sp, #24]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9308      	str	r3, [sp, #32]
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d863      	bhi.n	8007df0 <_dtoa_r+0x280>
 8007d28:	2b05      	cmp	r3, #5
 8007d2a:	bfc4      	itt	gt
 8007d2c:	3b04      	subgt	r3, #4
 8007d2e:	9307      	strgt	r3, [sp, #28]
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	f1a3 0302 	sub.w	r3, r3, #2
 8007d36:	bfcc      	ite	gt
 8007d38:	2400      	movgt	r4, #0
 8007d3a:	2401      	movle	r4, #1
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d863      	bhi.n	8007e08 <_dtoa_r+0x298>
 8007d40:	e8df f003 	tbb	[pc, r3]
 8007d44:	2b375452 	.word	0x2b375452
 8007d48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d4c:	441e      	add	r6, r3
 8007d4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	bfc1      	itttt	gt
 8007d56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d5a:	409f      	lslgt	r7, r3
 8007d5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d60:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d64:	bfd6      	itet	le
 8007d66:	f1c3 0320 	rsble	r3, r3, #32
 8007d6a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d6e:	fa04 f003 	lslle.w	r0, r4, r3
 8007d72:	f7f8 fbdf 	bl	8000534 <__aeabi_ui2d>
 8007d76:	2201      	movs	r2, #1
 8007d78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d7c:	3e01      	subs	r6, #1
 8007d7e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d80:	e776      	b.n	8007c70 <_dtoa_r+0x100>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7b7      	b.n	8007cf6 <_dtoa_r+0x186>
 8007d86:	9010      	str	r0, [sp, #64]	@ 0x40
 8007d88:	e7b6      	b.n	8007cf8 <_dtoa_r+0x188>
 8007d8a:	9b00      	ldr	r3, [sp, #0]
 8007d8c:	1bdb      	subs	r3, r3, r7
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	427b      	negs	r3, r7
 8007d92:	9308      	str	r3, [sp, #32]
 8007d94:	2300      	movs	r3, #0
 8007d96:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d98:	e7c3      	b.n	8007d22 <_dtoa_r+0x1b2>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007da0:	eb07 0b03 	add.w	fp, r7, r3
 8007da4:	f10b 0301 	add.w	r3, fp, #1
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	bfb8      	it	lt
 8007dae:	2301      	movlt	r3, #1
 8007db0:	e006      	b.n	8007dc0 <_dtoa_r+0x250>
 8007db2:	2301      	movs	r3, #1
 8007db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dd28      	ble.n	8007e0e <_dtoa_r+0x29e>
 8007dbc:	469b      	mov	fp, r3
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	f102 0514 	add.w	r5, r2, #20
 8007dcc:	429d      	cmp	r5, r3
 8007dce:	d926      	bls.n	8007e1e <_dtoa_r+0x2ae>
 8007dd0:	6041      	str	r1, [r0, #4]
 8007dd2:	4648      	mov	r0, r9
 8007dd4:	f000 fd9c 	bl	8008910 <_Balloc>
 8007dd8:	4682      	mov	sl, r0
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d142      	bne.n	8007e64 <_dtoa_r+0x2f4>
 8007dde:	4b1e      	ldr	r3, [pc, #120]	@ (8007e58 <_dtoa_r+0x2e8>)
 8007de0:	4602      	mov	r2, r0
 8007de2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007de6:	e6da      	b.n	8007b9e <_dtoa_r+0x2e>
 8007de8:	2300      	movs	r3, #0
 8007dea:	e7e3      	b.n	8007db4 <_dtoa_r+0x244>
 8007dec:	2300      	movs	r3, #0
 8007dee:	e7d5      	b.n	8007d9c <_dtoa_r+0x22c>
 8007df0:	2401      	movs	r4, #1
 8007df2:	2300      	movs	r3, #0
 8007df4:	9307      	str	r3, [sp, #28]
 8007df6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007df8:	f04f 3bff 	mov.w	fp, #4294967295
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e02:	2312      	movs	r3, #18
 8007e04:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e06:	e7db      	b.n	8007dc0 <_dtoa_r+0x250>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e0c:	e7f4      	b.n	8007df8 <_dtoa_r+0x288>
 8007e0e:	f04f 0b01 	mov.w	fp, #1
 8007e12:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e16:	465b      	mov	r3, fp
 8007e18:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007e1c:	e7d0      	b.n	8007dc0 <_dtoa_r+0x250>
 8007e1e:	3101      	adds	r1, #1
 8007e20:	0052      	lsls	r2, r2, #1
 8007e22:	e7d1      	b.n	8007dc8 <_dtoa_r+0x258>
 8007e24:	f3af 8000 	nop.w
 8007e28:	636f4361 	.word	0x636f4361
 8007e2c:	3fd287a7 	.word	0x3fd287a7
 8007e30:	8b60c8b3 	.word	0x8b60c8b3
 8007e34:	3fc68a28 	.word	0x3fc68a28
 8007e38:	509f79fb 	.word	0x509f79fb
 8007e3c:	3fd34413 	.word	0x3fd34413
 8007e40:	0800ba97 	.word	0x0800ba97
 8007e44:	0800bb51 	.word	0x0800bb51
 8007e48:	7ff00000 	.word	0x7ff00000
 8007e4c:	0800bc3d 	.word	0x0800bc3d
 8007e50:	3ff80000 	.word	0x3ff80000
 8007e54:	0800bce0 	.word	0x0800bce0
 8007e58:	0800bba9 	.word	0x0800bba9
 8007e5c:	0800bb4d 	.word	0x0800bb4d
 8007e60:	0800bc3c 	.word	0x0800bc3c
 8007e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e68:	6018      	str	r0, [r3, #0]
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	2b0e      	cmp	r3, #14
 8007e6e:	f200 80a1 	bhi.w	8007fb4 <_dtoa_r+0x444>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	f000 809e 	beq.w	8007fb4 <_dtoa_r+0x444>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	dd33      	ble.n	8007ee4 <_dtoa_r+0x374>
 8007e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80080f0 <_dtoa_r+0x580>)
 8007e7e:	f007 020f 	and.w	r2, r7, #15
 8007e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e86:	ed93 7b00 	vldr	d7, [r3]
 8007e8a:	05f8      	lsls	r0, r7, #23
 8007e8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e94:	d516      	bpl.n	8007ec4 <_dtoa_r+0x354>
 8007e96:	4b97      	ldr	r3, [pc, #604]	@ (80080f4 <_dtoa_r+0x584>)
 8007e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea0:	f7f8 fcec 	bl	800087c <__aeabi_ddiv>
 8007ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ea8:	f004 040f 	and.w	r4, r4, #15
 8007eac:	2603      	movs	r6, #3
 8007eae:	4d91      	ldr	r5, [pc, #580]	@ (80080f4 <_dtoa_r+0x584>)
 8007eb0:	b954      	cbnz	r4, 8007ec8 <_dtoa_r+0x358>
 8007eb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eba:	f7f8 fcdf 	bl	800087c <__aeabi_ddiv>
 8007ebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ec2:	e028      	b.n	8007f16 <_dtoa_r+0x3a6>
 8007ec4:	2602      	movs	r6, #2
 8007ec6:	e7f2      	b.n	8007eae <_dtoa_r+0x33e>
 8007ec8:	07e1      	lsls	r1, r4, #31
 8007eca:	d508      	bpl.n	8007ede <_dtoa_r+0x36e>
 8007ecc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ed4:	f7f8 fba8 	bl	8000628 <__aeabi_dmul>
 8007ed8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007edc:	3601      	adds	r6, #1
 8007ede:	1064      	asrs	r4, r4, #1
 8007ee0:	3508      	adds	r5, #8
 8007ee2:	e7e5      	b.n	8007eb0 <_dtoa_r+0x340>
 8007ee4:	f000 80af 	beq.w	8008046 <_dtoa_r+0x4d6>
 8007ee8:	427c      	negs	r4, r7
 8007eea:	4b81      	ldr	r3, [pc, #516]	@ (80080f0 <_dtoa_r+0x580>)
 8007eec:	4d81      	ldr	r5, [pc, #516]	@ (80080f4 <_dtoa_r+0x584>)
 8007eee:	f004 020f 	and.w	r2, r4, #15
 8007ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007efe:	f7f8 fb93 	bl	8000628 <__aeabi_dmul>
 8007f02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f06:	1124      	asrs	r4, r4, #4
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2602      	movs	r6, #2
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	f040 808f 	bne.w	8008030 <_dtoa_r+0x4c0>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1d3      	bne.n	8007ebe <_dtoa_r+0x34e>
 8007f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 8094 	beq.w	800804a <_dtoa_r+0x4da>
 8007f22:	4b75      	ldr	r3, [pc, #468]	@ (80080f8 <_dtoa_r+0x588>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 fdef 	bl	8000b0c <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f000 808b 	beq.w	800804a <_dtoa_r+0x4da>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8087 	beq.w	800804a <_dtoa_r+0x4da>
 8007f3c:	f1bb 0f00 	cmp.w	fp, #0
 8007f40:	dd34      	ble.n	8007fac <_dtoa_r+0x43c>
 8007f42:	4620      	mov	r0, r4
 8007f44:	4b6d      	ldr	r3, [pc, #436]	@ (80080fc <_dtoa_r+0x58c>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7f8 fb6d 	bl	8000628 <__aeabi_dmul>
 8007f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f52:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f56:	3601      	adds	r6, #1
 8007f58:	465c      	mov	r4, fp
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 fafa 	bl	8000554 <__aeabi_i2d>
 8007f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f64:	f7f8 fb60 	bl	8000628 <__aeabi_dmul>
 8007f68:	4b65      	ldr	r3, [pc, #404]	@ (8008100 <_dtoa_r+0x590>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f7f8 f9a6 	bl	80002bc <__adddf3>
 8007f70:	4605      	mov	r5, r0
 8007f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d16a      	bne.n	8008050 <_dtoa_r+0x4e0>
 8007f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7e:	4b61      	ldr	r3, [pc, #388]	@ (8008104 <_dtoa_r+0x594>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 f999 	bl	80002b8 <__aeabi_dsub>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4633      	mov	r3, r6
 8007f92:	f7f8 fdd9 	bl	8000b48 <__aeabi_dcmpgt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8298 	bne.w	80084cc <_dtoa_r+0x95c>
 8007f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fa6:	f7f8 fdb1 	bl	8000b0c <__aeabi_dcmplt>
 8007faa:	bb38      	cbnz	r0, 8007ffc <_dtoa_r+0x48c>
 8007fac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007fb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f2c0 8157 	blt.w	800826a <_dtoa_r+0x6fa>
 8007fbc:	2f0e      	cmp	r7, #14
 8007fbe:	f300 8154 	bgt.w	800826a <_dtoa_r+0x6fa>
 8007fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80080f0 <_dtoa_r+0x580>)
 8007fc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fc8:	ed93 7b00 	vldr	d7, [r3]
 8007fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	ed8d 7b00 	vstr	d7, [sp]
 8007fd4:	f280 80e5 	bge.w	80081a2 <_dtoa_r+0x632>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f300 80e1 	bgt.w	80081a2 <_dtoa_r+0x632>
 8007fe0:	d10c      	bne.n	8007ffc <_dtoa_r+0x48c>
 8007fe2:	4b48      	ldr	r3, [pc, #288]	@ (8008104 <_dtoa_r+0x594>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	ec51 0b17 	vmov	r0, r1, d7
 8007fea:	f7f8 fb1d 	bl	8000628 <__aeabi_dmul>
 8007fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff2:	f7f8 fd9f 	bl	8000b34 <__aeabi_dcmpge>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f000 8266 	beq.w	80084c8 <_dtoa_r+0x958>
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	4625      	mov	r5, r4
 8008000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008002:	4656      	mov	r6, sl
 8008004:	ea6f 0803 	mvn.w	r8, r3
 8008008:	2700      	movs	r7, #0
 800800a:	4621      	mov	r1, r4
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fcbf 	bl	8008990 <_Bfree>
 8008012:	2d00      	cmp	r5, #0
 8008014:	f000 80bd 	beq.w	8008192 <_dtoa_r+0x622>
 8008018:	b12f      	cbz	r7, 8008026 <_dtoa_r+0x4b6>
 800801a:	42af      	cmp	r7, r5
 800801c:	d003      	beq.n	8008026 <_dtoa_r+0x4b6>
 800801e:	4639      	mov	r1, r7
 8008020:	4648      	mov	r0, r9
 8008022:	f000 fcb5 	bl	8008990 <_Bfree>
 8008026:	4629      	mov	r1, r5
 8008028:	4648      	mov	r0, r9
 800802a:	f000 fcb1 	bl	8008990 <_Bfree>
 800802e:	e0b0      	b.n	8008192 <_dtoa_r+0x622>
 8008030:	07e2      	lsls	r2, r4, #31
 8008032:	d505      	bpl.n	8008040 <_dtoa_r+0x4d0>
 8008034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008038:	f7f8 faf6 	bl	8000628 <__aeabi_dmul>
 800803c:	3601      	adds	r6, #1
 800803e:	2301      	movs	r3, #1
 8008040:	1064      	asrs	r4, r4, #1
 8008042:	3508      	adds	r5, #8
 8008044:	e762      	b.n	8007f0c <_dtoa_r+0x39c>
 8008046:	2602      	movs	r6, #2
 8008048:	e765      	b.n	8007f16 <_dtoa_r+0x3a6>
 800804a:	9c03      	ldr	r4, [sp, #12]
 800804c:	46b8      	mov	r8, r7
 800804e:	e784      	b.n	8007f5a <_dtoa_r+0x3ea>
 8008050:	4b27      	ldr	r3, [pc, #156]	@ (80080f0 <_dtoa_r+0x580>)
 8008052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800805c:	4454      	add	r4, sl
 800805e:	2900      	cmp	r1, #0
 8008060:	d054      	beq.n	800810c <_dtoa_r+0x59c>
 8008062:	4929      	ldr	r1, [pc, #164]	@ (8008108 <_dtoa_r+0x598>)
 8008064:	2000      	movs	r0, #0
 8008066:	f7f8 fc09 	bl	800087c <__aeabi_ddiv>
 800806a:	4633      	mov	r3, r6
 800806c:	462a      	mov	r2, r5
 800806e:	f7f8 f923 	bl	80002b8 <__aeabi_dsub>
 8008072:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008076:	4656      	mov	r6, sl
 8008078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800807c:	f7f8 fd84 	bl	8000b88 <__aeabi_d2iz>
 8008080:	4605      	mov	r5, r0
 8008082:	f7f8 fa67 	bl	8000554 <__aeabi_i2d>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800808e:	f7f8 f913 	bl	80002b8 <__aeabi_dsub>
 8008092:	3530      	adds	r5, #48	@ 0x30
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800809c:	f806 5b01 	strb.w	r5, [r6], #1
 80080a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080a4:	f7f8 fd32 	bl	8000b0c <__aeabi_dcmplt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d172      	bne.n	8008192 <_dtoa_r+0x622>
 80080ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b0:	4911      	ldr	r1, [pc, #68]	@ (80080f8 <_dtoa_r+0x588>)
 80080b2:	2000      	movs	r0, #0
 80080b4:	f7f8 f900 	bl	80002b8 <__aeabi_dsub>
 80080b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80080bc:	f7f8 fd26 	bl	8000b0c <__aeabi_dcmplt>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f040 80b4 	bne.w	800822e <_dtoa_r+0x6be>
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	f43f af70 	beq.w	8007fac <_dtoa_r+0x43c>
 80080cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80080d0:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <_dtoa_r+0x58c>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7f8 faa8 	bl	8000628 <__aeabi_dmul>
 80080d8:	4b08      	ldr	r3, [pc, #32]	@ (80080fc <_dtoa_r+0x58c>)
 80080da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080de:	2200      	movs	r2, #0
 80080e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e4:	f7f8 faa0 	bl	8000628 <__aeabi_dmul>
 80080e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ec:	e7c4      	b.n	8008078 <_dtoa_r+0x508>
 80080ee:	bf00      	nop
 80080f0:	0800bce0 	.word	0x0800bce0
 80080f4:	0800bcb8 	.word	0x0800bcb8
 80080f8:	3ff00000 	.word	0x3ff00000
 80080fc:	40240000 	.word	0x40240000
 8008100:	401c0000 	.word	0x401c0000
 8008104:	40140000 	.word	0x40140000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	f7f8 fa8a 	bl	8000628 <__aeabi_dmul>
 8008114:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008118:	9413      	str	r4, [sp, #76]	@ 0x4c
 800811a:	4656      	mov	r6, sl
 800811c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008120:	f7f8 fd32 	bl	8000b88 <__aeabi_d2iz>
 8008124:	4605      	mov	r5, r0
 8008126:	f7f8 fa15 	bl	8000554 <__aeabi_i2d>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008132:	f7f8 f8c1 	bl	80002b8 <__aeabi_dsub>
 8008136:	3530      	adds	r5, #48	@ 0x30
 8008138:	f806 5b01 	strb.w	r5, [r6], #1
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	42a6      	cmp	r6, r4
 8008142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	d124      	bne.n	8008196 <_dtoa_r+0x626>
 800814c:	4baf      	ldr	r3, [pc, #700]	@ (800840c <_dtoa_r+0x89c>)
 800814e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008152:	f7f8 f8b3 	bl	80002bc <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815e:	f7f8 fcf3 	bl	8000b48 <__aeabi_dcmpgt>
 8008162:	2800      	cmp	r0, #0
 8008164:	d163      	bne.n	800822e <_dtoa_r+0x6be>
 8008166:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800816a:	49a8      	ldr	r1, [pc, #672]	@ (800840c <_dtoa_r+0x89c>)
 800816c:	2000      	movs	r0, #0
 800816e:	f7f8 f8a3 	bl	80002b8 <__aeabi_dsub>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800817a:	f7f8 fcc7 	bl	8000b0c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f af14 	beq.w	8007fac <_dtoa_r+0x43c>
 8008184:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008186:	1e73      	subs	r3, r6, #1
 8008188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800818a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800818e:	2b30      	cmp	r3, #48	@ 0x30
 8008190:	d0f8      	beq.n	8008184 <_dtoa_r+0x614>
 8008192:	4647      	mov	r7, r8
 8008194:	e03b      	b.n	800820e <_dtoa_r+0x69e>
 8008196:	4b9e      	ldr	r3, [pc, #632]	@ (8008410 <_dtoa_r+0x8a0>)
 8008198:	f7f8 fa46 	bl	8000628 <__aeabi_dmul>
 800819c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a0:	e7bc      	b.n	800811c <_dtoa_r+0x5ac>
 80081a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80081a6:	4656      	mov	r6, sl
 80081a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 fb64 	bl	800087c <__aeabi_ddiv>
 80081b4:	f7f8 fce8 	bl	8000b88 <__aeabi_d2iz>
 80081b8:	4680      	mov	r8, r0
 80081ba:	f7f8 f9cb 	bl	8000554 <__aeabi_i2d>
 80081be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c2:	f7f8 fa31 	bl	8000628 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081d2:	f7f8 f871 	bl	80002b8 <__aeabi_dsub>
 80081d6:	f806 4b01 	strb.w	r4, [r6], #1
 80081da:	9d03      	ldr	r5, [sp, #12]
 80081dc:	eba6 040a 	sub.w	r4, r6, sl
 80081e0:	42a5      	cmp	r5, r4
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	d133      	bne.n	8008250 <_dtoa_r+0x6e0>
 80081e8:	f7f8 f868 	bl	80002bc <__adddf3>
 80081ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f0:	4604      	mov	r4, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	f7f8 fca8 	bl	8000b48 <__aeabi_dcmpgt>
 80081f8:	b9c0      	cbnz	r0, 800822c <_dtoa_r+0x6bc>
 80081fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 fc79 	bl	8000af8 <__aeabi_dcmpeq>
 8008206:	b110      	cbz	r0, 800820e <_dtoa_r+0x69e>
 8008208:	f018 0f01 	tst.w	r8, #1
 800820c:	d10e      	bne.n	800822c <_dtoa_r+0x6bc>
 800820e:	9902      	ldr	r1, [sp, #8]
 8008210:	4648      	mov	r0, r9
 8008212:	f000 fbbd 	bl	8008990 <_Bfree>
 8008216:	2300      	movs	r3, #0
 8008218:	7033      	strb	r3, [r6, #0]
 800821a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800821c:	3701      	adds	r7, #1
 800821e:	601f      	str	r7, [r3, #0]
 8008220:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 824b 	beq.w	80086be <_dtoa_r+0xb4e>
 8008228:	601e      	str	r6, [r3, #0]
 800822a:	e248      	b.n	80086be <_dtoa_r+0xb4e>
 800822c:	46b8      	mov	r8, r7
 800822e:	4633      	mov	r3, r6
 8008230:	461e      	mov	r6, r3
 8008232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008236:	2a39      	cmp	r2, #57	@ 0x39
 8008238:	d106      	bne.n	8008248 <_dtoa_r+0x6d8>
 800823a:	459a      	cmp	sl, r3
 800823c:	d1f8      	bne.n	8008230 <_dtoa_r+0x6c0>
 800823e:	2230      	movs	r2, #48	@ 0x30
 8008240:	f108 0801 	add.w	r8, r8, #1
 8008244:	f88a 2000 	strb.w	r2, [sl]
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	3201      	adds	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e7a0      	b.n	8008192 <_dtoa_r+0x622>
 8008250:	4b6f      	ldr	r3, [pc, #444]	@ (8008410 <_dtoa_r+0x8a0>)
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f9e8 	bl	8000628 <__aeabi_dmul>
 8008258:	2200      	movs	r2, #0
 800825a:	2300      	movs	r3, #0
 800825c:	4604      	mov	r4, r0
 800825e:	460d      	mov	r5, r1
 8008260:	f7f8 fc4a 	bl	8000af8 <__aeabi_dcmpeq>
 8008264:	2800      	cmp	r0, #0
 8008266:	d09f      	beq.n	80081a8 <_dtoa_r+0x638>
 8008268:	e7d1      	b.n	800820e <_dtoa_r+0x69e>
 800826a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800826c:	2a00      	cmp	r2, #0
 800826e:	f000 80ea 	beq.w	8008446 <_dtoa_r+0x8d6>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	2a01      	cmp	r2, #1
 8008276:	f300 80cd 	bgt.w	8008414 <_dtoa_r+0x8a4>
 800827a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800827c:	2a00      	cmp	r2, #0
 800827e:	f000 80c1 	beq.w	8008404 <_dtoa_r+0x894>
 8008282:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008286:	9c08      	ldr	r4, [sp, #32]
 8008288:	9e00      	ldr	r6, [sp, #0]
 800828a:	9a00      	ldr	r2, [sp, #0]
 800828c:	441a      	add	r2, r3
 800828e:	9200      	str	r2, [sp, #0]
 8008290:	9a06      	ldr	r2, [sp, #24]
 8008292:	2101      	movs	r1, #1
 8008294:	441a      	add	r2, r3
 8008296:	4648      	mov	r0, r9
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	f000 fc77 	bl	8008b8c <__i2b>
 800829e:	4605      	mov	r5, r0
 80082a0:	b166      	cbz	r6, 80082bc <_dtoa_r+0x74c>
 80082a2:	9b06      	ldr	r3, [sp, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd09      	ble.n	80082bc <_dtoa_r+0x74c>
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	bfa8      	it	ge
 80082ae:	4633      	movge	r3, r6
 80082b0:	1ad2      	subs	r2, r2, r3
 80082b2:	9200      	str	r2, [sp, #0]
 80082b4:	9a06      	ldr	r2, [sp, #24]
 80082b6:	1af6      	subs	r6, r6, r3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	9306      	str	r3, [sp, #24]
 80082bc:	9b08      	ldr	r3, [sp, #32]
 80082be:	b30b      	cbz	r3, 8008304 <_dtoa_r+0x794>
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80c6 	beq.w	8008454 <_dtoa_r+0x8e4>
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	f000 80c0 	beq.w	800844e <_dtoa_r+0x8de>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4622      	mov	r2, r4
 80082d2:	4648      	mov	r0, r9
 80082d4:	f000 fd12 	bl	8008cfc <__pow5mult>
 80082d8:	9a02      	ldr	r2, [sp, #8]
 80082da:	4601      	mov	r1, r0
 80082dc:	4605      	mov	r5, r0
 80082de:	4648      	mov	r0, r9
 80082e0:	f000 fc6a 	bl	8008bb8 <__multiply>
 80082e4:	9902      	ldr	r1, [sp, #8]
 80082e6:	4680      	mov	r8, r0
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fb51 	bl	8008990 <_Bfree>
 80082ee:	9b08      	ldr	r3, [sp, #32]
 80082f0:	1b1b      	subs	r3, r3, r4
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	f000 80b1 	beq.w	800845a <_dtoa_r+0x8ea>
 80082f8:	9a08      	ldr	r2, [sp, #32]
 80082fa:	4641      	mov	r1, r8
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 fcfd 	bl	8008cfc <__pow5mult>
 8008302:	9002      	str	r0, [sp, #8]
 8008304:	2101      	movs	r1, #1
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fc40 	bl	8008b8c <__i2b>
 800830c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800830e:	4604      	mov	r4, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 81d8 	beq.w	80086c6 <_dtoa_r+0xb56>
 8008316:	461a      	mov	r2, r3
 8008318:	4601      	mov	r1, r0
 800831a:	4648      	mov	r0, r9
 800831c:	f000 fcee 	bl	8008cfc <__pow5mult>
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	2b01      	cmp	r3, #1
 8008324:	4604      	mov	r4, r0
 8008326:	f300 809f 	bgt.w	8008468 <_dtoa_r+0x8f8>
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8097 	bne.w	8008460 <_dtoa_r+0x8f0>
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8093 	bne.w	8008464 <_dtoa_r+0x8f4>
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008344:	0d1b      	lsrs	r3, r3, #20
 8008346:	051b      	lsls	r3, r3, #20
 8008348:	b133      	cbz	r3, 8008358 <_dtoa_r+0x7e8>
 800834a:	9b00      	ldr	r3, [sp, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	3301      	adds	r3, #1
 8008354:	9306      	str	r3, [sp, #24]
 8008356:	2301      	movs	r3, #1
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 81b8 	beq.w	80086d2 <_dtoa_r+0xb62>
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008368:	6918      	ldr	r0, [r3, #16]
 800836a:	f000 fbc3 	bl	8008af4 <__hi0bits>
 800836e:	f1c0 0020 	rsb	r0, r0, #32
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	4418      	add	r0, r3
 8008376:	f010 001f 	ands.w	r0, r0, #31
 800837a:	f000 8082 	beq.w	8008482 <_dtoa_r+0x912>
 800837e:	f1c0 0320 	rsb	r3, r0, #32
 8008382:	2b04      	cmp	r3, #4
 8008384:	dd73      	ble.n	800846e <_dtoa_r+0x8fe>
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	f1c0 001c 	rsb	r0, r0, #28
 800838c:	4403      	add	r3, r0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	4403      	add	r3, r0
 8008394:	4406      	add	r6, r0
 8008396:	9306      	str	r3, [sp, #24]
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd05      	ble.n	80083aa <_dtoa_r+0x83a>
 800839e:	9902      	ldr	r1, [sp, #8]
 80083a0:	461a      	mov	r2, r3
 80083a2:	4648      	mov	r0, r9
 80083a4:	f000 fd04 	bl	8008db0 <__lshift>
 80083a8:	9002      	str	r0, [sp, #8]
 80083aa:	9b06      	ldr	r3, [sp, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd05      	ble.n	80083bc <_dtoa_r+0x84c>
 80083b0:	4621      	mov	r1, r4
 80083b2:	461a      	mov	r2, r3
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fcfb 	bl	8008db0 <__lshift>
 80083ba:	4604      	mov	r4, r0
 80083bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d061      	beq.n	8008486 <_dtoa_r+0x916>
 80083c2:	9802      	ldr	r0, [sp, #8]
 80083c4:	4621      	mov	r1, r4
 80083c6:	f000 fd5f 	bl	8008e88 <__mcmp>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	da5b      	bge.n	8008486 <_dtoa_r+0x916>
 80083ce:	2300      	movs	r3, #0
 80083d0:	9902      	ldr	r1, [sp, #8]
 80083d2:	220a      	movs	r2, #10
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fafd 	bl	80089d4 <__multadd>
 80083da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083dc:	9002      	str	r0, [sp, #8]
 80083de:	f107 38ff 	add.w	r8, r7, #4294967295
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 8177 	beq.w	80086d6 <_dtoa_r+0xb66>
 80083e8:	4629      	mov	r1, r5
 80083ea:	2300      	movs	r3, #0
 80083ec:	220a      	movs	r2, #10
 80083ee:	4648      	mov	r0, r9
 80083f0:	f000 faf0 	bl	80089d4 <__multadd>
 80083f4:	f1bb 0f00 	cmp.w	fp, #0
 80083f8:	4605      	mov	r5, r0
 80083fa:	dc6f      	bgt.n	80084dc <_dtoa_r+0x96c>
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	dc49      	bgt.n	8008496 <_dtoa_r+0x926>
 8008402:	e06b      	b.n	80084dc <_dtoa_r+0x96c>
 8008404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800840a:	e73c      	b.n	8008286 <_dtoa_r+0x716>
 800840c:	3fe00000 	.word	0x3fe00000
 8008410:	40240000 	.word	0x40240000
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	1e5c      	subs	r4, r3, #1
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	42a3      	cmp	r3, r4
 800841c:	db09      	blt.n	8008432 <_dtoa_r+0x8c2>
 800841e:	1b1c      	subs	r4, r3, r4
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f6bf af30 	bge.w	8008288 <_dtoa_r+0x718>
 8008428:	9b00      	ldr	r3, [sp, #0]
 800842a:	9a03      	ldr	r2, [sp, #12]
 800842c:	1a9e      	subs	r6, r3, r2
 800842e:	2300      	movs	r3, #0
 8008430:	e72b      	b.n	800828a <_dtoa_r+0x71a>
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008436:	9408      	str	r4, [sp, #32]
 8008438:	1ae3      	subs	r3, r4, r3
 800843a:	441a      	add	r2, r3
 800843c:	9e00      	ldr	r6, [sp, #0]
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	920d      	str	r2, [sp, #52]	@ 0x34
 8008442:	2400      	movs	r4, #0
 8008444:	e721      	b.n	800828a <_dtoa_r+0x71a>
 8008446:	9c08      	ldr	r4, [sp, #32]
 8008448:	9e00      	ldr	r6, [sp, #0]
 800844a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800844c:	e728      	b.n	80082a0 <_dtoa_r+0x730>
 800844e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008452:	e751      	b.n	80082f8 <_dtoa_r+0x788>
 8008454:	9a08      	ldr	r2, [sp, #32]
 8008456:	9902      	ldr	r1, [sp, #8]
 8008458:	e750      	b.n	80082fc <_dtoa_r+0x78c>
 800845a:	f8cd 8008 	str.w	r8, [sp, #8]
 800845e:	e751      	b.n	8008304 <_dtoa_r+0x794>
 8008460:	2300      	movs	r3, #0
 8008462:	e779      	b.n	8008358 <_dtoa_r+0x7e8>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	e777      	b.n	8008358 <_dtoa_r+0x7e8>
 8008468:	2300      	movs	r3, #0
 800846a:	9308      	str	r3, [sp, #32]
 800846c:	e779      	b.n	8008362 <_dtoa_r+0x7f2>
 800846e:	d093      	beq.n	8008398 <_dtoa_r+0x828>
 8008470:	9a00      	ldr	r2, [sp, #0]
 8008472:	331c      	adds	r3, #28
 8008474:	441a      	add	r2, r3
 8008476:	9200      	str	r2, [sp, #0]
 8008478:	9a06      	ldr	r2, [sp, #24]
 800847a:	441a      	add	r2, r3
 800847c:	441e      	add	r6, r3
 800847e:	9206      	str	r2, [sp, #24]
 8008480:	e78a      	b.n	8008398 <_dtoa_r+0x828>
 8008482:	4603      	mov	r3, r0
 8008484:	e7f4      	b.n	8008470 <_dtoa_r+0x900>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	46b8      	mov	r8, r7
 800848c:	dc20      	bgt.n	80084d0 <_dtoa_r+0x960>
 800848e:	469b      	mov	fp, r3
 8008490:	9b07      	ldr	r3, [sp, #28]
 8008492:	2b02      	cmp	r3, #2
 8008494:	dd1e      	ble.n	80084d4 <_dtoa_r+0x964>
 8008496:	f1bb 0f00 	cmp.w	fp, #0
 800849a:	f47f adb1 	bne.w	8008000 <_dtoa_r+0x490>
 800849e:	4621      	mov	r1, r4
 80084a0:	465b      	mov	r3, fp
 80084a2:	2205      	movs	r2, #5
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fa95 	bl	80089d4 <__multadd>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4604      	mov	r4, r0
 80084ae:	9802      	ldr	r0, [sp, #8]
 80084b0:	f000 fcea 	bl	8008e88 <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f77f ada3 	ble.w	8008000 <_dtoa_r+0x490>
 80084ba:	4656      	mov	r6, sl
 80084bc:	2331      	movs	r3, #49	@ 0x31
 80084be:	f806 3b01 	strb.w	r3, [r6], #1
 80084c2:	f108 0801 	add.w	r8, r8, #1
 80084c6:	e59f      	b.n	8008008 <_dtoa_r+0x498>
 80084c8:	9c03      	ldr	r4, [sp, #12]
 80084ca:	46b8      	mov	r8, r7
 80084cc:	4625      	mov	r5, r4
 80084ce:	e7f4      	b.n	80084ba <_dtoa_r+0x94a>
 80084d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80084d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8101 	beq.w	80086de <_dtoa_r+0xb6e>
 80084dc:	2e00      	cmp	r6, #0
 80084de:	dd05      	ble.n	80084ec <_dtoa_r+0x97c>
 80084e0:	4629      	mov	r1, r5
 80084e2:	4632      	mov	r2, r6
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 fc63 	bl	8008db0 <__lshift>
 80084ea:	4605      	mov	r5, r0
 80084ec:	9b08      	ldr	r3, [sp, #32]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d05c      	beq.n	80085ac <_dtoa_r+0xa3c>
 80084f2:	6869      	ldr	r1, [r5, #4]
 80084f4:	4648      	mov	r0, r9
 80084f6:	f000 fa0b 	bl	8008910 <_Balloc>
 80084fa:	4606      	mov	r6, r0
 80084fc:	b928      	cbnz	r0, 800850a <_dtoa_r+0x99a>
 80084fe:	4b82      	ldr	r3, [pc, #520]	@ (8008708 <_dtoa_r+0xb98>)
 8008500:	4602      	mov	r2, r0
 8008502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008506:	f7ff bb4a 	b.w	8007b9e <_dtoa_r+0x2e>
 800850a:	692a      	ldr	r2, [r5, #16]
 800850c:	3202      	adds	r2, #2
 800850e:	0092      	lsls	r2, r2, #2
 8008510:	f105 010c 	add.w	r1, r5, #12
 8008514:	300c      	adds	r0, #12
 8008516:	f7ff fa70 	bl	80079fa <memcpy>
 800851a:	2201      	movs	r2, #1
 800851c:	4631      	mov	r1, r6
 800851e:	4648      	mov	r0, r9
 8008520:	f000 fc46 	bl	8008db0 <__lshift>
 8008524:	f10a 0301 	add.w	r3, sl, #1
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	eb0a 030b 	add.w	r3, sl, fp
 800852e:	9308      	str	r3, [sp, #32]
 8008530:	9b04      	ldr	r3, [sp, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	462f      	mov	r7, r5
 8008538:	9306      	str	r3, [sp, #24]
 800853a:	4605      	mov	r5, r0
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	9802      	ldr	r0, [sp, #8]
 8008540:	4621      	mov	r1, r4
 8008542:	f103 3bff 	add.w	fp, r3, #4294967295
 8008546:	f7ff fa8b 	bl	8007a60 <quorem>
 800854a:	4603      	mov	r3, r0
 800854c:	3330      	adds	r3, #48	@ 0x30
 800854e:	9003      	str	r0, [sp, #12]
 8008550:	4639      	mov	r1, r7
 8008552:	9802      	ldr	r0, [sp, #8]
 8008554:	9309      	str	r3, [sp, #36]	@ 0x24
 8008556:	f000 fc97 	bl	8008e88 <__mcmp>
 800855a:	462a      	mov	r2, r5
 800855c:	9004      	str	r0, [sp, #16]
 800855e:	4621      	mov	r1, r4
 8008560:	4648      	mov	r0, r9
 8008562:	f000 fcad 	bl	8008ec0 <__mdiff>
 8008566:	68c2      	ldr	r2, [r0, #12]
 8008568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856a:	4606      	mov	r6, r0
 800856c:	bb02      	cbnz	r2, 80085b0 <_dtoa_r+0xa40>
 800856e:	4601      	mov	r1, r0
 8008570:	9802      	ldr	r0, [sp, #8]
 8008572:	f000 fc89 	bl	8008e88 <__mcmp>
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	4602      	mov	r2, r0
 800857a:	4631      	mov	r1, r6
 800857c:	4648      	mov	r0, r9
 800857e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008580:	9309      	str	r3, [sp, #36]	@ 0x24
 8008582:	f000 fa05 	bl	8008990 <_Bfree>
 8008586:	9b07      	ldr	r3, [sp, #28]
 8008588:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800858a:	9e00      	ldr	r6, [sp, #0]
 800858c:	ea42 0103 	orr.w	r1, r2, r3
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	4319      	orrs	r1, r3
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	d10d      	bne.n	80085b4 <_dtoa_r+0xa44>
 8008598:	2b39      	cmp	r3, #57	@ 0x39
 800859a:	d027      	beq.n	80085ec <_dtoa_r+0xa7c>
 800859c:	9a04      	ldr	r2, [sp, #16]
 800859e:	2a00      	cmp	r2, #0
 80085a0:	dd01      	ble.n	80085a6 <_dtoa_r+0xa36>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	3331      	adds	r3, #49	@ 0x31
 80085a6:	f88b 3000 	strb.w	r3, [fp]
 80085aa:	e52e      	b.n	800800a <_dtoa_r+0x49a>
 80085ac:	4628      	mov	r0, r5
 80085ae:	e7b9      	b.n	8008524 <_dtoa_r+0x9b4>
 80085b0:	2201      	movs	r2, #1
 80085b2:	e7e2      	b.n	800857a <_dtoa_r+0xa0a>
 80085b4:	9904      	ldr	r1, [sp, #16]
 80085b6:	2900      	cmp	r1, #0
 80085b8:	db04      	blt.n	80085c4 <_dtoa_r+0xa54>
 80085ba:	9807      	ldr	r0, [sp, #28]
 80085bc:	4301      	orrs	r1, r0
 80085be:	9806      	ldr	r0, [sp, #24]
 80085c0:	4301      	orrs	r1, r0
 80085c2:	d120      	bne.n	8008606 <_dtoa_r+0xa96>
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	ddee      	ble.n	80085a6 <_dtoa_r+0xa36>
 80085c8:	9902      	ldr	r1, [sp, #8]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	4648      	mov	r0, r9
 80085d0:	f000 fbee 	bl	8008db0 <__lshift>
 80085d4:	4621      	mov	r1, r4
 80085d6:	9002      	str	r0, [sp, #8]
 80085d8:	f000 fc56 	bl	8008e88 <__mcmp>
 80085dc:	2800      	cmp	r0, #0
 80085de:	9b00      	ldr	r3, [sp, #0]
 80085e0:	dc02      	bgt.n	80085e8 <_dtoa_r+0xa78>
 80085e2:	d1e0      	bne.n	80085a6 <_dtoa_r+0xa36>
 80085e4:	07da      	lsls	r2, r3, #31
 80085e6:	d5de      	bpl.n	80085a6 <_dtoa_r+0xa36>
 80085e8:	2b39      	cmp	r3, #57	@ 0x39
 80085ea:	d1da      	bne.n	80085a2 <_dtoa_r+0xa32>
 80085ec:	2339      	movs	r3, #57	@ 0x39
 80085ee:	f88b 3000 	strb.w	r3, [fp]
 80085f2:	4633      	mov	r3, r6
 80085f4:	461e      	mov	r6, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085fc:	2a39      	cmp	r2, #57	@ 0x39
 80085fe:	d04e      	beq.n	800869e <_dtoa_r+0xb2e>
 8008600:	3201      	adds	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e501      	b.n	800800a <_dtoa_r+0x49a>
 8008606:	2a00      	cmp	r2, #0
 8008608:	dd03      	ble.n	8008612 <_dtoa_r+0xaa2>
 800860a:	2b39      	cmp	r3, #57	@ 0x39
 800860c:	d0ee      	beq.n	80085ec <_dtoa_r+0xa7c>
 800860e:	3301      	adds	r3, #1
 8008610:	e7c9      	b.n	80085a6 <_dtoa_r+0xa36>
 8008612:	9a00      	ldr	r2, [sp, #0]
 8008614:	9908      	ldr	r1, [sp, #32]
 8008616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800861a:	428a      	cmp	r2, r1
 800861c:	d028      	beq.n	8008670 <_dtoa_r+0xb00>
 800861e:	9902      	ldr	r1, [sp, #8]
 8008620:	2300      	movs	r3, #0
 8008622:	220a      	movs	r2, #10
 8008624:	4648      	mov	r0, r9
 8008626:	f000 f9d5 	bl	80089d4 <__multadd>
 800862a:	42af      	cmp	r7, r5
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	f04f 020a 	mov.w	r2, #10
 8008636:	4639      	mov	r1, r7
 8008638:	4648      	mov	r0, r9
 800863a:	d107      	bne.n	800864c <_dtoa_r+0xadc>
 800863c:	f000 f9ca 	bl	80089d4 <__multadd>
 8008640:	4607      	mov	r7, r0
 8008642:	4605      	mov	r5, r0
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	e777      	b.n	800853c <_dtoa_r+0x9cc>
 800864c:	f000 f9c2 	bl	80089d4 <__multadd>
 8008650:	4629      	mov	r1, r5
 8008652:	4607      	mov	r7, r0
 8008654:	2300      	movs	r3, #0
 8008656:	220a      	movs	r2, #10
 8008658:	4648      	mov	r0, r9
 800865a:	f000 f9bb 	bl	80089d4 <__multadd>
 800865e:	4605      	mov	r5, r0
 8008660:	e7f0      	b.n	8008644 <_dtoa_r+0xad4>
 8008662:	f1bb 0f00 	cmp.w	fp, #0
 8008666:	bfcc      	ite	gt
 8008668:	465e      	movgt	r6, fp
 800866a:	2601      	movle	r6, #1
 800866c:	4456      	add	r6, sl
 800866e:	2700      	movs	r7, #0
 8008670:	9902      	ldr	r1, [sp, #8]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	4648      	mov	r0, r9
 8008678:	f000 fb9a 	bl	8008db0 <__lshift>
 800867c:	4621      	mov	r1, r4
 800867e:	9002      	str	r0, [sp, #8]
 8008680:	f000 fc02 	bl	8008e88 <__mcmp>
 8008684:	2800      	cmp	r0, #0
 8008686:	dcb4      	bgt.n	80085f2 <_dtoa_r+0xa82>
 8008688:	d102      	bne.n	8008690 <_dtoa_r+0xb20>
 800868a:	9b00      	ldr	r3, [sp, #0]
 800868c:	07db      	lsls	r3, r3, #31
 800868e:	d4b0      	bmi.n	80085f2 <_dtoa_r+0xa82>
 8008690:	4633      	mov	r3, r6
 8008692:	461e      	mov	r6, r3
 8008694:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008698:	2a30      	cmp	r2, #48	@ 0x30
 800869a:	d0fa      	beq.n	8008692 <_dtoa_r+0xb22>
 800869c:	e4b5      	b.n	800800a <_dtoa_r+0x49a>
 800869e:	459a      	cmp	sl, r3
 80086a0:	d1a8      	bne.n	80085f4 <_dtoa_r+0xa84>
 80086a2:	2331      	movs	r3, #49	@ 0x31
 80086a4:	f108 0801 	add.w	r8, r8, #1
 80086a8:	f88a 3000 	strb.w	r3, [sl]
 80086ac:	e4ad      	b.n	800800a <_dtoa_r+0x49a>
 80086ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800870c <_dtoa_r+0xb9c>
 80086b4:	b11b      	cbz	r3, 80086be <_dtoa_r+0xb4e>
 80086b6:	f10a 0308 	add.w	r3, sl, #8
 80086ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	4650      	mov	r0, sl
 80086c0:	b017      	add	sp, #92	@ 0x5c
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f77f ae2e 	ble.w	800832a <_dtoa_r+0x7ba>
 80086ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	2001      	movs	r0, #1
 80086d4:	e64d      	b.n	8008372 <_dtoa_r+0x802>
 80086d6:	f1bb 0f00 	cmp.w	fp, #0
 80086da:	f77f aed9 	ble.w	8008490 <_dtoa_r+0x920>
 80086de:	4656      	mov	r6, sl
 80086e0:	9802      	ldr	r0, [sp, #8]
 80086e2:	4621      	mov	r1, r4
 80086e4:	f7ff f9bc 	bl	8007a60 <quorem>
 80086e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80086ec:	f806 3b01 	strb.w	r3, [r6], #1
 80086f0:	eba6 020a 	sub.w	r2, r6, sl
 80086f4:	4593      	cmp	fp, r2
 80086f6:	ddb4      	ble.n	8008662 <_dtoa_r+0xaf2>
 80086f8:	9902      	ldr	r1, [sp, #8]
 80086fa:	2300      	movs	r3, #0
 80086fc:	220a      	movs	r2, #10
 80086fe:	4648      	mov	r0, r9
 8008700:	f000 f968 	bl	80089d4 <__multadd>
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	e7eb      	b.n	80086e0 <_dtoa_r+0xb70>
 8008708:	0800bba9 	.word	0x0800bba9
 800870c:	0800bb44 	.word	0x0800bb44

08008710 <_free_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4605      	mov	r5, r0
 8008714:	2900      	cmp	r1, #0
 8008716:	d041      	beq.n	800879c <_free_r+0x8c>
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f0c      	subs	r4, r1, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	18e4      	addlt	r4, r4, r3
 8008724:	f000 f8e8 	bl	80088f8 <__malloc_lock>
 8008728:	4a1d      	ldr	r2, [pc, #116]	@ (80087a0 <_free_r+0x90>)
 800872a:	6813      	ldr	r3, [r2, #0]
 800872c:	b933      	cbnz	r3, 800873c <_free_r+0x2c>
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6014      	str	r4, [r2, #0]
 8008732:	4628      	mov	r0, r5
 8008734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008738:	f000 b8e4 	b.w	8008904 <__malloc_unlock>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d908      	bls.n	8008752 <_free_r+0x42>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	1821      	adds	r1, r4, r0
 8008744:	428b      	cmp	r3, r1
 8008746:	bf01      	itttt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	1809      	addeq	r1, r1, r0
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	e7ed      	b.n	800872e <_free_r+0x1e>
 8008752:	461a      	mov	r2, r3
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b10b      	cbz	r3, 800875c <_free_r+0x4c>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d9fa      	bls.n	8008752 <_free_r+0x42>
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	1850      	adds	r0, r2, r1
 8008760:	42a0      	cmp	r0, r4
 8008762:	d10b      	bne.n	800877c <_free_r+0x6c>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	4401      	add	r1, r0
 8008768:	1850      	adds	r0, r2, r1
 800876a:	4283      	cmp	r3, r0
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	d1e0      	bne.n	8008732 <_free_r+0x22>
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6053      	str	r3, [r2, #4]
 8008776:	4408      	add	r0, r1
 8008778:	6010      	str	r0, [r2, #0]
 800877a:	e7da      	b.n	8008732 <_free_r+0x22>
 800877c:	d902      	bls.n	8008784 <_free_r+0x74>
 800877e:	230c      	movs	r3, #12
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	e7d6      	b.n	8008732 <_free_r+0x22>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	1821      	adds	r1, r4, r0
 8008788:	428b      	cmp	r3, r1
 800878a:	bf04      	itt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	bf04      	itt	eq
 8008794:	1809      	addeq	r1, r1, r0
 8008796:	6021      	streq	r1, [r4, #0]
 8008798:	6054      	str	r4, [r2, #4]
 800879a:	e7ca      	b.n	8008732 <_free_r+0x22>
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	bf00      	nop
 80087a0:	20000c60 	.word	0x20000c60

080087a4 <malloc>:
 80087a4:	4b02      	ldr	r3, [pc, #8]	@ (80087b0 <malloc+0xc>)
 80087a6:	4601      	mov	r1, r0
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f000 b825 	b.w	80087f8 <_malloc_r>
 80087ae:	bf00      	nop
 80087b0:	20000030 	.word	0x20000030

080087b4 <sbrk_aligned>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4e0f      	ldr	r6, [pc, #60]	@ (80087f4 <sbrk_aligned+0x40>)
 80087b8:	460c      	mov	r4, r1
 80087ba:	6831      	ldr	r1, [r6, #0]
 80087bc:	4605      	mov	r5, r0
 80087be:	b911      	cbnz	r1, 80087c6 <sbrk_aligned+0x12>
 80087c0:	f002 f9a8 	bl	800ab14 <_sbrk_r>
 80087c4:	6030      	str	r0, [r6, #0]
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f002 f9a3 	bl	800ab14 <_sbrk_r>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d103      	bne.n	80087da <sbrk_aligned+0x26>
 80087d2:	f04f 34ff 	mov.w	r4, #4294967295
 80087d6:	4620      	mov	r0, r4
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	1cc4      	adds	r4, r0, #3
 80087dc:	f024 0403 	bic.w	r4, r4, #3
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d0f8      	beq.n	80087d6 <sbrk_aligned+0x22>
 80087e4:	1a21      	subs	r1, r4, r0
 80087e6:	4628      	mov	r0, r5
 80087e8:	f002 f994 	bl	800ab14 <_sbrk_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	d1f2      	bne.n	80087d6 <sbrk_aligned+0x22>
 80087f0:	e7ef      	b.n	80087d2 <sbrk_aligned+0x1e>
 80087f2:	bf00      	nop
 80087f4:	20000c5c 	.word	0x20000c5c

080087f8 <_malloc_r>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	1ccd      	adds	r5, r1, #3
 80087fe:	f025 0503 	bic.w	r5, r5, #3
 8008802:	3508      	adds	r5, #8
 8008804:	2d0c      	cmp	r5, #12
 8008806:	bf38      	it	cc
 8008808:	250c      	movcc	r5, #12
 800880a:	2d00      	cmp	r5, #0
 800880c:	4606      	mov	r6, r0
 800880e:	db01      	blt.n	8008814 <_malloc_r+0x1c>
 8008810:	42a9      	cmp	r1, r5
 8008812:	d904      	bls.n	800881e <_malloc_r+0x26>
 8008814:	230c      	movs	r3, #12
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	2000      	movs	r0, #0
 800881a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f4 <_malloc_r+0xfc>
 8008822:	f000 f869 	bl	80088f8 <__malloc_lock>
 8008826:	f8d8 3000 	ldr.w	r3, [r8]
 800882a:	461c      	mov	r4, r3
 800882c:	bb44      	cbnz	r4, 8008880 <_malloc_r+0x88>
 800882e:	4629      	mov	r1, r5
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ffbf 	bl	80087b4 <sbrk_aligned>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	4604      	mov	r4, r0
 800883a:	d158      	bne.n	80088ee <_malloc_r+0xf6>
 800883c:	f8d8 4000 	ldr.w	r4, [r8]
 8008840:	4627      	mov	r7, r4
 8008842:	2f00      	cmp	r7, #0
 8008844:	d143      	bne.n	80088ce <_malloc_r+0xd6>
 8008846:	2c00      	cmp	r4, #0
 8008848:	d04b      	beq.n	80088e2 <_malloc_r+0xea>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4639      	mov	r1, r7
 800884e:	4630      	mov	r0, r6
 8008850:	eb04 0903 	add.w	r9, r4, r3
 8008854:	f002 f95e 	bl	800ab14 <_sbrk_r>
 8008858:	4581      	cmp	r9, r0
 800885a:	d142      	bne.n	80088e2 <_malloc_r+0xea>
 800885c:	6821      	ldr	r1, [r4, #0]
 800885e:	1a6d      	subs	r5, r5, r1
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff ffa6 	bl	80087b4 <sbrk_aligned>
 8008868:	3001      	adds	r0, #1
 800886a:	d03a      	beq.n	80088e2 <_malloc_r+0xea>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	442b      	add	r3, r5
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	f8d8 3000 	ldr.w	r3, [r8]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	bb62      	cbnz	r2, 80088d4 <_malloc_r+0xdc>
 800887a:	f8c8 7000 	str.w	r7, [r8]
 800887e:	e00f      	b.n	80088a0 <_malloc_r+0xa8>
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	1b52      	subs	r2, r2, r5
 8008884:	d420      	bmi.n	80088c8 <_malloc_r+0xd0>
 8008886:	2a0b      	cmp	r2, #11
 8008888:	d917      	bls.n	80088ba <_malloc_r+0xc2>
 800888a:	1961      	adds	r1, r4, r5
 800888c:	42a3      	cmp	r3, r4
 800888e:	6025      	str	r5, [r4, #0]
 8008890:	bf18      	it	ne
 8008892:	6059      	strne	r1, [r3, #4]
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	bf08      	it	eq
 8008898:	f8c8 1000 	streq.w	r1, [r8]
 800889c:	5162      	str	r2, [r4, r5]
 800889e:	604b      	str	r3, [r1, #4]
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 f82f 	bl	8008904 <__malloc_unlock>
 80088a6:	f104 000b 	add.w	r0, r4, #11
 80088aa:	1d23      	adds	r3, r4, #4
 80088ac:	f020 0007 	bic.w	r0, r0, #7
 80088b0:	1ac2      	subs	r2, r0, r3
 80088b2:	bf1c      	itt	ne
 80088b4:	1a1b      	subne	r3, r3, r0
 80088b6:	50a3      	strne	r3, [r4, r2]
 80088b8:	e7af      	b.n	800881a <_malloc_r+0x22>
 80088ba:	6862      	ldr	r2, [r4, #4]
 80088bc:	42a3      	cmp	r3, r4
 80088be:	bf0c      	ite	eq
 80088c0:	f8c8 2000 	streq.w	r2, [r8]
 80088c4:	605a      	strne	r2, [r3, #4]
 80088c6:	e7eb      	b.n	80088a0 <_malloc_r+0xa8>
 80088c8:	4623      	mov	r3, r4
 80088ca:	6864      	ldr	r4, [r4, #4]
 80088cc:	e7ae      	b.n	800882c <_malloc_r+0x34>
 80088ce:	463c      	mov	r4, r7
 80088d0:	687f      	ldr	r7, [r7, #4]
 80088d2:	e7b6      	b.n	8008842 <_malloc_r+0x4a>
 80088d4:	461a      	mov	r2, r3
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d1fb      	bne.n	80088d4 <_malloc_r+0xdc>
 80088dc:	2300      	movs	r3, #0
 80088de:	6053      	str	r3, [r2, #4]
 80088e0:	e7de      	b.n	80088a0 <_malloc_r+0xa8>
 80088e2:	230c      	movs	r3, #12
 80088e4:	6033      	str	r3, [r6, #0]
 80088e6:	4630      	mov	r0, r6
 80088e8:	f000 f80c 	bl	8008904 <__malloc_unlock>
 80088ec:	e794      	b.n	8008818 <_malloc_r+0x20>
 80088ee:	6005      	str	r5, [r0, #0]
 80088f0:	e7d6      	b.n	80088a0 <_malloc_r+0xa8>
 80088f2:	bf00      	nop
 80088f4:	20000c60 	.word	0x20000c60

080088f8 <__malloc_lock>:
 80088f8:	4801      	ldr	r0, [pc, #4]	@ (8008900 <__malloc_lock+0x8>)
 80088fa:	f7ff b87c 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	20000c58 	.word	0x20000c58

08008904 <__malloc_unlock>:
 8008904:	4801      	ldr	r0, [pc, #4]	@ (800890c <__malloc_unlock+0x8>)
 8008906:	f7ff b877 	b.w	80079f8 <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	20000c58 	.word	0x20000c58

08008910 <_Balloc>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	69c6      	ldr	r6, [r0, #28]
 8008914:	4604      	mov	r4, r0
 8008916:	460d      	mov	r5, r1
 8008918:	b976      	cbnz	r6, 8008938 <_Balloc+0x28>
 800891a:	2010      	movs	r0, #16
 800891c:	f7ff ff42 	bl	80087a4 <malloc>
 8008920:	4602      	mov	r2, r0
 8008922:	61e0      	str	r0, [r4, #28]
 8008924:	b920      	cbnz	r0, 8008930 <_Balloc+0x20>
 8008926:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <_Balloc+0x78>)
 8008928:	4818      	ldr	r0, [pc, #96]	@ (800898c <_Balloc+0x7c>)
 800892a:	216b      	movs	r1, #107	@ 0x6b
 800892c:	f7ff f87a 	bl	8007a24 <__assert_func>
 8008930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008934:	6006      	str	r6, [r0, #0]
 8008936:	60c6      	str	r6, [r0, #12]
 8008938:	69e6      	ldr	r6, [r4, #28]
 800893a:	68f3      	ldr	r3, [r6, #12]
 800893c:	b183      	cbz	r3, 8008960 <_Balloc+0x50>
 800893e:	69e3      	ldr	r3, [r4, #28]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008946:	b9b8      	cbnz	r0, 8008978 <_Balloc+0x68>
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f605 	lsl.w	r6, r1, r5
 800894e:	1d72      	adds	r2, r6, #5
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	4620      	mov	r0, r4
 8008954:	f002 f8ff 	bl	800ab56 <_calloc_r>
 8008958:	b160      	cbz	r0, 8008974 <_Balloc+0x64>
 800895a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800895e:	e00e      	b.n	800897e <_Balloc+0x6e>
 8008960:	2221      	movs	r2, #33	@ 0x21
 8008962:	2104      	movs	r1, #4
 8008964:	4620      	mov	r0, r4
 8008966:	f002 f8f6 	bl	800ab56 <_calloc_r>
 800896a:	69e3      	ldr	r3, [r4, #28]
 800896c:	60f0      	str	r0, [r6, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e4      	bne.n	800893e <_Balloc+0x2e>
 8008974:	2000      	movs	r0, #0
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	6802      	ldr	r2, [r0, #0]
 800897a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800897e:	2300      	movs	r3, #0
 8008980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008984:	e7f7      	b.n	8008976 <_Balloc+0x66>
 8008986:	bf00      	nop
 8008988:	0800ba97 	.word	0x0800ba97
 800898c:	0800bbba 	.word	0x0800bbba

08008990 <_Bfree>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	69c6      	ldr	r6, [r0, #28]
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	b976      	cbnz	r6, 80089b8 <_Bfree+0x28>
 800899a:	2010      	movs	r0, #16
 800899c:	f7ff ff02 	bl	80087a4 <malloc>
 80089a0:	4602      	mov	r2, r0
 80089a2:	61e8      	str	r0, [r5, #28]
 80089a4:	b920      	cbnz	r0, 80089b0 <_Bfree+0x20>
 80089a6:	4b09      	ldr	r3, [pc, #36]	@ (80089cc <_Bfree+0x3c>)
 80089a8:	4809      	ldr	r0, [pc, #36]	@ (80089d0 <_Bfree+0x40>)
 80089aa:	218f      	movs	r1, #143	@ 0x8f
 80089ac:	f7ff f83a 	bl	8007a24 <__assert_func>
 80089b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b4:	6006      	str	r6, [r0, #0]
 80089b6:	60c6      	str	r6, [r0, #12]
 80089b8:	b13c      	cbz	r4, 80089ca <_Bfree+0x3a>
 80089ba:	69eb      	ldr	r3, [r5, #28]
 80089bc:	6862      	ldr	r2, [r4, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c4:	6021      	str	r1, [r4, #0]
 80089c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	0800ba97 	.word	0x0800ba97
 80089d0:	0800bbba 	.word	0x0800bbba

080089d4 <__multadd>:
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	690d      	ldr	r5, [r1, #16]
 80089da:	4607      	mov	r7, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	461e      	mov	r6, r3
 80089e0:	f101 0c14 	add.w	ip, r1, #20
 80089e4:	2000      	movs	r0, #0
 80089e6:	f8dc 3000 	ldr.w	r3, [ip]
 80089ea:	b299      	uxth	r1, r3
 80089ec:	fb02 6101 	mla	r1, r2, r1, r6
 80089f0:	0c1e      	lsrs	r6, r3, #16
 80089f2:	0c0b      	lsrs	r3, r1, #16
 80089f4:	fb02 3306 	mla	r3, r2, r6, r3
 80089f8:	b289      	uxth	r1, r1
 80089fa:	3001      	adds	r0, #1
 80089fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a00:	4285      	cmp	r5, r0
 8008a02:	f84c 1b04 	str.w	r1, [ip], #4
 8008a06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a0a:	dcec      	bgt.n	80089e6 <__multadd+0x12>
 8008a0c:	b30e      	cbz	r6, 8008a52 <__multadd+0x7e>
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dc19      	bgt.n	8008a48 <__multadd+0x74>
 8008a14:	6861      	ldr	r1, [r4, #4]
 8008a16:	4638      	mov	r0, r7
 8008a18:	3101      	adds	r1, #1
 8008a1a:	f7ff ff79 	bl	8008910 <_Balloc>
 8008a1e:	4680      	mov	r8, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__multadd+0x5a>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <__multadd+0x84>)
 8008a26:	480d      	ldr	r0, [pc, #52]	@ (8008a5c <__multadd+0x88>)
 8008a28:	21ba      	movs	r1, #186	@ 0xba
 8008a2a:	f7fe fffb 	bl	8007a24 <__assert_func>
 8008a2e:	6922      	ldr	r2, [r4, #16]
 8008a30:	3202      	adds	r2, #2
 8008a32:	f104 010c 	add.w	r1, r4, #12
 8008a36:	0092      	lsls	r2, r2, #2
 8008a38:	300c      	adds	r0, #12
 8008a3a:	f7fe ffde 	bl	80079fa <memcpy>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ffa5 	bl	8008990 <_Bfree>
 8008a46:	4644      	mov	r4, r8
 8008a48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	615e      	str	r6, [r3, #20]
 8008a50:	6125      	str	r5, [r4, #16]
 8008a52:	4620      	mov	r0, r4
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	0800bba9 	.word	0x0800bba9
 8008a5c:	0800bbba 	.word	0x0800bbba

08008a60 <__s2b>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	460c      	mov	r4, r1
 8008a66:	4615      	mov	r5, r2
 8008a68:	461f      	mov	r7, r3
 8008a6a:	2209      	movs	r2, #9
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	4606      	mov	r6, r0
 8008a70:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a74:	2100      	movs	r1, #0
 8008a76:	2201      	movs	r2, #1
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	db09      	blt.n	8008a90 <__s2b+0x30>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ff47 	bl	8008910 <_Balloc>
 8008a82:	b940      	cbnz	r0, 8008a96 <__s2b+0x36>
 8008a84:	4602      	mov	r2, r0
 8008a86:	4b19      	ldr	r3, [pc, #100]	@ (8008aec <__s2b+0x8c>)
 8008a88:	4819      	ldr	r0, [pc, #100]	@ (8008af0 <__s2b+0x90>)
 8008a8a:	21d3      	movs	r1, #211	@ 0xd3
 8008a8c:	f7fe ffca 	bl	8007a24 <__assert_func>
 8008a90:	0052      	lsls	r2, r2, #1
 8008a92:	3101      	adds	r1, #1
 8008a94:	e7f0      	b.n	8008a78 <__s2b+0x18>
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	6143      	str	r3, [r0, #20]
 8008a9a:	2d09      	cmp	r5, #9
 8008a9c:	f04f 0301 	mov.w	r3, #1
 8008aa0:	6103      	str	r3, [r0, #16]
 8008aa2:	dd16      	ble.n	8008ad2 <__s2b+0x72>
 8008aa4:	f104 0909 	add.w	r9, r4, #9
 8008aa8:	46c8      	mov	r8, r9
 8008aaa:	442c      	add	r4, r5
 8008aac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	3b30      	subs	r3, #48	@ 0x30
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ff8c 	bl	80089d4 <__multadd>
 8008abc:	45a0      	cmp	r8, r4
 8008abe:	d1f5      	bne.n	8008aac <__s2b+0x4c>
 8008ac0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ac4:	444c      	add	r4, r9
 8008ac6:	1b2d      	subs	r5, r5, r4
 8008ac8:	1963      	adds	r3, r4, r5
 8008aca:	42bb      	cmp	r3, r7
 8008acc:	db04      	blt.n	8008ad8 <__s2b+0x78>
 8008ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	340a      	adds	r4, #10
 8008ad4:	2509      	movs	r5, #9
 8008ad6:	e7f6      	b.n	8008ac6 <__s2b+0x66>
 8008ad8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008adc:	4601      	mov	r1, r0
 8008ade:	3b30      	subs	r3, #48	@ 0x30
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff ff76 	bl	80089d4 <__multadd>
 8008ae8:	e7ee      	b.n	8008ac8 <__s2b+0x68>
 8008aea:	bf00      	nop
 8008aec:	0800bba9 	.word	0x0800bba9
 8008af0:	0800bbba 	.word	0x0800bbba

08008af4 <__hi0bits>:
 8008af4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008af8:	4603      	mov	r3, r0
 8008afa:	bf36      	itet	cc
 8008afc:	0403      	lslcc	r3, r0, #16
 8008afe:	2000      	movcs	r0, #0
 8008b00:	2010      	movcc	r0, #16
 8008b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b06:	bf3c      	itt	cc
 8008b08:	021b      	lslcc	r3, r3, #8
 8008b0a:	3008      	addcc	r0, #8
 8008b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b10:	bf3c      	itt	cc
 8008b12:	011b      	lslcc	r3, r3, #4
 8008b14:	3004      	addcc	r0, #4
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1a:	bf3c      	itt	cc
 8008b1c:	009b      	lslcc	r3, r3, #2
 8008b1e:	3002      	addcc	r0, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	db05      	blt.n	8008b30 <__hi0bits+0x3c>
 8008b24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b28:	f100 0001 	add.w	r0, r0, #1
 8008b2c:	bf08      	it	eq
 8008b2e:	2020      	moveq	r0, #32
 8008b30:	4770      	bx	lr

08008b32 <__lo0bits>:
 8008b32:	6803      	ldr	r3, [r0, #0]
 8008b34:	4602      	mov	r2, r0
 8008b36:	f013 0007 	ands.w	r0, r3, #7
 8008b3a:	d00b      	beq.n	8008b54 <__lo0bits+0x22>
 8008b3c:	07d9      	lsls	r1, r3, #31
 8008b3e:	d421      	bmi.n	8008b84 <__lo0bits+0x52>
 8008b40:	0798      	lsls	r0, r3, #30
 8008b42:	bf49      	itett	mi
 8008b44:	085b      	lsrmi	r3, r3, #1
 8008b46:	089b      	lsrpl	r3, r3, #2
 8008b48:	2001      	movmi	r0, #1
 8008b4a:	6013      	strmi	r3, [r2, #0]
 8008b4c:	bf5c      	itt	pl
 8008b4e:	6013      	strpl	r3, [r2, #0]
 8008b50:	2002      	movpl	r0, #2
 8008b52:	4770      	bx	lr
 8008b54:	b299      	uxth	r1, r3
 8008b56:	b909      	cbnz	r1, 8008b5c <__lo0bits+0x2a>
 8008b58:	0c1b      	lsrs	r3, r3, #16
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	b2d9      	uxtb	r1, r3
 8008b5e:	b909      	cbnz	r1, 8008b64 <__lo0bits+0x32>
 8008b60:	3008      	adds	r0, #8
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	0719      	lsls	r1, r3, #28
 8008b66:	bf04      	itt	eq
 8008b68:	091b      	lsreq	r3, r3, #4
 8008b6a:	3004      	addeq	r0, #4
 8008b6c:	0799      	lsls	r1, r3, #30
 8008b6e:	bf04      	itt	eq
 8008b70:	089b      	lsreq	r3, r3, #2
 8008b72:	3002      	addeq	r0, #2
 8008b74:	07d9      	lsls	r1, r3, #31
 8008b76:	d403      	bmi.n	8008b80 <__lo0bits+0x4e>
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	f100 0001 	add.w	r0, r0, #1
 8008b7e:	d003      	beq.n	8008b88 <__lo0bits+0x56>
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	4770      	bx	lr
 8008b84:	2000      	movs	r0, #0
 8008b86:	4770      	bx	lr
 8008b88:	2020      	movs	r0, #32
 8008b8a:	4770      	bx	lr

08008b8c <__i2b>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2101      	movs	r1, #1
 8008b92:	f7ff febd 	bl	8008910 <_Balloc>
 8008b96:	4602      	mov	r2, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <__i2b+0x1a>
 8008b9a:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <__i2b+0x24>)
 8008b9c:	4805      	ldr	r0, [pc, #20]	@ (8008bb4 <__i2b+0x28>)
 8008b9e:	f240 1145 	movw	r1, #325	@ 0x145
 8008ba2:	f7fe ff3f 	bl	8007a24 <__assert_func>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6144      	str	r4, [r0, #20]
 8008baa:	6103      	str	r3, [r0, #16]
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	bf00      	nop
 8008bb0:	0800bba9 	.word	0x0800bba9
 8008bb4:	0800bbba 	.word	0x0800bbba

08008bb8 <__multiply>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4617      	mov	r7, r2
 8008bbe:	690a      	ldr	r2, [r1, #16]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	bfa8      	it	ge
 8008bc6:	463b      	movge	r3, r7
 8008bc8:	4689      	mov	r9, r1
 8008bca:	bfa4      	itt	ge
 8008bcc:	460f      	movge	r7, r1
 8008bce:	4699      	movge	r9, r3
 8008bd0:	693d      	ldr	r5, [r7, #16]
 8008bd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	eb05 060a 	add.w	r6, r5, sl
 8008bde:	42b3      	cmp	r3, r6
 8008be0:	b085      	sub	sp, #20
 8008be2:	bfb8      	it	lt
 8008be4:	3101      	addlt	r1, #1
 8008be6:	f7ff fe93 	bl	8008910 <_Balloc>
 8008bea:	b930      	cbnz	r0, 8008bfa <__multiply+0x42>
 8008bec:	4602      	mov	r2, r0
 8008bee:	4b41      	ldr	r3, [pc, #260]	@ (8008cf4 <__multiply+0x13c>)
 8008bf0:	4841      	ldr	r0, [pc, #260]	@ (8008cf8 <__multiply+0x140>)
 8008bf2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bf6:	f7fe ff15 	bl	8007a24 <__assert_func>
 8008bfa:	f100 0414 	add.w	r4, r0, #20
 8008bfe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008c02:	4623      	mov	r3, r4
 8008c04:	2200      	movs	r2, #0
 8008c06:	4573      	cmp	r3, lr
 8008c08:	d320      	bcc.n	8008c4c <__multiply+0x94>
 8008c0a:	f107 0814 	add.w	r8, r7, #20
 8008c0e:	f109 0114 	add.w	r1, r9, #20
 8008c12:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008c16:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008c1a:	9302      	str	r3, [sp, #8]
 8008c1c:	1beb      	subs	r3, r5, r7
 8008c1e:	3b15      	subs	r3, #21
 8008c20:	f023 0303 	bic.w	r3, r3, #3
 8008c24:	3304      	adds	r3, #4
 8008c26:	3715      	adds	r7, #21
 8008c28:	42bd      	cmp	r5, r7
 8008c2a:	bf38      	it	cc
 8008c2c:	2304      	movcc	r3, #4
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	9103      	str	r1, [sp, #12]
 8008c34:	428b      	cmp	r3, r1
 8008c36:	d80c      	bhi.n	8008c52 <__multiply+0x9a>
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	dd03      	ble.n	8008c44 <__multiply+0x8c>
 8008c3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d055      	beq.n	8008cf0 <__multiply+0x138>
 8008c44:	6106      	str	r6, [r0, #16]
 8008c46:	b005      	add	sp, #20
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	f843 2b04 	str.w	r2, [r3], #4
 8008c50:	e7d9      	b.n	8008c06 <__multiply+0x4e>
 8008c52:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c56:	f1ba 0f00 	cmp.w	sl, #0
 8008c5a:	d01f      	beq.n	8008c9c <__multiply+0xe4>
 8008c5c:	46c4      	mov	ip, r8
 8008c5e:	46a1      	mov	r9, r4
 8008c60:	2700      	movs	r7, #0
 8008c62:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c66:	f8d9 3000 	ldr.w	r3, [r9]
 8008c6a:	fa1f fb82 	uxth.w	fp, r2
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c74:	443b      	add	r3, r7
 8008c76:	f8d9 7000 	ldr.w	r7, [r9]
 8008c7a:	0c12      	lsrs	r2, r2, #16
 8008c7c:	0c3f      	lsrs	r7, r7, #16
 8008c7e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8c:	4565      	cmp	r5, ip
 8008c8e:	f849 3b04 	str.w	r3, [r9], #4
 8008c92:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c96:	d8e4      	bhi.n	8008c62 <__multiply+0xaa>
 8008c98:	9b01      	ldr	r3, [sp, #4]
 8008c9a:	50e7      	str	r7, [r4, r3]
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ca2:	3104      	adds	r1, #4
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	d020      	beq.n	8008cec <__multiply+0x134>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	4647      	mov	r7, r8
 8008cae:	46a4      	mov	ip, r4
 8008cb0:	f04f 0a00 	mov.w	sl, #0
 8008cb4:	f8b7 b000 	ldrh.w	fp, [r7]
 8008cb8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008cbc:	fb09 220b 	mla	r2, r9, fp, r2
 8008cc0:	4452      	add	r2, sl
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc8:	f84c 3b04 	str.w	r3, [ip], #4
 8008ccc:	f857 3b04 	ldr.w	r3, [r7], #4
 8008cd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cd4:	f8bc 3000 	ldrh.w	r3, [ip]
 8008cd8:	fb09 330a 	mla	r3, r9, sl, r3
 8008cdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ce0:	42bd      	cmp	r5, r7
 8008ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ce6:	d8e5      	bhi.n	8008cb4 <__multiply+0xfc>
 8008ce8:	9a01      	ldr	r2, [sp, #4]
 8008cea:	50a3      	str	r3, [r4, r2]
 8008cec:	3404      	adds	r4, #4
 8008cee:	e79f      	b.n	8008c30 <__multiply+0x78>
 8008cf0:	3e01      	subs	r6, #1
 8008cf2:	e7a1      	b.n	8008c38 <__multiply+0x80>
 8008cf4:	0800bba9 	.word	0x0800bba9
 8008cf8:	0800bbba 	.word	0x0800bbba

08008cfc <__pow5mult>:
 8008cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	4615      	mov	r5, r2
 8008d02:	f012 0203 	ands.w	r2, r2, #3
 8008d06:	4607      	mov	r7, r0
 8008d08:	460e      	mov	r6, r1
 8008d0a:	d007      	beq.n	8008d1c <__pow5mult+0x20>
 8008d0c:	4c25      	ldr	r4, [pc, #148]	@ (8008da4 <__pow5mult+0xa8>)
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	2300      	movs	r3, #0
 8008d12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d16:	f7ff fe5d 	bl	80089d4 <__multadd>
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	10ad      	asrs	r5, r5, #2
 8008d1e:	d03d      	beq.n	8008d9c <__pow5mult+0xa0>
 8008d20:	69fc      	ldr	r4, [r7, #28]
 8008d22:	b97c      	cbnz	r4, 8008d44 <__pow5mult+0x48>
 8008d24:	2010      	movs	r0, #16
 8008d26:	f7ff fd3d 	bl	80087a4 <malloc>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	61f8      	str	r0, [r7, #28]
 8008d2e:	b928      	cbnz	r0, 8008d3c <__pow5mult+0x40>
 8008d30:	4b1d      	ldr	r3, [pc, #116]	@ (8008da8 <__pow5mult+0xac>)
 8008d32:	481e      	ldr	r0, [pc, #120]	@ (8008dac <__pow5mult+0xb0>)
 8008d34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d38:	f7fe fe74 	bl	8007a24 <__assert_func>
 8008d3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d40:	6004      	str	r4, [r0, #0]
 8008d42:	60c4      	str	r4, [r0, #12]
 8008d44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d4c:	b94c      	cbnz	r4, 8008d62 <__pow5mult+0x66>
 8008d4e:	f240 2171 	movw	r1, #625	@ 0x271
 8008d52:	4638      	mov	r0, r7
 8008d54:	f7ff ff1a 	bl	8008b8c <__i2b>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d5e:	4604      	mov	r4, r0
 8008d60:	6003      	str	r3, [r0, #0]
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	07eb      	lsls	r3, r5, #31
 8008d68:	d50a      	bpl.n	8008d80 <__pow5mult+0x84>
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f7ff ff22 	bl	8008bb8 <__multiply>
 8008d74:	4631      	mov	r1, r6
 8008d76:	4680      	mov	r8, r0
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff fe09 	bl	8008990 <_Bfree>
 8008d7e:	4646      	mov	r6, r8
 8008d80:	106d      	asrs	r5, r5, #1
 8008d82:	d00b      	beq.n	8008d9c <__pow5mult+0xa0>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	b938      	cbnz	r0, 8008d98 <__pow5mult+0x9c>
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff ff13 	bl	8008bb8 <__multiply>
 8008d92:	6020      	str	r0, [r4, #0]
 8008d94:	f8c0 9000 	str.w	r9, [r0]
 8008d98:	4604      	mov	r4, r0
 8008d9a:	e7e4      	b.n	8008d66 <__pow5mult+0x6a>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da2:	bf00      	nop
 8008da4:	0800bcac 	.word	0x0800bcac
 8008da8:	0800ba97 	.word	0x0800ba97
 8008dac:	0800bbba 	.word	0x0800bbba

08008db0 <__lshift>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	460c      	mov	r4, r1
 8008db6:	6849      	ldr	r1, [r1, #4]
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	4691      	mov	r9, r2
 8008dc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dc8:	f108 0601 	add.w	r6, r8, #1
 8008dcc:	42b3      	cmp	r3, r6
 8008dce:	db0b      	blt.n	8008de8 <__lshift+0x38>
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff fd9d 	bl	8008910 <_Balloc>
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	b948      	cbnz	r0, 8008dee <__lshift+0x3e>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4b28      	ldr	r3, [pc, #160]	@ (8008e80 <__lshift+0xd0>)
 8008dde:	4829      	ldr	r0, [pc, #164]	@ (8008e84 <__lshift+0xd4>)
 8008de0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008de4:	f7fe fe1e 	bl	8007a24 <__assert_func>
 8008de8:	3101      	adds	r1, #1
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	e7ee      	b.n	8008dcc <__lshift+0x1c>
 8008dee:	2300      	movs	r3, #0
 8008df0:	f100 0114 	add.w	r1, r0, #20
 8008df4:	f100 0210 	add.w	r2, r0, #16
 8008df8:	4618      	mov	r0, r3
 8008dfa:	4553      	cmp	r3, sl
 8008dfc:	db33      	blt.n	8008e66 <__lshift+0xb6>
 8008dfe:	6920      	ldr	r0, [r4, #16]
 8008e00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e04:	f104 0314 	add.w	r3, r4, #20
 8008e08:	f019 091f 	ands.w	r9, r9, #31
 8008e0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e14:	d02b      	beq.n	8008e6e <__lshift+0xbe>
 8008e16:	f1c9 0e20 	rsb	lr, r9, #32
 8008e1a:	468a      	mov	sl, r1
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	fa00 f009 	lsl.w	r0, r0, r9
 8008e24:	4310      	orrs	r0, r2
 8008e26:	f84a 0b04 	str.w	r0, [sl], #4
 8008e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2e:	459c      	cmp	ip, r3
 8008e30:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e34:	d8f3      	bhi.n	8008e1e <__lshift+0x6e>
 8008e36:	ebac 0304 	sub.w	r3, ip, r4
 8008e3a:	3b15      	subs	r3, #21
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3304      	adds	r3, #4
 8008e42:	f104 0015 	add.w	r0, r4, #21
 8008e46:	4560      	cmp	r0, ip
 8008e48:	bf88      	it	hi
 8008e4a:	2304      	movhi	r3, #4
 8008e4c:	50ca      	str	r2, [r1, r3]
 8008e4e:	b10a      	cbz	r2, 8008e54 <__lshift+0xa4>
 8008e50:	f108 0602 	add.w	r6, r8, #2
 8008e54:	3e01      	subs	r6, #1
 8008e56:	4638      	mov	r0, r7
 8008e58:	612e      	str	r6, [r5, #16]
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	f7ff fd98 	bl	8008990 <_Bfree>
 8008e60:	4628      	mov	r0, r5
 8008e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	e7c5      	b.n	8008dfa <__lshift+0x4a>
 8008e6e:	3904      	subs	r1, #4
 8008e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e74:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e78:	459c      	cmp	ip, r3
 8008e7a:	d8f9      	bhi.n	8008e70 <__lshift+0xc0>
 8008e7c:	e7ea      	b.n	8008e54 <__lshift+0xa4>
 8008e7e:	bf00      	nop
 8008e80:	0800bba9 	.word	0x0800bba9
 8008e84:	0800bbba 	.word	0x0800bbba

08008e88 <__mcmp>:
 8008e88:	690a      	ldr	r2, [r1, #16]
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6900      	ldr	r0, [r0, #16]
 8008e8e:	1a80      	subs	r0, r0, r2
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	d10e      	bne.n	8008eb2 <__mcmp+0x2a>
 8008e94:	3314      	adds	r3, #20
 8008e96:	3114      	adds	r1, #20
 8008e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ea8:	4295      	cmp	r5, r2
 8008eaa:	d003      	beq.n	8008eb4 <__mcmp+0x2c>
 8008eac:	d205      	bcs.n	8008eba <__mcmp+0x32>
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb2:	bd30      	pop	{r4, r5, pc}
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d3f3      	bcc.n	8008ea0 <__mcmp+0x18>
 8008eb8:	e7fb      	b.n	8008eb2 <__mcmp+0x2a>
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7f9      	b.n	8008eb2 <__mcmp+0x2a>
	...

08008ec0 <__mdiff>:
 8008ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4648      	mov	r0, r9
 8008ecc:	4614      	mov	r4, r2
 8008ece:	f7ff ffdb 	bl	8008e88 <__mcmp>
 8008ed2:	1e05      	subs	r5, r0, #0
 8008ed4:	d112      	bne.n	8008efc <__mdiff+0x3c>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff fd19 	bl	8008910 <_Balloc>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	b928      	cbnz	r0, 8008eee <__mdiff+0x2e>
 8008ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe0 <__mdiff+0x120>)
 8008ee4:	f240 2137 	movw	r1, #567	@ 0x237
 8008ee8:	483e      	ldr	r0, [pc, #248]	@ (8008fe4 <__mdiff+0x124>)
 8008eea:	f7fe fd9b 	bl	8007a24 <__assert_func>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	b003      	add	sp, #12
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	bfbc      	itt	lt
 8008efe:	464b      	movlt	r3, r9
 8008f00:	46a1      	movlt	r9, r4
 8008f02:	4630      	mov	r0, r6
 8008f04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f08:	bfba      	itte	lt
 8008f0a:	461c      	movlt	r4, r3
 8008f0c:	2501      	movlt	r5, #1
 8008f0e:	2500      	movge	r5, #0
 8008f10:	f7ff fcfe 	bl	8008910 <_Balloc>
 8008f14:	4602      	mov	r2, r0
 8008f16:	b918      	cbnz	r0, 8008f20 <__mdiff+0x60>
 8008f18:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <__mdiff+0x120>)
 8008f1a:	f240 2145 	movw	r1, #581	@ 0x245
 8008f1e:	e7e3      	b.n	8008ee8 <__mdiff+0x28>
 8008f20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f24:	6926      	ldr	r6, [r4, #16]
 8008f26:	60c5      	str	r5, [r0, #12]
 8008f28:	f109 0310 	add.w	r3, r9, #16
 8008f2c:	f109 0514 	add.w	r5, r9, #20
 8008f30:	f104 0e14 	add.w	lr, r4, #20
 8008f34:	f100 0b14 	add.w	fp, r0, #20
 8008f38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	46d9      	mov	r9, fp
 8008f44:	f04f 0c00 	mov.w	ip, #0
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	fa1f f38a 	uxth.w	r3, sl
 8008f58:	4619      	mov	r1, r3
 8008f5a:	b283      	uxth	r3, r0
 8008f5c:	1acb      	subs	r3, r1, r3
 8008f5e:	0c00      	lsrs	r0, r0, #16
 8008f60:	4463      	add	r3, ip
 8008f62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f70:	4576      	cmp	r6, lr
 8008f72:	f849 3b04 	str.w	r3, [r9], #4
 8008f76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f7a:	d8e5      	bhi.n	8008f48 <__mdiff+0x88>
 8008f7c:	1b33      	subs	r3, r6, r4
 8008f7e:	3b15      	subs	r3, #21
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	3415      	adds	r4, #21
 8008f86:	3304      	adds	r3, #4
 8008f88:	42a6      	cmp	r6, r4
 8008f8a:	bf38      	it	cc
 8008f8c:	2304      	movcc	r3, #4
 8008f8e:	441d      	add	r5, r3
 8008f90:	445b      	add	r3, fp
 8008f92:	461e      	mov	r6, r3
 8008f94:	462c      	mov	r4, r5
 8008f96:	4544      	cmp	r4, r8
 8008f98:	d30e      	bcc.n	8008fb8 <__mdiff+0xf8>
 8008f9a:	f108 0103 	add.w	r1, r8, #3
 8008f9e:	1b49      	subs	r1, r1, r5
 8008fa0:	f021 0103 	bic.w	r1, r1, #3
 8008fa4:	3d03      	subs	r5, #3
 8008fa6:	45a8      	cmp	r8, r5
 8008fa8:	bf38      	it	cc
 8008faa:	2100      	movcc	r1, #0
 8008fac:	440b      	add	r3, r1
 8008fae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fb2:	b191      	cbz	r1, 8008fda <__mdiff+0x11a>
 8008fb4:	6117      	str	r7, [r2, #16]
 8008fb6:	e79d      	b.n	8008ef4 <__mdiff+0x34>
 8008fb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fbc:	46e6      	mov	lr, ip
 8008fbe:	0c08      	lsrs	r0, r1, #16
 8008fc0:	fa1c fc81 	uxtah	ip, ip, r1
 8008fc4:	4471      	add	r1, lr
 8008fc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008fca:	b289      	uxth	r1, r1
 8008fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fd0:	f846 1b04 	str.w	r1, [r6], #4
 8008fd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fd8:	e7dd      	b.n	8008f96 <__mdiff+0xd6>
 8008fda:	3f01      	subs	r7, #1
 8008fdc:	e7e7      	b.n	8008fae <__mdiff+0xee>
 8008fde:	bf00      	nop
 8008fe0:	0800bba9 	.word	0x0800bba9
 8008fe4:	0800bbba 	.word	0x0800bbba

08008fe8 <__ulp>:
 8008fe8:	b082      	sub	sp, #8
 8008fea:	ed8d 0b00 	vstr	d0, [sp]
 8008fee:	9a01      	ldr	r2, [sp, #4]
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8009030 <__ulp+0x48>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc08      	bgt.n	800900e <__ulp+0x26>
 8008ffc:	425b      	negs	r3, r3
 8008ffe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009002:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009006:	da04      	bge.n	8009012 <__ulp+0x2a>
 8009008:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800900c:	4113      	asrs	r3, r2
 800900e:	2200      	movs	r2, #0
 8009010:	e008      	b.n	8009024 <__ulp+0x3c>
 8009012:	f1a2 0314 	sub.w	r3, r2, #20
 8009016:	2b1e      	cmp	r3, #30
 8009018:	bfda      	itte	le
 800901a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800901e:	40da      	lsrle	r2, r3
 8009020:	2201      	movgt	r2, #1
 8009022:	2300      	movs	r3, #0
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	ec41 0b10 	vmov	d0, r0, r1
 800902c:	b002      	add	sp, #8
 800902e:	4770      	bx	lr
 8009030:	7ff00000 	.word	0x7ff00000

08009034 <__b2d>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	6906      	ldr	r6, [r0, #16]
 800903a:	f100 0814 	add.w	r8, r0, #20
 800903e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009042:	1f37      	subs	r7, r6, #4
 8009044:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009048:	4610      	mov	r0, r2
 800904a:	f7ff fd53 	bl	8008af4 <__hi0bits>
 800904e:	f1c0 0320 	rsb	r3, r0, #32
 8009052:	280a      	cmp	r0, #10
 8009054:	600b      	str	r3, [r1, #0]
 8009056:	491b      	ldr	r1, [pc, #108]	@ (80090c4 <__b2d+0x90>)
 8009058:	dc15      	bgt.n	8009086 <__b2d+0x52>
 800905a:	f1c0 0c0b 	rsb	ip, r0, #11
 800905e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009062:	45b8      	cmp	r8, r7
 8009064:	ea43 0501 	orr.w	r5, r3, r1
 8009068:	bf34      	ite	cc
 800906a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800906e:	2300      	movcs	r3, #0
 8009070:	3015      	adds	r0, #21
 8009072:	fa02 f000 	lsl.w	r0, r2, r0
 8009076:	fa23 f30c 	lsr.w	r3, r3, ip
 800907a:	4303      	orrs	r3, r0
 800907c:	461c      	mov	r4, r3
 800907e:	ec45 4b10 	vmov	d0, r4, r5
 8009082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009086:	45b8      	cmp	r8, r7
 8009088:	bf3a      	itte	cc
 800908a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800908e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009092:	2300      	movcs	r3, #0
 8009094:	380b      	subs	r0, #11
 8009096:	d012      	beq.n	80090be <__b2d+0x8a>
 8009098:	f1c0 0120 	rsb	r1, r0, #32
 800909c:	fa23 f401 	lsr.w	r4, r3, r1
 80090a0:	4082      	lsls	r2, r0
 80090a2:	4322      	orrs	r2, r4
 80090a4:	4547      	cmp	r7, r8
 80090a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80090aa:	bf8c      	ite	hi
 80090ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80090b0:	2200      	movls	r2, #0
 80090b2:	4083      	lsls	r3, r0
 80090b4:	40ca      	lsrs	r2, r1
 80090b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80090ba:	4313      	orrs	r3, r2
 80090bc:	e7de      	b.n	800907c <__b2d+0x48>
 80090be:	ea42 0501 	orr.w	r5, r2, r1
 80090c2:	e7db      	b.n	800907c <__b2d+0x48>
 80090c4:	3ff00000 	.word	0x3ff00000

080090c8 <__d2b>:
 80090c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	460f      	mov	r7, r1
 80090ce:	2101      	movs	r1, #1
 80090d0:	ec59 8b10 	vmov	r8, r9, d0
 80090d4:	4616      	mov	r6, r2
 80090d6:	f7ff fc1b 	bl	8008910 <_Balloc>
 80090da:	4604      	mov	r4, r0
 80090dc:	b930      	cbnz	r0, 80090ec <__d2b+0x24>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b23      	ldr	r3, [pc, #140]	@ (8009170 <__d2b+0xa8>)
 80090e2:	4824      	ldr	r0, [pc, #144]	@ (8009174 <__d2b+0xac>)
 80090e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80090e8:	f7fe fc9c 	bl	8007a24 <__assert_func>
 80090ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090f4:	b10d      	cbz	r5, 80090fa <__d2b+0x32>
 80090f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	f1b8 0300 	subs.w	r3, r8, #0
 8009100:	d023      	beq.n	800914a <__d2b+0x82>
 8009102:	4668      	mov	r0, sp
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	f7ff fd14 	bl	8008b32 <__lo0bits>
 800910a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800910e:	b1d0      	cbz	r0, 8009146 <__d2b+0x7e>
 8009110:	f1c0 0320 	rsb	r3, r0, #32
 8009114:	fa02 f303 	lsl.w	r3, r2, r3
 8009118:	430b      	orrs	r3, r1
 800911a:	40c2      	lsrs	r2, r0
 800911c:	6163      	str	r3, [r4, #20]
 800911e:	9201      	str	r2, [sp, #4]
 8009120:	9b01      	ldr	r3, [sp, #4]
 8009122:	61a3      	str	r3, [r4, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	bf0c      	ite	eq
 8009128:	2201      	moveq	r2, #1
 800912a:	2202      	movne	r2, #2
 800912c:	6122      	str	r2, [r4, #16]
 800912e:	b1a5      	cbz	r5, 800915a <__d2b+0x92>
 8009130:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009134:	4405      	add	r5, r0
 8009136:	603d      	str	r5, [r7, #0]
 8009138:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	4620      	mov	r0, r4
 8009140:	b003      	add	sp, #12
 8009142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009146:	6161      	str	r1, [r4, #20]
 8009148:	e7ea      	b.n	8009120 <__d2b+0x58>
 800914a:	a801      	add	r0, sp, #4
 800914c:	f7ff fcf1 	bl	8008b32 <__lo0bits>
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	6163      	str	r3, [r4, #20]
 8009154:	3020      	adds	r0, #32
 8009156:	2201      	movs	r2, #1
 8009158:	e7e8      	b.n	800912c <__d2b+0x64>
 800915a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800915e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009162:	6038      	str	r0, [r7, #0]
 8009164:	6918      	ldr	r0, [r3, #16]
 8009166:	f7ff fcc5 	bl	8008af4 <__hi0bits>
 800916a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800916e:	e7e5      	b.n	800913c <__d2b+0x74>
 8009170:	0800bba9 	.word	0x0800bba9
 8009174:	0800bbba 	.word	0x0800bbba

08009178 <__ratio>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	b085      	sub	sp, #20
 800917e:	e9cd 1000 	strd	r1, r0, [sp]
 8009182:	a902      	add	r1, sp, #8
 8009184:	f7ff ff56 	bl	8009034 <__b2d>
 8009188:	9800      	ldr	r0, [sp, #0]
 800918a:	a903      	add	r1, sp, #12
 800918c:	ec55 4b10 	vmov	r4, r5, d0
 8009190:	f7ff ff50 	bl	8009034 <__b2d>
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	6919      	ldr	r1, [r3, #16]
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	1ac9      	subs	r1, r1, r3
 800919e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	ec5b ab10 	vmov	sl, fp, d0
 80091a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfce      	itee	gt
 80091b0:	462a      	movgt	r2, r5
 80091b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091b6:	465a      	movle	r2, fp
 80091b8:	462f      	mov	r7, r5
 80091ba:	46d9      	mov	r9, fp
 80091bc:	bfcc      	ite	gt
 80091be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80091c6:	464b      	mov	r3, r9
 80091c8:	4652      	mov	r2, sl
 80091ca:	4620      	mov	r0, r4
 80091cc:	4639      	mov	r1, r7
 80091ce:	f7f7 fb55 	bl	800087c <__aeabi_ddiv>
 80091d2:	ec41 0b10 	vmov	d0, r0, r1
 80091d6:	b005      	add	sp, #20
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091dc <__copybits>:
 80091dc:	3901      	subs	r1, #1
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	1149      	asrs	r1, r1, #5
 80091e2:	6914      	ldr	r4, [r2, #16]
 80091e4:	3101      	adds	r1, #1
 80091e6:	f102 0314 	add.w	r3, r2, #20
 80091ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091f2:	1f05      	subs	r5, r0, #4
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d30c      	bcc.n	8009212 <__copybits+0x36>
 80091f8:	1aa3      	subs	r3, r4, r2
 80091fa:	3b11      	subs	r3, #17
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	3211      	adds	r2, #17
 8009202:	42a2      	cmp	r2, r4
 8009204:	bf88      	it	hi
 8009206:	2300      	movhi	r3, #0
 8009208:	4418      	add	r0, r3
 800920a:	2300      	movs	r3, #0
 800920c:	4288      	cmp	r0, r1
 800920e:	d305      	bcc.n	800921c <__copybits+0x40>
 8009210:	bd70      	pop	{r4, r5, r6, pc}
 8009212:	f853 6b04 	ldr.w	r6, [r3], #4
 8009216:	f845 6f04 	str.w	r6, [r5, #4]!
 800921a:	e7eb      	b.n	80091f4 <__copybits+0x18>
 800921c:	f840 3b04 	str.w	r3, [r0], #4
 8009220:	e7f4      	b.n	800920c <__copybits+0x30>

08009222 <__any_on>:
 8009222:	f100 0214 	add.w	r2, r0, #20
 8009226:	6900      	ldr	r0, [r0, #16]
 8009228:	114b      	asrs	r3, r1, #5
 800922a:	4298      	cmp	r0, r3
 800922c:	b510      	push	{r4, lr}
 800922e:	db11      	blt.n	8009254 <__any_on+0x32>
 8009230:	dd0a      	ble.n	8009248 <__any_on+0x26>
 8009232:	f011 011f 	ands.w	r1, r1, #31
 8009236:	d007      	beq.n	8009248 <__any_on+0x26>
 8009238:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800923c:	fa24 f001 	lsr.w	r0, r4, r1
 8009240:	fa00 f101 	lsl.w	r1, r0, r1
 8009244:	428c      	cmp	r4, r1
 8009246:	d10b      	bne.n	8009260 <__any_on+0x3e>
 8009248:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800924c:	4293      	cmp	r3, r2
 800924e:	d803      	bhi.n	8009258 <__any_on+0x36>
 8009250:	2000      	movs	r0, #0
 8009252:	bd10      	pop	{r4, pc}
 8009254:	4603      	mov	r3, r0
 8009256:	e7f7      	b.n	8009248 <__any_on+0x26>
 8009258:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800925c:	2900      	cmp	r1, #0
 800925e:	d0f5      	beq.n	800924c <__any_on+0x2a>
 8009260:	2001      	movs	r0, #1
 8009262:	e7f6      	b.n	8009252 <__any_on+0x30>

08009264 <sulp>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	ec45 4b10 	vmov	d0, r4, r5
 800926e:	4616      	mov	r6, r2
 8009270:	f7ff feba 	bl	8008fe8 <__ulp>
 8009274:	ec51 0b10 	vmov	r0, r1, d0
 8009278:	b17e      	cbz	r6, 800929a <sulp+0x36>
 800927a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800927e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009282:	2b00      	cmp	r3, #0
 8009284:	dd09      	ble.n	800929a <sulp+0x36>
 8009286:	051b      	lsls	r3, r3, #20
 8009288:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800928c:	2400      	movs	r4, #0
 800928e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009292:	4622      	mov	r2, r4
 8009294:	462b      	mov	r3, r5
 8009296:	f7f7 f9c7 	bl	8000628 <__aeabi_dmul>
 800929a:	ec41 0b10 	vmov	d0, r0, r1
 800929e:	bd70      	pop	{r4, r5, r6, pc}

080092a0 <_strtod_l>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b09f      	sub	sp, #124	@ 0x7c
 80092a6:	460c      	mov	r4, r1
 80092a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092aa:	2200      	movs	r2, #0
 80092ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80092ae:	9005      	str	r0, [sp, #20]
 80092b0:	f04f 0a00 	mov.w	sl, #0
 80092b4:	f04f 0b00 	mov.w	fp, #0
 80092b8:	460a      	mov	r2, r1
 80092ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80092bc:	7811      	ldrb	r1, [r2, #0]
 80092be:	292b      	cmp	r1, #43	@ 0x2b
 80092c0:	d04a      	beq.n	8009358 <_strtod_l+0xb8>
 80092c2:	d838      	bhi.n	8009336 <_strtod_l+0x96>
 80092c4:	290d      	cmp	r1, #13
 80092c6:	d832      	bhi.n	800932e <_strtod_l+0x8e>
 80092c8:	2908      	cmp	r1, #8
 80092ca:	d832      	bhi.n	8009332 <_strtod_l+0x92>
 80092cc:	2900      	cmp	r1, #0
 80092ce:	d03b      	beq.n	8009348 <_strtod_l+0xa8>
 80092d0:	2200      	movs	r2, #0
 80092d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80092d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80092d6:	782a      	ldrb	r2, [r5, #0]
 80092d8:	2a30      	cmp	r2, #48	@ 0x30
 80092da:	f040 80b2 	bne.w	8009442 <_strtod_l+0x1a2>
 80092de:	786a      	ldrb	r2, [r5, #1]
 80092e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092e4:	2a58      	cmp	r2, #88	@ 0x58
 80092e6:	d16e      	bne.n	80093c6 <_strtod_l+0x126>
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	4a8f      	ldr	r2, [pc, #572]	@ (8009530 <_strtod_l+0x290>)
 80092f4:	9805      	ldr	r0, [sp, #20]
 80092f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80092f8:	a919      	add	r1, sp, #100	@ 0x64
 80092fa:	f001 fca7 	bl	800ac4c <__gethex>
 80092fe:	f010 060f 	ands.w	r6, r0, #15
 8009302:	4604      	mov	r4, r0
 8009304:	d005      	beq.n	8009312 <_strtod_l+0x72>
 8009306:	2e06      	cmp	r6, #6
 8009308:	d128      	bne.n	800935c <_strtod_l+0xbc>
 800930a:	3501      	adds	r5, #1
 800930c:	2300      	movs	r3, #0
 800930e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009310:	930e      	str	r3, [sp, #56]	@ 0x38
 8009312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f040 858e 	bne.w	8009e36 <_strtod_l+0xb96>
 800931a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931c:	b1cb      	cbz	r3, 8009352 <_strtod_l+0xb2>
 800931e:	4652      	mov	r2, sl
 8009320:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009324:	ec43 2b10 	vmov	d0, r2, r3
 8009328:	b01f      	add	sp, #124	@ 0x7c
 800932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932e:	2920      	cmp	r1, #32
 8009330:	d1ce      	bne.n	80092d0 <_strtod_l+0x30>
 8009332:	3201      	adds	r2, #1
 8009334:	e7c1      	b.n	80092ba <_strtod_l+0x1a>
 8009336:	292d      	cmp	r1, #45	@ 0x2d
 8009338:	d1ca      	bne.n	80092d0 <_strtod_l+0x30>
 800933a:	2101      	movs	r1, #1
 800933c:	910e      	str	r1, [sp, #56]	@ 0x38
 800933e:	1c51      	adds	r1, r2, #1
 8009340:	9119      	str	r1, [sp, #100]	@ 0x64
 8009342:	7852      	ldrb	r2, [r2, #1]
 8009344:	2a00      	cmp	r2, #0
 8009346:	d1c5      	bne.n	80092d4 <_strtod_l+0x34>
 8009348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800934a:	9419      	str	r4, [sp, #100]	@ 0x64
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8570 	bne.w	8009e32 <_strtod_l+0xb92>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	e7e5      	b.n	8009324 <_strtod_l+0x84>
 8009358:	2100      	movs	r1, #0
 800935a:	e7ef      	b.n	800933c <_strtod_l+0x9c>
 800935c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800935e:	b13a      	cbz	r2, 8009370 <_strtod_l+0xd0>
 8009360:	2135      	movs	r1, #53	@ 0x35
 8009362:	a81c      	add	r0, sp, #112	@ 0x70
 8009364:	f7ff ff3a 	bl	80091dc <__copybits>
 8009368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800936a:	9805      	ldr	r0, [sp, #20]
 800936c:	f7ff fb10 	bl	8008990 <_Bfree>
 8009370:	3e01      	subs	r6, #1
 8009372:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009374:	2e04      	cmp	r6, #4
 8009376:	d806      	bhi.n	8009386 <_strtod_l+0xe6>
 8009378:	e8df f006 	tbb	[pc, r6]
 800937c:	201d0314 	.word	0x201d0314
 8009380:	14          	.byte	0x14
 8009381:	00          	.byte	0x00
 8009382:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009386:	05e1      	lsls	r1, r4, #23
 8009388:	bf48      	it	mi
 800938a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800938e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009392:	0d1b      	lsrs	r3, r3, #20
 8009394:	051b      	lsls	r3, r3, #20
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1bb      	bne.n	8009312 <_strtod_l+0x72>
 800939a:	f7fe fb01 	bl	80079a0 <__errno>
 800939e:	2322      	movs	r3, #34	@ 0x22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	e7b6      	b.n	8009312 <_strtod_l+0x72>
 80093a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093b4:	e7e7      	b.n	8009386 <_strtod_l+0xe6>
 80093b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009538 <_strtod_l+0x298>
 80093ba:	e7e4      	b.n	8009386 <_strtod_l+0xe6>
 80093bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80093c0:	f04f 3aff 	mov.w	sl, #4294967295
 80093c4:	e7df      	b.n	8009386 <_strtod_l+0xe6>
 80093c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b30      	cmp	r3, #48	@ 0x30
 80093d0:	d0f9      	beq.n	80093c6 <_strtod_l+0x126>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d09d      	beq.n	8009312 <_strtod_l+0x72>
 80093d6:	2301      	movs	r3, #1
 80093d8:	2700      	movs	r7, #0
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093de:	930c      	str	r3, [sp, #48]	@ 0x30
 80093e0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80093e2:	46b9      	mov	r9, r7
 80093e4:	220a      	movs	r2, #10
 80093e6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80093e8:	7805      	ldrb	r5, [r0, #0]
 80093ea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80093ee:	b2d9      	uxtb	r1, r3
 80093f0:	2909      	cmp	r1, #9
 80093f2:	d928      	bls.n	8009446 <_strtod_l+0x1a6>
 80093f4:	494f      	ldr	r1, [pc, #316]	@ (8009534 <_strtod_l+0x294>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	f001 fb79 	bl	800aaee <strncmp>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d032      	beq.n	8009466 <_strtod_l+0x1c6>
 8009400:	2000      	movs	r0, #0
 8009402:	462a      	mov	r2, r5
 8009404:	900a      	str	r0, [sp, #40]	@ 0x28
 8009406:	464d      	mov	r5, r9
 8009408:	4603      	mov	r3, r0
 800940a:	2a65      	cmp	r2, #101	@ 0x65
 800940c:	d001      	beq.n	8009412 <_strtod_l+0x172>
 800940e:	2a45      	cmp	r2, #69	@ 0x45
 8009410:	d114      	bne.n	800943c <_strtod_l+0x19c>
 8009412:	b91d      	cbnz	r5, 800941c <_strtod_l+0x17c>
 8009414:	9a08      	ldr	r2, [sp, #32]
 8009416:	4302      	orrs	r2, r0
 8009418:	d096      	beq.n	8009348 <_strtod_l+0xa8>
 800941a:	2500      	movs	r5, #0
 800941c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800941e:	1c62      	adds	r2, r4, #1
 8009420:	9219      	str	r2, [sp, #100]	@ 0x64
 8009422:	7862      	ldrb	r2, [r4, #1]
 8009424:	2a2b      	cmp	r2, #43	@ 0x2b
 8009426:	d07a      	beq.n	800951e <_strtod_l+0x27e>
 8009428:	2a2d      	cmp	r2, #45	@ 0x2d
 800942a:	d07e      	beq.n	800952a <_strtod_l+0x28a>
 800942c:	f04f 0c00 	mov.w	ip, #0
 8009430:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009434:	2909      	cmp	r1, #9
 8009436:	f240 8085 	bls.w	8009544 <_strtod_l+0x2a4>
 800943a:	9419      	str	r4, [sp, #100]	@ 0x64
 800943c:	f04f 0800 	mov.w	r8, #0
 8009440:	e0a5      	b.n	800958e <_strtod_l+0x2ee>
 8009442:	2300      	movs	r3, #0
 8009444:	e7c8      	b.n	80093d8 <_strtod_l+0x138>
 8009446:	f1b9 0f08 	cmp.w	r9, #8
 800944a:	bfd8      	it	le
 800944c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800944e:	f100 0001 	add.w	r0, r0, #1
 8009452:	bfda      	itte	le
 8009454:	fb02 3301 	mlale	r3, r2, r1, r3
 8009458:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800945a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800945e:	f109 0901 	add.w	r9, r9, #1
 8009462:	9019      	str	r0, [sp, #100]	@ 0x64
 8009464:	e7bf      	b.n	80093e6 <_strtod_l+0x146>
 8009466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	9219      	str	r2, [sp, #100]	@ 0x64
 800946c:	785a      	ldrb	r2, [r3, #1]
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d03b      	beq.n	80094ec <_strtod_l+0x24c>
 8009474:	900a      	str	r0, [sp, #40]	@ 0x28
 8009476:	464d      	mov	r5, r9
 8009478:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800947c:	2b09      	cmp	r3, #9
 800947e:	d912      	bls.n	80094a6 <_strtod_l+0x206>
 8009480:	2301      	movs	r3, #1
 8009482:	e7c2      	b.n	800940a <_strtod_l+0x16a>
 8009484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	9219      	str	r2, [sp, #100]	@ 0x64
 800948a:	785a      	ldrb	r2, [r3, #1]
 800948c:	3001      	adds	r0, #1
 800948e:	2a30      	cmp	r2, #48	@ 0x30
 8009490:	d0f8      	beq.n	8009484 <_strtod_l+0x1e4>
 8009492:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009496:	2b08      	cmp	r3, #8
 8009498:	f200 84d2 	bhi.w	8009e40 <_strtod_l+0xba0>
 800949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949e:	900a      	str	r0, [sp, #40]	@ 0x28
 80094a0:	2000      	movs	r0, #0
 80094a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80094a4:	4605      	mov	r5, r0
 80094a6:	3a30      	subs	r2, #48	@ 0x30
 80094a8:	f100 0301 	add.w	r3, r0, #1
 80094ac:	d018      	beq.n	80094e0 <_strtod_l+0x240>
 80094ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094b0:	4419      	add	r1, r3
 80094b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80094b4:	462e      	mov	r6, r5
 80094b6:	f04f 0e0a 	mov.w	lr, #10
 80094ba:	1c71      	adds	r1, r6, #1
 80094bc:	eba1 0c05 	sub.w	ip, r1, r5
 80094c0:	4563      	cmp	r3, ip
 80094c2:	dc15      	bgt.n	80094f0 <_strtod_l+0x250>
 80094c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80094c8:	182b      	adds	r3, r5, r0
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	f105 0501 	add.w	r5, r5, #1
 80094d0:	4405      	add	r5, r0
 80094d2:	dc1a      	bgt.n	800950a <_strtod_l+0x26a>
 80094d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094d6:	230a      	movs	r3, #10
 80094d8:	fb03 2301 	mla	r3, r3, r1, r2
 80094dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094de:	2300      	movs	r3, #0
 80094e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094e2:	1c51      	adds	r1, r2, #1
 80094e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80094e6:	7852      	ldrb	r2, [r2, #1]
 80094e8:	4618      	mov	r0, r3
 80094ea:	e7c5      	b.n	8009478 <_strtod_l+0x1d8>
 80094ec:	4648      	mov	r0, r9
 80094ee:	e7ce      	b.n	800948e <_strtod_l+0x1ee>
 80094f0:	2e08      	cmp	r6, #8
 80094f2:	dc05      	bgt.n	8009500 <_strtod_l+0x260>
 80094f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80094f6:	fb0e f606 	mul.w	r6, lr, r6
 80094fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80094fc:	460e      	mov	r6, r1
 80094fe:	e7dc      	b.n	80094ba <_strtod_l+0x21a>
 8009500:	2910      	cmp	r1, #16
 8009502:	bfd8      	it	le
 8009504:	fb0e f707 	mulle.w	r7, lr, r7
 8009508:	e7f8      	b.n	80094fc <_strtod_l+0x25c>
 800950a:	2b0f      	cmp	r3, #15
 800950c:	bfdc      	itt	le
 800950e:	230a      	movle	r3, #10
 8009510:	fb03 2707 	mlale	r7, r3, r7, r2
 8009514:	e7e3      	b.n	80094de <_strtod_l+0x23e>
 8009516:	2300      	movs	r3, #0
 8009518:	930a      	str	r3, [sp, #40]	@ 0x28
 800951a:	2301      	movs	r3, #1
 800951c:	e77a      	b.n	8009414 <_strtod_l+0x174>
 800951e:	f04f 0c00 	mov.w	ip, #0
 8009522:	1ca2      	adds	r2, r4, #2
 8009524:	9219      	str	r2, [sp, #100]	@ 0x64
 8009526:	78a2      	ldrb	r2, [r4, #2]
 8009528:	e782      	b.n	8009430 <_strtod_l+0x190>
 800952a:	f04f 0c01 	mov.w	ip, #1
 800952e:	e7f8      	b.n	8009522 <_strtod_l+0x282>
 8009530:	0800bdbc 	.word	0x0800bdbc
 8009534:	0800bc13 	.word	0x0800bc13
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800953e:	1c51      	adds	r1, r2, #1
 8009540:	9119      	str	r1, [sp, #100]	@ 0x64
 8009542:	7852      	ldrb	r2, [r2, #1]
 8009544:	2a30      	cmp	r2, #48	@ 0x30
 8009546:	d0f9      	beq.n	800953c <_strtod_l+0x29c>
 8009548:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800954c:	2908      	cmp	r1, #8
 800954e:	f63f af75 	bhi.w	800943c <_strtod_l+0x19c>
 8009552:	3a30      	subs	r2, #48	@ 0x30
 8009554:	9209      	str	r2, [sp, #36]	@ 0x24
 8009556:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009558:	920f      	str	r2, [sp, #60]	@ 0x3c
 800955a:	f04f 080a 	mov.w	r8, #10
 800955e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009560:	1c56      	adds	r6, r2, #1
 8009562:	9619      	str	r6, [sp, #100]	@ 0x64
 8009564:	7852      	ldrb	r2, [r2, #1]
 8009566:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800956a:	f1be 0f09 	cmp.w	lr, #9
 800956e:	d939      	bls.n	80095e4 <_strtod_l+0x344>
 8009570:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009572:	1a76      	subs	r6, r6, r1
 8009574:	2e08      	cmp	r6, #8
 8009576:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800957a:	dc03      	bgt.n	8009584 <_strtod_l+0x2e4>
 800957c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800957e:	4588      	cmp	r8, r1
 8009580:	bfa8      	it	ge
 8009582:	4688      	movge	r8, r1
 8009584:	f1bc 0f00 	cmp.w	ip, #0
 8009588:	d001      	beq.n	800958e <_strtod_l+0x2ee>
 800958a:	f1c8 0800 	rsb	r8, r8, #0
 800958e:	2d00      	cmp	r5, #0
 8009590:	d14e      	bne.n	8009630 <_strtod_l+0x390>
 8009592:	9908      	ldr	r1, [sp, #32]
 8009594:	4308      	orrs	r0, r1
 8009596:	f47f aebc 	bne.w	8009312 <_strtod_l+0x72>
 800959a:	2b00      	cmp	r3, #0
 800959c:	f47f aed4 	bne.w	8009348 <_strtod_l+0xa8>
 80095a0:	2a69      	cmp	r2, #105	@ 0x69
 80095a2:	d028      	beq.n	80095f6 <_strtod_l+0x356>
 80095a4:	dc25      	bgt.n	80095f2 <_strtod_l+0x352>
 80095a6:	2a49      	cmp	r2, #73	@ 0x49
 80095a8:	d025      	beq.n	80095f6 <_strtod_l+0x356>
 80095aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80095ac:	f47f aecc 	bne.w	8009348 <_strtod_l+0xa8>
 80095b0:	499a      	ldr	r1, [pc, #616]	@ (800981c <_strtod_l+0x57c>)
 80095b2:	a819      	add	r0, sp, #100	@ 0x64
 80095b4:	f001 fd6c 	bl	800b090 <__match>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f43f aec5 	beq.w	8009348 <_strtod_l+0xa8>
 80095be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b28      	cmp	r3, #40	@ 0x28
 80095c4:	d12e      	bne.n	8009624 <_strtod_l+0x384>
 80095c6:	4996      	ldr	r1, [pc, #600]	@ (8009820 <_strtod_l+0x580>)
 80095c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80095ca:	a819      	add	r0, sp, #100	@ 0x64
 80095cc:	f001 fd74 	bl	800b0b8 <__hexnan>
 80095d0:	2805      	cmp	r0, #5
 80095d2:	d127      	bne.n	8009624 <_strtod_l+0x384>
 80095d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80095da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80095de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80095e2:	e696      	b.n	8009312 <_strtod_l+0x72>
 80095e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095e6:	fb08 2101 	mla	r1, r8, r1, r2
 80095ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80095ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80095f0:	e7b5      	b.n	800955e <_strtod_l+0x2be>
 80095f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80095f4:	e7da      	b.n	80095ac <_strtod_l+0x30c>
 80095f6:	498b      	ldr	r1, [pc, #556]	@ (8009824 <_strtod_l+0x584>)
 80095f8:	a819      	add	r0, sp, #100	@ 0x64
 80095fa:	f001 fd49 	bl	800b090 <__match>
 80095fe:	2800      	cmp	r0, #0
 8009600:	f43f aea2 	beq.w	8009348 <_strtod_l+0xa8>
 8009604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009606:	4988      	ldr	r1, [pc, #544]	@ (8009828 <_strtod_l+0x588>)
 8009608:	3b01      	subs	r3, #1
 800960a:	a819      	add	r0, sp, #100	@ 0x64
 800960c:	9319      	str	r3, [sp, #100]	@ 0x64
 800960e:	f001 fd3f 	bl	800b090 <__match>
 8009612:	b910      	cbnz	r0, 800961a <_strtod_l+0x37a>
 8009614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009616:	3301      	adds	r3, #1
 8009618:	9319      	str	r3, [sp, #100]	@ 0x64
 800961a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009838 <_strtod_l+0x598>
 800961e:	f04f 0a00 	mov.w	sl, #0
 8009622:	e676      	b.n	8009312 <_strtod_l+0x72>
 8009624:	4881      	ldr	r0, [pc, #516]	@ (800982c <_strtod_l+0x58c>)
 8009626:	f001 fa87 	bl	800ab38 <nan>
 800962a:	ec5b ab10 	vmov	sl, fp, d0
 800962e:	e670      	b.n	8009312 <_strtod_l+0x72>
 8009630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009632:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009634:	eba8 0303 	sub.w	r3, r8, r3
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	bf08      	it	eq
 800963e:	46a9      	moveq	r9, r5
 8009640:	2d10      	cmp	r5, #16
 8009642:	9309      	str	r3, [sp, #36]	@ 0x24
 8009644:	462c      	mov	r4, r5
 8009646:	bfa8      	it	ge
 8009648:	2410      	movge	r4, #16
 800964a:	f7f6 ff73 	bl	8000534 <__aeabi_ui2d>
 800964e:	2d09      	cmp	r5, #9
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	dc13      	bgt.n	800967e <_strtod_l+0x3de>
 8009656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	f43f ae5a 	beq.w	8009312 <_strtod_l+0x72>
 800965e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009660:	dd78      	ble.n	8009754 <_strtod_l+0x4b4>
 8009662:	2b16      	cmp	r3, #22
 8009664:	dc5f      	bgt.n	8009726 <_strtod_l+0x486>
 8009666:	4972      	ldr	r1, [pc, #456]	@ (8009830 <_strtod_l+0x590>)
 8009668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	f7f6 ffd8 	bl	8000628 <__aeabi_dmul>
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	e649      	b.n	8009312 <_strtod_l+0x72>
 800967e:	4b6c      	ldr	r3, [pc, #432]	@ (8009830 <_strtod_l+0x590>)
 8009680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009684:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009688:	f7f6 ffce 	bl	8000628 <__aeabi_dmul>
 800968c:	4682      	mov	sl, r0
 800968e:	4638      	mov	r0, r7
 8009690:	468b      	mov	fp, r1
 8009692:	f7f6 ff4f 	bl	8000534 <__aeabi_ui2d>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4650      	mov	r0, sl
 800969c:	4659      	mov	r1, fp
 800969e:	f7f6 fe0d 	bl	80002bc <__adddf3>
 80096a2:	2d0f      	cmp	r5, #15
 80096a4:	4682      	mov	sl, r0
 80096a6:	468b      	mov	fp, r1
 80096a8:	ddd5      	ble.n	8009656 <_strtod_l+0x3b6>
 80096aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ac:	1b2c      	subs	r4, r5, r4
 80096ae:	441c      	add	r4, r3
 80096b0:	2c00      	cmp	r4, #0
 80096b2:	f340 8093 	ble.w	80097dc <_strtod_l+0x53c>
 80096b6:	f014 030f 	ands.w	r3, r4, #15
 80096ba:	d00a      	beq.n	80096d2 <_strtod_l+0x432>
 80096bc:	495c      	ldr	r1, [pc, #368]	@ (8009830 <_strtod_l+0x590>)
 80096be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ca:	f7f6 ffad 	bl	8000628 <__aeabi_dmul>
 80096ce:	4682      	mov	sl, r0
 80096d0:	468b      	mov	fp, r1
 80096d2:	f034 040f 	bics.w	r4, r4, #15
 80096d6:	d073      	beq.n	80097c0 <_strtod_l+0x520>
 80096d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80096dc:	dd49      	ble.n	8009772 <_strtod_l+0x4d2>
 80096de:	2400      	movs	r4, #0
 80096e0:	46a0      	mov	r8, r4
 80096e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096e4:	46a1      	mov	r9, r4
 80096e6:	9a05      	ldr	r2, [sp, #20]
 80096e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009838 <_strtod_l+0x598>
 80096ec:	2322      	movs	r3, #34	@ 0x22
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f43f ae0b 	beq.w	8009312 <_strtod_l+0x72>
 80096fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	f7ff f946 	bl	8008990 <_Bfree>
 8009704:	9805      	ldr	r0, [sp, #20]
 8009706:	4649      	mov	r1, r9
 8009708:	f7ff f942 	bl	8008990 <_Bfree>
 800970c:	9805      	ldr	r0, [sp, #20]
 800970e:	4641      	mov	r1, r8
 8009710:	f7ff f93e 	bl	8008990 <_Bfree>
 8009714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009716:	9805      	ldr	r0, [sp, #20]
 8009718:	f7ff f93a 	bl	8008990 <_Bfree>
 800971c:	9805      	ldr	r0, [sp, #20]
 800971e:	4621      	mov	r1, r4
 8009720:	f7ff f936 	bl	8008990 <_Bfree>
 8009724:	e5f5      	b.n	8009312 <_strtod_l+0x72>
 8009726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009728:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800972c:	4293      	cmp	r3, r2
 800972e:	dbbc      	blt.n	80096aa <_strtod_l+0x40a>
 8009730:	4c3f      	ldr	r4, [pc, #252]	@ (8009830 <_strtod_l+0x590>)
 8009732:	f1c5 050f 	rsb	r5, r5, #15
 8009736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800973a:	4652      	mov	r2, sl
 800973c:	465b      	mov	r3, fp
 800973e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009742:	f7f6 ff71 	bl	8000628 <__aeabi_dmul>
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	1b5d      	subs	r5, r3, r5
 800974a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800974e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009752:	e78f      	b.n	8009674 <_strtod_l+0x3d4>
 8009754:	3316      	adds	r3, #22
 8009756:	dba8      	blt.n	80096aa <_strtod_l+0x40a>
 8009758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800975a:	eba3 0808 	sub.w	r8, r3, r8
 800975e:	4b34      	ldr	r3, [pc, #208]	@ (8009830 <_strtod_l+0x590>)
 8009760:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009764:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009768:	4650      	mov	r0, sl
 800976a:	4659      	mov	r1, fp
 800976c:	f7f7 f886 	bl	800087c <__aeabi_ddiv>
 8009770:	e782      	b.n	8009678 <_strtod_l+0x3d8>
 8009772:	2300      	movs	r3, #0
 8009774:	4f2f      	ldr	r7, [pc, #188]	@ (8009834 <_strtod_l+0x594>)
 8009776:	1124      	asrs	r4, r4, #4
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	461e      	mov	r6, r3
 800977e:	2c01      	cmp	r4, #1
 8009780:	dc21      	bgt.n	80097c6 <_strtod_l+0x526>
 8009782:	b10b      	cbz	r3, 8009788 <_strtod_l+0x4e8>
 8009784:	4682      	mov	sl, r0
 8009786:	468b      	mov	fp, r1
 8009788:	492a      	ldr	r1, [pc, #168]	@ (8009834 <_strtod_l+0x594>)
 800978a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800978e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009792:	4652      	mov	r2, sl
 8009794:	465b      	mov	r3, fp
 8009796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800979a:	f7f6 ff45 	bl	8000628 <__aeabi_dmul>
 800979e:	4b26      	ldr	r3, [pc, #152]	@ (8009838 <_strtod_l+0x598>)
 80097a0:	460a      	mov	r2, r1
 80097a2:	400b      	ands	r3, r1
 80097a4:	4925      	ldr	r1, [pc, #148]	@ (800983c <_strtod_l+0x59c>)
 80097a6:	428b      	cmp	r3, r1
 80097a8:	4682      	mov	sl, r0
 80097aa:	d898      	bhi.n	80096de <_strtod_l+0x43e>
 80097ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf86      	itte	hi
 80097b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009840 <_strtod_l+0x5a0>
 80097b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80097bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097c0:	2300      	movs	r3, #0
 80097c2:	9308      	str	r3, [sp, #32]
 80097c4:	e076      	b.n	80098b4 <_strtod_l+0x614>
 80097c6:	07e2      	lsls	r2, r4, #31
 80097c8:	d504      	bpl.n	80097d4 <_strtod_l+0x534>
 80097ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ce:	f7f6 ff2b 	bl	8000628 <__aeabi_dmul>
 80097d2:	2301      	movs	r3, #1
 80097d4:	3601      	adds	r6, #1
 80097d6:	1064      	asrs	r4, r4, #1
 80097d8:	3708      	adds	r7, #8
 80097da:	e7d0      	b.n	800977e <_strtod_l+0x4de>
 80097dc:	d0f0      	beq.n	80097c0 <_strtod_l+0x520>
 80097de:	4264      	negs	r4, r4
 80097e0:	f014 020f 	ands.w	r2, r4, #15
 80097e4:	d00a      	beq.n	80097fc <_strtod_l+0x55c>
 80097e6:	4b12      	ldr	r3, [pc, #72]	@ (8009830 <_strtod_l+0x590>)
 80097e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ec:	4650      	mov	r0, sl
 80097ee:	4659      	mov	r1, fp
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f7 f842 	bl	800087c <__aeabi_ddiv>
 80097f8:	4682      	mov	sl, r0
 80097fa:	468b      	mov	fp, r1
 80097fc:	1124      	asrs	r4, r4, #4
 80097fe:	d0df      	beq.n	80097c0 <_strtod_l+0x520>
 8009800:	2c1f      	cmp	r4, #31
 8009802:	dd1f      	ble.n	8009844 <_strtod_l+0x5a4>
 8009804:	2400      	movs	r4, #0
 8009806:	46a0      	mov	r8, r4
 8009808:	940b      	str	r4, [sp, #44]	@ 0x2c
 800980a:	46a1      	mov	r9, r4
 800980c:	9a05      	ldr	r2, [sp, #20]
 800980e:	2322      	movs	r3, #34	@ 0x22
 8009810:	f04f 0a00 	mov.w	sl, #0
 8009814:	f04f 0b00 	mov.w	fp, #0
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	e76b      	b.n	80096f4 <_strtod_l+0x454>
 800981c:	0800ba6d 	.word	0x0800ba6d
 8009820:	0800bda8 	.word	0x0800bda8
 8009824:	0800ba65 	.word	0x0800ba65
 8009828:	0800bb47 	.word	0x0800bb47
 800982c:	0800bb43 	.word	0x0800bb43
 8009830:	0800bce0 	.word	0x0800bce0
 8009834:	0800bcb8 	.word	0x0800bcb8
 8009838:	7ff00000 	.word	0x7ff00000
 800983c:	7ca00000 	.word	0x7ca00000
 8009840:	7fefffff 	.word	0x7fefffff
 8009844:	f014 0310 	ands.w	r3, r4, #16
 8009848:	bf18      	it	ne
 800984a:	236a      	movne	r3, #106	@ 0x6a
 800984c:	4ea9      	ldr	r6, [pc, #676]	@ (8009af4 <_strtod_l+0x854>)
 800984e:	9308      	str	r3, [sp, #32]
 8009850:	4650      	mov	r0, sl
 8009852:	4659      	mov	r1, fp
 8009854:	2300      	movs	r3, #0
 8009856:	07e7      	lsls	r7, r4, #31
 8009858:	d504      	bpl.n	8009864 <_strtod_l+0x5c4>
 800985a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800985e:	f7f6 fee3 	bl	8000628 <__aeabi_dmul>
 8009862:	2301      	movs	r3, #1
 8009864:	1064      	asrs	r4, r4, #1
 8009866:	f106 0608 	add.w	r6, r6, #8
 800986a:	d1f4      	bne.n	8009856 <_strtod_l+0x5b6>
 800986c:	b10b      	cbz	r3, 8009872 <_strtod_l+0x5d2>
 800986e:	4682      	mov	sl, r0
 8009870:	468b      	mov	fp, r1
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	b1b3      	cbz	r3, 80098a4 <_strtod_l+0x604>
 8009876:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800987a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800987e:	2b00      	cmp	r3, #0
 8009880:	4659      	mov	r1, fp
 8009882:	dd0f      	ble.n	80098a4 <_strtod_l+0x604>
 8009884:	2b1f      	cmp	r3, #31
 8009886:	dd56      	ble.n	8009936 <_strtod_l+0x696>
 8009888:	2b34      	cmp	r3, #52	@ 0x34
 800988a:	bfde      	ittt	le
 800988c:	f04f 33ff 	movle.w	r3, #4294967295
 8009890:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009894:	4093      	lslle	r3, r2
 8009896:	f04f 0a00 	mov.w	sl, #0
 800989a:	bfcc      	ite	gt
 800989c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098a0:	ea03 0b01 	andle.w	fp, r3, r1
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4650      	mov	r0, sl
 80098aa:	4659      	mov	r1, fp
 80098ac:	f7f7 f924 	bl	8000af8 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1a7      	bne.n	8009804 <_strtod_l+0x564>
 80098b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098ba:	9805      	ldr	r0, [sp, #20]
 80098bc:	462b      	mov	r3, r5
 80098be:	464a      	mov	r2, r9
 80098c0:	f7ff f8ce 	bl	8008a60 <__s2b>
 80098c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f43f af09 	beq.w	80096de <_strtod_l+0x43e>
 80098cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	eba3 0308 	sub.w	r3, r3, r8
 80098d6:	bfa8      	it	ge
 80098d8:	2300      	movge	r3, #0
 80098da:	9312      	str	r3, [sp, #72]	@ 0x48
 80098dc:	2400      	movs	r4, #0
 80098de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80098e4:	46a0      	mov	r8, r4
 80098e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098e8:	9805      	ldr	r0, [sp, #20]
 80098ea:	6859      	ldr	r1, [r3, #4]
 80098ec:	f7ff f810 	bl	8008910 <_Balloc>
 80098f0:	4681      	mov	r9, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f aef7 	beq.w	80096e6 <_strtod_l+0x446>
 80098f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	3202      	adds	r2, #2
 80098fe:	f103 010c 	add.w	r1, r3, #12
 8009902:	0092      	lsls	r2, r2, #2
 8009904:	300c      	adds	r0, #12
 8009906:	f7fe f878 	bl	80079fa <memcpy>
 800990a:	ec4b ab10 	vmov	d0, sl, fp
 800990e:	9805      	ldr	r0, [sp, #20]
 8009910:	aa1c      	add	r2, sp, #112	@ 0x70
 8009912:	a91b      	add	r1, sp, #108	@ 0x6c
 8009914:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009918:	f7ff fbd6 	bl	80090c8 <__d2b>
 800991c:	901a      	str	r0, [sp, #104]	@ 0x68
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f aee1 	beq.w	80096e6 <_strtod_l+0x446>
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	2101      	movs	r1, #1
 8009928:	f7ff f930 	bl	8008b8c <__i2b>
 800992c:	4680      	mov	r8, r0
 800992e:	b948      	cbnz	r0, 8009944 <_strtod_l+0x6a4>
 8009930:	f04f 0800 	mov.w	r8, #0
 8009934:	e6d7      	b.n	80096e6 <_strtod_l+0x446>
 8009936:	f04f 32ff 	mov.w	r2, #4294967295
 800993a:	fa02 f303 	lsl.w	r3, r2, r3
 800993e:	ea03 0a0a 	and.w	sl, r3, sl
 8009942:	e7af      	b.n	80098a4 <_strtod_l+0x604>
 8009944:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009946:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009948:	2d00      	cmp	r5, #0
 800994a:	bfab      	itete	ge
 800994c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800994e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009950:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009952:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009954:	bfac      	ite	ge
 8009956:	18ef      	addge	r7, r5, r3
 8009958:	1b5e      	sublt	r6, r3, r5
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	1aed      	subs	r5, r5, r3
 800995e:	4415      	add	r5, r2
 8009960:	4b65      	ldr	r3, [pc, #404]	@ (8009af8 <_strtod_l+0x858>)
 8009962:	3d01      	subs	r5, #1
 8009964:	429d      	cmp	r5, r3
 8009966:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800996a:	da50      	bge.n	8009a0e <_strtod_l+0x76e>
 800996c:	1b5b      	subs	r3, r3, r5
 800996e:	2b1f      	cmp	r3, #31
 8009970:	eba2 0203 	sub.w	r2, r2, r3
 8009974:	f04f 0101 	mov.w	r1, #1
 8009978:	dc3d      	bgt.n	80099f6 <_strtod_l+0x756>
 800997a:	fa01 f303 	lsl.w	r3, r1, r3
 800997e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009980:	2300      	movs	r3, #0
 8009982:	9310      	str	r3, [sp, #64]	@ 0x40
 8009984:	18bd      	adds	r5, r7, r2
 8009986:	9b08      	ldr	r3, [sp, #32]
 8009988:	42af      	cmp	r7, r5
 800998a:	4416      	add	r6, r2
 800998c:	441e      	add	r6, r3
 800998e:	463b      	mov	r3, r7
 8009990:	bfa8      	it	ge
 8009992:	462b      	movge	r3, r5
 8009994:	42b3      	cmp	r3, r6
 8009996:	bfa8      	it	ge
 8009998:	4633      	movge	r3, r6
 800999a:	2b00      	cmp	r3, #0
 800999c:	bfc2      	ittt	gt
 800999e:	1aed      	subgt	r5, r5, r3
 80099a0:	1af6      	subgt	r6, r6, r3
 80099a2:	1aff      	subgt	r7, r7, r3
 80099a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd16      	ble.n	80099d8 <_strtod_l+0x738>
 80099aa:	4641      	mov	r1, r8
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f7ff f9a4 	bl	8008cfc <__pow5mult>
 80099b4:	4680      	mov	r8, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0ba      	beq.n	8009930 <_strtod_l+0x690>
 80099ba:	4601      	mov	r1, r0
 80099bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099be:	9805      	ldr	r0, [sp, #20]
 80099c0:	f7ff f8fa 	bl	8008bb8 <__multiply>
 80099c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f43f ae8d 	beq.w	80096e6 <_strtod_l+0x446>
 80099cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f7fe ffde 	bl	8008990 <_Bfree>
 80099d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099d8:	2d00      	cmp	r5, #0
 80099da:	dc1d      	bgt.n	8009a18 <_strtod_l+0x778>
 80099dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dd23      	ble.n	8009a2a <_strtod_l+0x78a>
 80099e2:	4649      	mov	r1, r9
 80099e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80099e6:	9805      	ldr	r0, [sp, #20]
 80099e8:	f7ff f988 	bl	8008cfc <__pow5mult>
 80099ec:	4681      	mov	r9, r0
 80099ee:	b9e0      	cbnz	r0, 8009a2a <_strtod_l+0x78a>
 80099f0:	f04f 0900 	mov.w	r9, #0
 80099f4:	e677      	b.n	80096e6 <_strtod_l+0x446>
 80099f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80099fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80099fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a02:	35e2      	adds	r5, #226	@ 0xe2
 8009a04:	fa01 f305 	lsl.w	r3, r1, r5
 8009a08:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a0a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a0c:	e7ba      	b.n	8009984 <_strtod_l+0x6e4>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a12:	2301      	movs	r3, #1
 8009a14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a16:	e7b5      	b.n	8009984 <_strtod_l+0x6e4>
 8009a18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a1a:	9805      	ldr	r0, [sp, #20]
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	f7ff f9c7 	bl	8008db0 <__lshift>
 8009a22:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d1d9      	bne.n	80099dc <_strtod_l+0x73c>
 8009a28:	e65d      	b.n	80096e6 <_strtod_l+0x446>
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	dd07      	ble.n	8009a3e <_strtod_l+0x79e>
 8009a2e:	4649      	mov	r1, r9
 8009a30:	9805      	ldr	r0, [sp, #20]
 8009a32:	4632      	mov	r2, r6
 8009a34:	f7ff f9bc 	bl	8008db0 <__lshift>
 8009a38:	4681      	mov	r9, r0
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d0d8      	beq.n	80099f0 <_strtod_l+0x750>
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	dd08      	ble.n	8009a54 <_strtod_l+0x7b4>
 8009a42:	4641      	mov	r1, r8
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	463a      	mov	r2, r7
 8009a48:	f7ff f9b2 	bl	8008db0 <__lshift>
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f ae49 	beq.w	80096e6 <_strtod_l+0x446>
 8009a54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a56:	9805      	ldr	r0, [sp, #20]
 8009a58:	464a      	mov	r2, r9
 8009a5a:	f7ff fa31 	bl	8008ec0 <__mdiff>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f ae40 	beq.w	80096e6 <_strtod_l+0x446>
 8009a66:	68c3      	ldr	r3, [r0, #12]
 8009a68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60c3      	str	r3, [r0, #12]
 8009a6e:	4641      	mov	r1, r8
 8009a70:	f7ff fa0a 	bl	8008e88 <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	da45      	bge.n	8009b04 <_strtod_l+0x864>
 8009a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a7e:	d16b      	bne.n	8009b58 <_strtod_l+0x8b8>
 8009a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d167      	bne.n	8009b58 <_strtod_l+0x8b8>
 8009a88:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a8c:	0d1b      	lsrs	r3, r3, #20
 8009a8e:	051b      	lsls	r3, r3, #20
 8009a90:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a94:	d960      	bls.n	8009b58 <_strtod_l+0x8b8>
 8009a96:	6963      	ldr	r3, [r4, #20]
 8009a98:	b913      	cbnz	r3, 8009aa0 <_strtod_l+0x800>
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	dd5b      	ble.n	8009b58 <_strtod_l+0x8b8>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	9805      	ldr	r0, [sp, #20]
 8009aa6:	f7ff f983 	bl	8008db0 <__lshift>
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4604      	mov	r4, r0
 8009aae:	f7ff f9eb 	bl	8008e88 <__mcmp>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	dd50      	ble.n	8009b58 <_strtod_l+0x8b8>
 8009ab6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009aba:	9a08      	ldr	r2, [sp, #32]
 8009abc:	0d1b      	lsrs	r3, r3, #20
 8009abe:	051b      	lsls	r3, r3, #20
 8009ac0:	2a00      	cmp	r2, #0
 8009ac2:	d06a      	beq.n	8009b9a <_strtod_l+0x8fa>
 8009ac4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ac8:	d867      	bhi.n	8009b9a <_strtod_l+0x8fa>
 8009aca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009ace:	f67f ae9d 	bls.w	800980c <_strtod_l+0x56c>
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <_strtod_l+0x85c>)
 8009ad4:	4650      	mov	r0, sl
 8009ad6:	4659      	mov	r1, fp
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f7f6 fda5 	bl	8000628 <__aeabi_dmul>
 8009ade:	4b08      	ldr	r3, [pc, #32]	@ (8009b00 <_strtod_l+0x860>)
 8009ae0:	400b      	ands	r3, r1
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f47f ae08 	bne.w	80096fc <_strtod_l+0x45c>
 8009aec:	9a05      	ldr	r2, [sp, #20]
 8009aee:	2322      	movs	r3, #34	@ 0x22
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e603      	b.n	80096fc <_strtod_l+0x45c>
 8009af4:	0800bdd0 	.word	0x0800bdd0
 8009af8:	fffffc02 	.word	0xfffffc02
 8009afc:	39500000 	.word	0x39500000
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b08:	d165      	bne.n	8009bd6 <_strtod_l+0x936>
 8009b0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b10:	b35a      	cbz	r2, 8009b6a <_strtod_l+0x8ca>
 8009b12:	4a9f      	ldr	r2, [pc, #636]	@ (8009d90 <_strtod_l+0xaf0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d12b      	bne.n	8009b70 <_strtod_l+0x8d0>
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	4651      	mov	r1, sl
 8009b1c:	b303      	cbz	r3, 8009b60 <_strtod_l+0x8c0>
 8009b1e:	4b9d      	ldr	r3, [pc, #628]	@ (8009d94 <_strtod_l+0xaf4>)
 8009b20:	465a      	mov	r2, fp
 8009b22:	4013      	ands	r3, r2
 8009b24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	d81b      	bhi.n	8009b66 <_strtod_l+0x8c6>
 8009b2e:	0d1b      	lsrs	r3, r3, #20
 8009b30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b34:	fa02 f303 	lsl.w	r3, r2, r3
 8009b38:	4299      	cmp	r1, r3
 8009b3a:	d119      	bne.n	8009b70 <_strtod_l+0x8d0>
 8009b3c:	4b96      	ldr	r3, [pc, #600]	@ (8009d98 <_strtod_l+0xaf8>)
 8009b3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d102      	bne.n	8009b4a <_strtod_l+0x8aa>
 8009b44:	3101      	adds	r1, #1
 8009b46:	f43f adce 	beq.w	80096e6 <_strtod_l+0x446>
 8009b4a:	4b92      	ldr	r3, [pc, #584]	@ (8009d94 <_strtod_l+0xaf4>)
 8009b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b4e:	401a      	ands	r2, r3
 8009b50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1b9      	bne.n	8009ad2 <_strtod_l+0x832>
 8009b5e:	e5cd      	b.n	80096fc <_strtod_l+0x45c>
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295
 8009b64:	e7e8      	b.n	8009b38 <_strtod_l+0x898>
 8009b66:	4613      	mov	r3, r2
 8009b68:	e7e6      	b.n	8009b38 <_strtod_l+0x898>
 8009b6a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b6e:	d0a2      	beq.n	8009ab6 <_strtod_l+0x816>
 8009b70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b72:	b1db      	cbz	r3, 8009bac <_strtod_l+0x90c>
 8009b74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b76:	4213      	tst	r3, r2
 8009b78:	d0ee      	beq.n	8009b58 <_strtod_l+0x8b8>
 8009b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7c:	9a08      	ldr	r2, [sp, #32]
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	b1bb      	cbz	r3, 8009bb4 <_strtod_l+0x914>
 8009b84:	f7ff fb6e 	bl	8009264 <sulp>
 8009b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b8c:	ec53 2b10 	vmov	r2, r3, d0
 8009b90:	f7f6 fb94 	bl	80002bc <__adddf3>
 8009b94:	4682      	mov	sl, r0
 8009b96:	468b      	mov	fp, r1
 8009b98:	e7de      	b.n	8009b58 <_strtod_l+0x8b8>
 8009b9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ba2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8009baa:	e7d5      	b.n	8009b58 <_strtod_l+0x8b8>
 8009bac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bae:	ea13 0f0a 	tst.w	r3, sl
 8009bb2:	e7e1      	b.n	8009b78 <_strtod_l+0x8d8>
 8009bb4:	f7ff fb56 	bl	8009264 <sulp>
 8009bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bbc:	ec53 2b10 	vmov	r2, r3, d0
 8009bc0:	f7f6 fb7a 	bl	80002b8 <__aeabi_dsub>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4682      	mov	sl, r0
 8009bca:	468b      	mov	fp, r1
 8009bcc:	f7f6 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d0c1      	beq.n	8009b58 <_strtod_l+0x8b8>
 8009bd4:	e61a      	b.n	800980c <_strtod_l+0x56c>
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff facd 	bl	8009178 <__ratio>
 8009bde:	ec57 6b10 	vmov	r6, r7, d0
 8009be2:	2200      	movs	r2, #0
 8009be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 ff98 	bl	8000b20 <__aeabi_dcmple>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d06f      	beq.n	8009cd4 <_strtod_l+0xa34>
 8009bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d17a      	bne.n	8009cf0 <_strtod_l+0xa50>
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d158      	bne.n	8009cb2 <_strtod_l+0xa12>
 8009c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d15a      	bne.n	8009cc0 <_strtod_l+0xa20>
 8009c0a:	4b64      	ldr	r3, [pc, #400]	@ (8009d9c <_strtod_l+0xafc>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d159      	bne.n	8009cce <_strtod_l+0xa2e>
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4b60      	ldr	r3, [pc, #384]	@ (8009da0 <_strtod_l+0xb00>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fd01 	bl	8000628 <__aeabi_dmul>
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c2e:	9606      	str	r6, [sp, #24]
 8009c30:	9307      	str	r3, [sp, #28]
 8009c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c36:	4d57      	ldr	r5, [pc, #348]	@ (8009d94 <_strtod_l+0xaf4>)
 8009c38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c3e:	401d      	ands	r5, r3
 8009c40:	4b58      	ldr	r3, [pc, #352]	@ (8009da4 <_strtod_l+0xb04>)
 8009c42:	429d      	cmp	r5, r3
 8009c44:	f040 80b2 	bne.w	8009dac <_strtod_l+0xb0c>
 8009c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c4e:	ec4b ab10 	vmov	d0, sl, fp
 8009c52:	f7ff f9c9 	bl	8008fe8 <__ulp>
 8009c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c5a:	ec51 0b10 	vmov	r0, r1, d0
 8009c5e:	f7f6 fce3 	bl	8000628 <__aeabi_dmul>
 8009c62:	4652      	mov	r2, sl
 8009c64:	465b      	mov	r3, fp
 8009c66:	f7f6 fb29 	bl	80002bc <__adddf3>
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4949      	ldr	r1, [pc, #292]	@ (8009d94 <_strtod_l+0xaf4>)
 8009c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8009da8 <_strtod_l+0xb08>)
 8009c70:	4019      	ands	r1, r3
 8009c72:	4291      	cmp	r1, r2
 8009c74:	4682      	mov	sl, r0
 8009c76:	d942      	bls.n	8009cfe <_strtod_l+0xa5e>
 8009c78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c7a:	4b47      	ldr	r3, [pc, #284]	@ (8009d98 <_strtod_l+0xaf8>)
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d103      	bne.n	8009c88 <_strtod_l+0x9e8>
 8009c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c82:	3301      	adds	r3, #1
 8009c84:	f43f ad2f 	beq.w	80096e6 <_strtod_l+0x446>
 8009c88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d98 <_strtod_l+0xaf8>
 8009c8c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	f7fe fe7c 	bl	8008990 <_Bfree>
 8009c98:	9805      	ldr	r0, [sp, #20]
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7fe fe78 	bl	8008990 <_Bfree>
 8009ca0:	9805      	ldr	r0, [sp, #20]
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	f7fe fe74 	bl	8008990 <_Bfree>
 8009ca8:	9805      	ldr	r0, [sp, #20]
 8009caa:	4621      	mov	r1, r4
 8009cac:	f7fe fe70 	bl	8008990 <_Bfree>
 8009cb0:	e619      	b.n	80098e6 <_strtod_l+0x646>
 8009cb2:	f1ba 0f01 	cmp.w	sl, #1
 8009cb6:	d103      	bne.n	8009cc0 <_strtod_l+0xa20>
 8009cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f43f ada6 	beq.w	800980c <_strtod_l+0x56c>
 8009cc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009d70 <_strtod_l+0xad0>
 8009cc4:	4f35      	ldr	r7, [pc, #212]	@ (8009d9c <_strtod_l+0xafc>)
 8009cc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cca:	2600      	movs	r6, #0
 8009ccc:	e7b1      	b.n	8009c32 <_strtod_l+0x992>
 8009cce:	4f34      	ldr	r7, [pc, #208]	@ (8009da0 <_strtod_l+0xb00>)
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	e7aa      	b.n	8009c2a <_strtod_l+0x98a>
 8009cd4:	4b32      	ldr	r3, [pc, #200]	@ (8009da0 <_strtod_l+0xb00>)
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f7f6 fca4 	bl	8000628 <__aeabi_dmul>
 8009ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d09f      	beq.n	8009c2a <_strtod_l+0x98a>
 8009cea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009cee:	e7a0      	b.n	8009c32 <_strtod_l+0x992>
 8009cf0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d78 <_strtod_l+0xad8>
 8009cf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cf8:	ec57 6b17 	vmov	r6, r7, d7
 8009cfc:	e799      	b.n	8009c32 <_strtod_l+0x992>
 8009cfe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d02:	9b08      	ldr	r3, [sp, #32]
 8009d04:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1c1      	bne.n	8009c90 <_strtod_l+0x9f0>
 8009d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d10:	0d1b      	lsrs	r3, r3, #20
 8009d12:	051b      	lsls	r3, r3, #20
 8009d14:	429d      	cmp	r5, r3
 8009d16:	d1bb      	bne.n	8009c90 <_strtod_l+0x9f0>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 ffe4 	bl	8000ce8 <__aeabi_d2lz>
 8009d20:	f7f6 fc54 	bl	80005cc <__aeabi_l2d>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fac4 	bl	80002b8 <__aeabi_dsub>
 8009d30:	460b      	mov	r3, r1
 8009d32:	4602      	mov	r2, r0
 8009d34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d3e:	ea46 060a 	orr.w	r6, r6, sl
 8009d42:	431e      	orrs	r6, r3
 8009d44:	d06f      	beq.n	8009e26 <_strtod_l+0xb86>
 8009d46:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d80 <_strtod_l+0xae0>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fede 	bl	8000b0c <__aeabi_dcmplt>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f47f acd3 	bne.w	80096fc <_strtod_l+0x45c>
 8009d56:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d88 <_strtod_l+0xae8>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d60:	f7f6 fef2 	bl	8000b48 <__aeabi_dcmpgt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d093      	beq.n	8009c90 <_strtod_l+0x9f0>
 8009d68:	e4c8      	b.n	80096fc <_strtod_l+0x45c>
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w
 8009d70:	00000000 	.word	0x00000000
 8009d74:	bff00000 	.word	0xbff00000
 8009d78:	00000000 	.word	0x00000000
 8009d7c:	3ff00000 	.word	0x3ff00000
 8009d80:	94a03595 	.word	0x94a03595
 8009d84:	3fdfffff 	.word	0x3fdfffff
 8009d88:	35afe535 	.word	0x35afe535
 8009d8c:	3fe00000 	.word	0x3fe00000
 8009d90:	000fffff 	.word	0x000fffff
 8009d94:	7ff00000 	.word	0x7ff00000
 8009d98:	7fefffff 	.word	0x7fefffff
 8009d9c:	3ff00000 	.word	0x3ff00000
 8009da0:	3fe00000 	.word	0x3fe00000
 8009da4:	7fe00000 	.word	0x7fe00000
 8009da8:	7c9fffff 	.word	0x7c9fffff
 8009dac:	9b08      	ldr	r3, [sp, #32]
 8009dae:	b323      	cbz	r3, 8009dfa <_strtod_l+0xb5a>
 8009db0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009db4:	d821      	bhi.n	8009dfa <_strtod_l+0xb5a>
 8009db6:	a328      	add	r3, pc, #160	@ (adr r3, 8009e58 <_strtod_l+0xbb8>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 feae 	bl	8000b20 <__aeabi_dcmple>
 8009dc4:	b1a0      	cbz	r0, 8009df0 <_strtod_l+0xb50>
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f7f6 ff05 	bl	8000bd8 <__aeabi_d2uiz>
 8009dce:	2801      	cmp	r0, #1
 8009dd0:	bf38      	it	cc
 8009dd2:	2001      	movcc	r0, #1
 8009dd4:	f7f6 fbae 	bl	8000534 <__aeabi_ui2d>
 8009dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	b9fb      	cbnz	r3, 8009e20 <_strtod_l+0xb80>
 8009de0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009de4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009de6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009de8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009df0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009df2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009df6:	1b5b      	subs	r3, r3, r5
 8009df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009dfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e02:	f7ff f8f1 	bl	8008fe8 <__ulp>
 8009e06:	4650      	mov	r0, sl
 8009e08:	ec53 2b10 	vmov	r2, r3, d0
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	f7f6 fc0b 	bl	8000628 <__aeabi_dmul>
 8009e12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e16:	f7f6 fa51 	bl	80002bc <__adddf3>
 8009e1a:	4682      	mov	sl, r0
 8009e1c:	468b      	mov	fp, r1
 8009e1e:	e770      	b.n	8009d02 <_strtod_l+0xa62>
 8009e20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e24:	e7e0      	b.n	8009de8 <_strtod_l+0xb48>
 8009e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e60 <_strtod_l+0xbc0>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	f7f6 fe6e 	bl	8000b0c <__aeabi_dcmplt>
 8009e30:	e798      	b.n	8009d64 <_strtod_l+0xac4>
 8009e32:	2300      	movs	r3, #0
 8009e34:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	f7ff ba6d 	b.w	800931a <_strtod_l+0x7a>
 8009e40:	2a65      	cmp	r2, #101	@ 0x65
 8009e42:	f43f ab68 	beq.w	8009516 <_strtod_l+0x276>
 8009e46:	2a45      	cmp	r2, #69	@ 0x45
 8009e48:	f43f ab65 	beq.w	8009516 <_strtod_l+0x276>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f7ff bba0 	b.w	8009592 <_strtod_l+0x2f2>
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff

08009e68 <_strtod_r>:
 8009e68:	4b01      	ldr	r3, [pc, #4]	@ (8009e70 <_strtod_r+0x8>)
 8009e6a:	f7ff ba19 	b.w	80092a0 <_strtod_l>
 8009e6e:	bf00      	nop
 8009e70:	20000080 	.word	0x20000080

08009e74 <_strtol_l.isra.0>:
 8009e74:	2b24      	cmp	r3, #36	@ 0x24
 8009e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7a:	4686      	mov	lr, r0
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	d801      	bhi.n	8009e84 <_strtol_l.isra.0+0x10>
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d106      	bne.n	8009e92 <_strtol_l.isra.0+0x1e>
 8009e84:	f7fd fd8c 	bl	80079a0 <__errno>
 8009e88:	2316      	movs	r3, #22
 8009e8a:	6003      	str	r3, [r0, #0]
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	4834      	ldr	r0, [pc, #208]	@ (8009f64 <_strtol_l.isra.0+0xf0>)
 8009e94:	460d      	mov	r5, r1
 8009e96:	462a      	mov	r2, r5
 8009e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9c:	5d06      	ldrb	r6, [r0, r4]
 8009e9e:	f016 0608 	ands.w	r6, r6, #8
 8009ea2:	d1f8      	bne.n	8009e96 <_strtol_l.isra.0+0x22>
 8009ea4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ea6:	d110      	bne.n	8009eca <_strtol_l.isra.0+0x56>
 8009ea8:	782c      	ldrb	r4, [r5, #0]
 8009eaa:	2601      	movs	r6, #1
 8009eac:	1c95      	adds	r5, r2, #2
 8009eae:	f033 0210 	bics.w	r2, r3, #16
 8009eb2:	d115      	bne.n	8009ee0 <_strtol_l.isra.0+0x6c>
 8009eb4:	2c30      	cmp	r4, #48	@ 0x30
 8009eb6:	d10d      	bne.n	8009ed4 <_strtol_l.isra.0+0x60>
 8009eb8:	782a      	ldrb	r2, [r5, #0]
 8009eba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ebe:	2a58      	cmp	r2, #88	@ 0x58
 8009ec0:	d108      	bne.n	8009ed4 <_strtol_l.isra.0+0x60>
 8009ec2:	786c      	ldrb	r4, [r5, #1]
 8009ec4:	3502      	adds	r5, #2
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	e00a      	b.n	8009ee0 <_strtol_l.isra.0+0x6c>
 8009eca:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ecc:	bf04      	itt	eq
 8009ece:	782c      	ldrbeq	r4, [r5, #0]
 8009ed0:	1c95      	addeq	r5, r2, #2
 8009ed2:	e7ec      	b.n	8009eae <_strtol_l.isra.0+0x3a>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1f6      	bne.n	8009ec6 <_strtol_l.isra.0+0x52>
 8009ed8:	2c30      	cmp	r4, #48	@ 0x30
 8009eda:	bf14      	ite	ne
 8009edc:	230a      	movne	r3, #10
 8009ede:	2308      	moveq	r3, #8
 8009ee0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ee4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ee8:	2200      	movs	r2, #0
 8009eea:	fbbc f9f3 	udiv	r9, ip, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ef4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ef8:	2f09      	cmp	r7, #9
 8009efa:	d80f      	bhi.n	8009f1c <_strtol_l.isra.0+0xa8>
 8009efc:	463c      	mov	r4, r7
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	dd1b      	ble.n	8009f3a <_strtol_l.isra.0+0xc6>
 8009f02:	1c57      	adds	r7, r2, #1
 8009f04:	d007      	beq.n	8009f16 <_strtol_l.isra.0+0xa2>
 8009f06:	4581      	cmp	r9, r0
 8009f08:	d314      	bcc.n	8009f34 <_strtol_l.isra.0+0xc0>
 8009f0a:	d101      	bne.n	8009f10 <_strtol_l.isra.0+0x9c>
 8009f0c:	45a2      	cmp	sl, r4
 8009f0e:	db11      	blt.n	8009f34 <_strtol_l.isra.0+0xc0>
 8009f10:	fb00 4003 	mla	r0, r0, r3, r4
 8009f14:	2201      	movs	r2, #1
 8009f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f1a:	e7eb      	b.n	8009ef4 <_strtol_l.isra.0+0x80>
 8009f1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f20:	2f19      	cmp	r7, #25
 8009f22:	d801      	bhi.n	8009f28 <_strtol_l.isra.0+0xb4>
 8009f24:	3c37      	subs	r4, #55	@ 0x37
 8009f26:	e7ea      	b.n	8009efe <_strtol_l.isra.0+0x8a>
 8009f28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f2c:	2f19      	cmp	r7, #25
 8009f2e:	d804      	bhi.n	8009f3a <_strtol_l.isra.0+0xc6>
 8009f30:	3c57      	subs	r4, #87	@ 0x57
 8009f32:	e7e4      	b.n	8009efe <_strtol_l.isra.0+0x8a>
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	e7ed      	b.n	8009f16 <_strtol_l.isra.0+0xa2>
 8009f3a:	1c53      	adds	r3, r2, #1
 8009f3c:	d108      	bne.n	8009f50 <_strtol_l.isra.0+0xdc>
 8009f3e:	2322      	movs	r3, #34	@ 0x22
 8009f40:	f8ce 3000 	str.w	r3, [lr]
 8009f44:	4660      	mov	r0, ip
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	d0a0      	beq.n	8009e8e <_strtol_l.isra.0+0x1a>
 8009f4c:	1e69      	subs	r1, r5, #1
 8009f4e:	e006      	b.n	8009f5e <_strtol_l.isra.0+0xea>
 8009f50:	b106      	cbz	r6, 8009f54 <_strtol_l.isra.0+0xe0>
 8009f52:	4240      	negs	r0, r0
 8009f54:	f1b8 0f00 	cmp.w	r8, #0
 8009f58:	d099      	beq.n	8009e8e <_strtol_l.isra.0+0x1a>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	d1f6      	bne.n	8009f4c <_strtol_l.isra.0+0xd8>
 8009f5e:	f8c8 1000 	str.w	r1, [r8]
 8009f62:	e794      	b.n	8009e8e <_strtol_l.isra.0+0x1a>
 8009f64:	0800bdf9 	.word	0x0800bdf9

08009f68 <_strtol_r>:
 8009f68:	f7ff bf84 	b.w	8009e74 <_strtol_l.isra.0>

08009f6c <__ssputs_r>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	688e      	ldr	r6, [r1, #8]
 8009f72:	461f      	mov	r7, r3
 8009f74:	42be      	cmp	r6, r7
 8009f76:	680b      	ldr	r3, [r1, #0]
 8009f78:	4682      	mov	sl, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	d82d      	bhi.n	8009fdc <__ssputs_r+0x70>
 8009f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f88:	d026      	beq.n	8009fd8 <__ssputs_r+0x6c>
 8009f8a:	6965      	ldr	r5, [r4, #20]
 8009f8c:	6909      	ldr	r1, [r1, #16]
 8009f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f92:	eba3 0901 	sub.w	r9, r3, r1
 8009f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f9a:	1c7b      	adds	r3, r7, #1
 8009f9c:	444b      	add	r3, r9
 8009f9e:	106d      	asrs	r5, r5, #1
 8009fa0:	429d      	cmp	r5, r3
 8009fa2:	bf38      	it	cc
 8009fa4:	461d      	movcc	r5, r3
 8009fa6:	0553      	lsls	r3, r2, #21
 8009fa8:	d527      	bpl.n	8009ffa <__ssputs_r+0x8e>
 8009faa:	4629      	mov	r1, r5
 8009fac:	f7fe fc24 	bl	80087f8 <_malloc_r>
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	b360      	cbz	r0, 800a00e <__ssputs_r+0xa2>
 8009fb4:	6921      	ldr	r1, [r4, #16]
 8009fb6:	464a      	mov	r2, r9
 8009fb8:	f7fd fd1f 	bl	80079fa <memcpy>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	6126      	str	r6, [r4, #16]
 8009fca:	6165      	str	r5, [r4, #20]
 8009fcc:	444e      	add	r6, r9
 8009fce:	eba5 0509 	sub.w	r5, r5, r9
 8009fd2:	6026      	str	r6, [r4, #0]
 8009fd4:	60a5      	str	r5, [r4, #8]
 8009fd6:	463e      	mov	r6, r7
 8009fd8:	42be      	cmp	r6, r7
 8009fda:	d900      	bls.n	8009fde <__ssputs_r+0x72>
 8009fdc:	463e      	mov	r6, r7
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	f000 fd69 	bl	800aaba <memmove>
 8009fe8:	68a3      	ldr	r3, [r4, #8]
 8009fea:	1b9b      	subs	r3, r3, r6
 8009fec:	60a3      	str	r3, [r4, #8]
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	4433      	add	r3, r6
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	f001 f909 	bl	800b212 <_realloc_r>
 800a000:	4606      	mov	r6, r0
 800a002:	2800      	cmp	r0, #0
 800a004:	d1e0      	bne.n	8009fc8 <__ssputs_r+0x5c>
 800a006:	6921      	ldr	r1, [r4, #16]
 800a008:	4650      	mov	r0, sl
 800a00a:	f7fe fb81 	bl	8008710 <_free_r>
 800a00e:	230c      	movs	r3, #12
 800a010:	f8ca 3000 	str.w	r3, [sl]
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	e7e9      	b.n	8009ff6 <__ssputs_r+0x8a>
	...

0800a024 <_svfiprintf_r>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	4698      	mov	r8, r3
 800a02a:	898b      	ldrh	r3, [r1, #12]
 800a02c:	061b      	lsls	r3, r3, #24
 800a02e:	b09d      	sub	sp, #116	@ 0x74
 800a030:	4607      	mov	r7, r0
 800a032:	460d      	mov	r5, r1
 800a034:	4614      	mov	r4, r2
 800a036:	d510      	bpl.n	800a05a <_svfiprintf_r+0x36>
 800a038:	690b      	ldr	r3, [r1, #16]
 800a03a:	b973      	cbnz	r3, 800a05a <_svfiprintf_r+0x36>
 800a03c:	2140      	movs	r1, #64	@ 0x40
 800a03e:	f7fe fbdb 	bl	80087f8 <_malloc_r>
 800a042:	6028      	str	r0, [r5, #0]
 800a044:	6128      	str	r0, [r5, #16]
 800a046:	b930      	cbnz	r0, 800a056 <_svfiprintf_r+0x32>
 800a048:	230c      	movs	r3, #12
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	b01d      	add	sp, #116	@ 0x74
 800a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	2340      	movs	r3, #64	@ 0x40
 800a058:	616b      	str	r3, [r5, #20]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05e:	2320      	movs	r3, #32
 800a060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a064:	f8cd 800c 	str.w	r8, [sp, #12]
 800a068:	2330      	movs	r3, #48	@ 0x30
 800a06a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a208 <_svfiprintf_r+0x1e4>
 800a06e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a072:	f04f 0901 	mov.w	r9, #1
 800a076:	4623      	mov	r3, r4
 800a078:	469a      	mov	sl, r3
 800a07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a07e:	b10a      	cbz	r2, 800a084 <_svfiprintf_r+0x60>
 800a080:	2a25      	cmp	r2, #37	@ 0x25
 800a082:	d1f9      	bne.n	800a078 <_svfiprintf_r+0x54>
 800a084:	ebba 0b04 	subs.w	fp, sl, r4
 800a088:	d00b      	beq.n	800a0a2 <_svfiprintf_r+0x7e>
 800a08a:	465b      	mov	r3, fp
 800a08c:	4622      	mov	r2, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ff6b 	bl	8009f6c <__ssputs_r>
 800a096:	3001      	adds	r0, #1
 800a098:	f000 80a7 	beq.w	800a1ea <_svfiprintf_r+0x1c6>
 800a09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a09e:	445a      	add	r2, fp
 800a0a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 809f 	beq.w	800a1ea <_svfiprintf_r+0x1c6>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0c4:	4654      	mov	r4, sl
 800a0c6:	2205      	movs	r2, #5
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	484e      	ldr	r0, [pc, #312]	@ (800a208 <_svfiprintf_r+0x1e4>)
 800a0ce:	f7f6 f897 	bl	8000200 <memchr>
 800a0d2:	9a04      	ldr	r2, [sp, #16]
 800a0d4:	b9d8      	cbnz	r0, 800a10e <_svfiprintf_r+0xea>
 800a0d6:	06d0      	lsls	r0, r2, #27
 800a0d8:	bf44      	itt	mi
 800a0da:	2320      	movmi	r3, #32
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e0:	0711      	lsls	r1, r2, #28
 800a0e2:	bf44      	itt	mi
 800a0e4:	232b      	movmi	r3, #43	@ 0x2b
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f0:	d015      	beq.n	800a11e <_svfiprintf_r+0xfa>
 800a0f2:	9a07      	ldr	r2, [sp, #28]
 800a0f4:	4654      	mov	r4, sl
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	f04f 0c0a 	mov.w	ip, #10
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a102:	3b30      	subs	r3, #48	@ 0x30
 800a104:	2b09      	cmp	r3, #9
 800a106:	d94b      	bls.n	800a1a0 <_svfiprintf_r+0x17c>
 800a108:	b1b0      	cbz	r0, 800a138 <_svfiprintf_r+0x114>
 800a10a:	9207      	str	r2, [sp, #28]
 800a10c:	e014      	b.n	800a138 <_svfiprintf_r+0x114>
 800a10e:	eba0 0308 	sub.w	r3, r0, r8
 800a112:	fa09 f303 	lsl.w	r3, r9, r3
 800a116:	4313      	orrs	r3, r2
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	46a2      	mov	sl, r4
 800a11c:	e7d2      	b.n	800a0c4 <_svfiprintf_r+0xa0>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	1d19      	adds	r1, r3, #4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	9103      	str	r1, [sp, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbb      	ittet	lt
 800a12a:	425b      	neglt	r3, r3
 800a12c:	f042 0202 	orrlt.w	r2, r2, #2
 800a130:	9307      	strge	r3, [sp, #28]
 800a132:	9307      	strlt	r3, [sp, #28]
 800a134:	bfb8      	it	lt
 800a136:	9204      	strlt	r2, [sp, #16]
 800a138:	7823      	ldrb	r3, [r4, #0]
 800a13a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a13c:	d10a      	bne.n	800a154 <_svfiprintf_r+0x130>
 800a13e:	7863      	ldrb	r3, [r4, #1]
 800a140:	2b2a      	cmp	r3, #42	@ 0x2a
 800a142:	d132      	bne.n	800a1aa <_svfiprintf_r+0x186>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	1d1a      	adds	r2, r3, #4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	9203      	str	r2, [sp, #12]
 800a14c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a150:	3402      	adds	r4, #2
 800a152:	9305      	str	r3, [sp, #20]
 800a154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a218 <_svfiprintf_r+0x1f4>
 800a158:	7821      	ldrb	r1, [r4, #0]
 800a15a:	2203      	movs	r2, #3
 800a15c:	4650      	mov	r0, sl
 800a15e:	f7f6 f84f 	bl	8000200 <memchr>
 800a162:	b138      	cbz	r0, 800a174 <_svfiprintf_r+0x150>
 800a164:	9b04      	ldr	r3, [sp, #16]
 800a166:	eba0 000a 	sub.w	r0, r0, sl
 800a16a:	2240      	movs	r2, #64	@ 0x40
 800a16c:	4082      	lsls	r2, r0
 800a16e:	4313      	orrs	r3, r2
 800a170:	3401      	adds	r4, #1
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a178:	4824      	ldr	r0, [pc, #144]	@ (800a20c <_svfiprintf_r+0x1e8>)
 800a17a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a17e:	2206      	movs	r2, #6
 800a180:	f7f6 f83e 	bl	8000200 <memchr>
 800a184:	2800      	cmp	r0, #0
 800a186:	d036      	beq.n	800a1f6 <_svfiprintf_r+0x1d2>
 800a188:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <_svfiprintf_r+0x1ec>)
 800a18a:	bb1b      	cbnz	r3, 800a1d4 <_svfiprintf_r+0x1b0>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	3307      	adds	r3, #7
 800a190:	f023 0307 	bic.w	r3, r3, #7
 800a194:	3308      	adds	r3, #8
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a19a:	4433      	add	r3, r6
 800a19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a19e:	e76a      	b.n	800a076 <_svfiprintf_r+0x52>
 800a1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	e7a8      	b.n	800a0fc <_svfiprintf_r+0xd8>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	3401      	adds	r4, #1
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f04f 0c0a 	mov.w	ip, #10
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1bc:	3a30      	subs	r2, #48	@ 0x30
 800a1be:	2a09      	cmp	r2, #9
 800a1c0:	d903      	bls.n	800a1ca <_svfiprintf_r+0x1a6>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0c6      	beq.n	800a154 <_svfiprintf_r+0x130>
 800a1c6:	9105      	str	r1, [sp, #20]
 800a1c8:	e7c4      	b.n	800a154 <_svfiprintf_r+0x130>
 800a1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e7f0      	b.n	800a1b6 <_svfiprintf_r+0x192>
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	462a      	mov	r2, r5
 800a1da:	4b0e      	ldr	r3, [pc, #56]	@ (800a214 <_svfiprintf_r+0x1f0>)
 800a1dc:	a904      	add	r1, sp, #16
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7fc fbda 	bl	8006998 <_printf_float>
 800a1e4:	1c42      	adds	r2, r0, #1
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	d1d6      	bne.n	800a198 <_svfiprintf_r+0x174>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	065b      	lsls	r3, r3, #25
 800a1ee:	f53f af2d 	bmi.w	800a04c <_svfiprintf_r+0x28>
 800a1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1f4:	e72c      	b.n	800a050 <_svfiprintf_r+0x2c>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <_svfiprintf_r+0x1f0>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4638      	mov	r0, r7
 800a202:	f7fc fe61 	bl	8006ec8 <_printf_i>
 800a206:	e7ed      	b.n	800a1e4 <_svfiprintf_r+0x1c0>
 800a208:	0800bc15 	.word	0x0800bc15
 800a20c:	0800bc1f 	.word	0x0800bc1f
 800a210:	08006999 	.word	0x08006999
 800a214:	08009f6d 	.word	0x08009f6d
 800a218:	0800bc1b 	.word	0x0800bc1b

0800a21c <_sungetc_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	1c4b      	adds	r3, r1, #1
 800a220:	4614      	mov	r4, r2
 800a222:	d103      	bne.n	800a22c <_sungetc_r+0x10>
 800a224:	f04f 35ff 	mov.w	r5, #4294967295
 800a228:	4628      	mov	r0, r5
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	8993      	ldrh	r3, [r2, #12]
 800a22e:	f023 0320 	bic.w	r3, r3, #32
 800a232:	8193      	strh	r3, [r2, #12]
 800a234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a236:	6852      	ldr	r2, [r2, #4]
 800a238:	b2cd      	uxtb	r5, r1
 800a23a:	b18b      	cbz	r3, 800a260 <_sungetc_r+0x44>
 800a23c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a23e:	4293      	cmp	r3, r2
 800a240:	dd08      	ble.n	800a254 <_sungetc_r+0x38>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	1e5a      	subs	r2, r3, #1
 800a246:	6022      	str	r2, [r4, #0]
 800a248:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	3301      	adds	r3, #1
 800a250:	6063      	str	r3, [r4, #4]
 800a252:	e7e9      	b.n	800a228 <_sungetc_r+0xc>
 800a254:	4621      	mov	r1, r4
 800a256:	f000 fbf6 	bl	800aa46 <__submore>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d0f1      	beq.n	800a242 <_sungetc_r+0x26>
 800a25e:	e7e1      	b.n	800a224 <_sungetc_r+0x8>
 800a260:	6921      	ldr	r1, [r4, #16]
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	b151      	cbz	r1, 800a27c <_sungetc_r+0x60>
 800a266:	4299      	cmp	r1, r3
 800a268:	d208      	bcs.n	800a27c <_sungetc_r+0x60>
 800a26a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a26e:	42a9      	cmp	r1, r5
 800a270:	d104      	bne.n	800a27c <_sungetc_r+0x60>
 800a272:	3b01      	subs	r3, #1
 800a274:	3201      	adds	r2, #1
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	6062      	str	r2, [r4, #4]
 800a27a:	e7d5      	b.n	800a228 <_sungetc_r+0xc>
 800a27c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a284:	6363      	str	r3, [r4, #52]	@ 0x34
 800a286:	2303      	movs	r3, #3
 800a288:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a28a:	4623      	mov	r3, r4
 800a28c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	2301      	movs	r3, #1
 800a294:	e7dc      	b.n	800a250 <_sungetc_r+0x34>

0800a296 <__ssrefill_r>:
 800a296:	b510      	push	{r4, lr}
 800a298:	460c      	mov	r4, r1
 800a29a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a29c:	b169      	cbz	r1, 800a2ba <__ssrefill_r+0x24>
 800a29e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2a2:	4299      	cmp	r1, r3
 800a2a4:	d001      	beq.n	800a2aa <__ssrefill_r+0x14>
 800a2a6:	f7fe fa33 	bl	8008710 <_free_r>
 800a2aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2ac:	6063      	str	r3, [r4, #4]
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	6360      	str	r0, [r4, #52]	@ 0x34
 800a2b2:	b113      	cbz	r3, 800a2ba <__ssrefill_r+0x24>
 800a2b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f043 0320 	orr.w	r3, r3, #32
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ce:	e7f3      	b.n	800a2b8 <__ssrefill_r+0x22>

0800a2d0 <__ssvfiscanf_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a2da:	2100      	movs	r1, #0
 800a2dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a2e0:	49a6      	ldr	r1, [pc, #664]	@ (800a57c <__ssvfiscanf_r+0x2ac>)
 800a2e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a2e4:	f10d 0804 	add.w	r8, sp, #4
 800a2e8:	49a5      	ldr	r1, [pc, #660]	@ (800a580 <__ssvfiscanf_r+0x2b0>)
 800a2ea:	4fa6      	ldr	r7, [pc, #664]	@ (800a584 <__ssvfiscanf_r+0x2b4>)
 800a2ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	f892 9000 	ldrb.w	r9, [r2]
 800a2fa:	f1b9 0f00 	cmp.w	r9, #0
 800a2fe:	f000 8158 	beq.w	800a5b2 <__ssvfiscanf_r+0x2e2>
 800a302:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a306:	f013 0308 	ands.w	r3, r3, #8
 800a30a:	f102 0501 	add.w	r5, r2, #1
 800a30e:	d019      	beq.n	800a344 <__ssvfiscanf_r+0x74>
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd0f      	ble.n	800a336 <__ssvfiscanf_r+0x66>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	5cba      	ldrb	r2, [r7, r2]
 800a31c:	0712      	lsls	r2, r2, #28
 800a31e:	d401      	bmi.n	800a324 <__ssvfiscanf_r+0x54>
 800a320:	462a      	mov	r2, r5
 800a322:	e7e8      	b.n	800a2f6 <__ssvfiscanf_r+0x26>
 800a324:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a326:	3201      	adds	r2, #1
 800a328:	9245      	str	r2, [sp, #276]	@ 0x114
 800a32a:	6862      	ldr	r2, [r4, #4]
 800a32c:	3301      	adds	r3, #1
 800a32e:	3a01      	subs	r2, #1
 800a330:	6062      	str	r2, [r4, #4]
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	e7ec      	b.n	800a310 <__ssvfiscanf_r+0x40>
 800a336:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a338:	4621      	mov	r1, r4
 800a33a:	4630      	mov	r0, r6
 800a33c:	4798      	blx	r3
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0e9      	beq.n	800a316 <__ssvfiscanf_r+0x46>
 800a342:	e7ed      	b.n	800a320 <__ssvfiscanf_r+0x50>
 800a344:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a348:	f040 8085 	bne.w	800a456 <__ssvfiscanf_r+0x186>
 800a34c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a34e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a350:	7853      	ldrb	r3, [r2, #1]
 800a352:	2b2a      	cmp	r3, #42	@ 0x2a
 800a354:	bf02      	ittt	eq
 800a356:	2310      	moveq	r3, #16
 800a358:	1c95      	addeq	r5, r2, #2
 800a35a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a35c:	220a      	movs	r2, #10
 800a35e:	46aa      	mov	sl, r5
 800a360:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a364:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a368:	2b09      	cmp	r3, #9
 800a36a:	d91e      	bls.n	800a3aa <__ssvfiscanf_r+0xda>
 800a36c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a588 <__ssvfiscanf_r+0x2b8>
 800a370:	2203      	movs	r2, #3
 800a372:	4658      	mov	r0, fp
 800a374:	f7f5 ff44 	bl	8000200 <memchr>
 800a378:	b138      	cbz	r0, 800a38a <__ssvfiscanf_r+0xba>
 800a37a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a37c:	eba0 000b 	sub.w	r0, r0, fp
 800a380:	2301      	movs	r3, #1
 800a382:	4083      	lsls	r3, r0
 800a384:	4313      	orrs	r3, r2
 800a386:	9341      	str	r3, [sp, #260]	@ 0x104
 800a388:	4655      	mov	r5, sl
 800a38a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a38e:	2b78      	cmp	r3, #120	@ 0x78
 800a390:	d806      	bhi.n	800a3a0 <__ssvfiscanf_r+0xd0>
 800a392:	2b57      	cmp	r3, #87	@ 0x57
 800a394:	d810      	bhi.n	800a3b8 <__ssvfiscanf_r+0xe8>
 800a396:	2b25      	cmp	r3, #37	@ 0x25
 800a398:	d05d      	beq.n	800a456 <__ssvfiscanf_r+0x186>
 800a39a:	d857      	bhi.n	800a44c <__ssvfiscanf_r+0x17c>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d075      	beq.n	800a48c <__ssvfiscanf_r+0x1bc>
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a3a4:	230a      	movs	r3, #10
 800a3a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3a8:	e088      	b.n	800a4bc <__ssvfiscanf_r+0x1ec>
 800a3aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a3ac:	fb02 1103 	mla	r1, r2, r3, r1
 800a3b0:	3930      	subs	r1, #48	@ 0x30
 800a3b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a3b4:	4655      	mov	r5, sl
 800a3b6:	e7d2      	b.n	800a35e <__ssvfiscanf_r+0x8e>
 800a3b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a3bc:	2a20      	cmp	r2, #32
 800a3be:	d8ef      	bhi.n	800a3a0 <__ssvfiscanf_r+0xd0>
 800a3c0:	a101      	add	r1, pc, #4	@ (adr r1, 800a3c8 <__ssvfiscanf_r+0xf8>)
 800a3c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3c6:	bf00      	nop
 800a3c8:	0800a49b 	.word	0x0800a49b
 800a3cc:	0800a3a1 	.word	0x0800a3a1
 800a3d0:	0800a3a1 	.word	0x0800a3a1
 800a3d4:	0800a4f5 	.word	0x0800a4f5
 800a3d8:	0800a3a1 	.word	0x0800a3a1
 800a3dc:	0800a3a1 	.word	0x0800a3a1
 800a3e0:	0800a3a1 	.word	0x0800a3a1
 800a3e4:	0800a3a1 	.word	0x0800a3a1
 800a3e8:	0800a3a1 	.word	0x0800a3a1
 800a3ec:	0800a3a1 	.word	0x0800a3a1
 800a3f0:	0800a3a1 	.word	0x0800a3a1
 800a3f4:	0800a50b 	.word	0x0800a50b
 800a3f8:	0800a4f1 	.word	0x0800a4f1
 800a3fc:	0800a453 	.word	0x0800a453
 800a400:	0800a453 	.word	0x0800a453
 800a404:	0800a453 	.word	0x0800a453
 800a408:	0800a3a1 	.word	0x0800a3a1
 800a40c:	0800a4ad 	.word	0x0800a4ad
 800a410:	0800a3a1 	.word	0x0800a3a1
 800a414:	0800a3a1 	.word	0x0800a3a1
 800a418:	0800a3a1 	.word	0x0800a3a1
 800a41c:	0800a3a1 	.word	0x0800a3a1
 800a420:	0800a51b 	.word	0x0800a51b
 800a424:	0800a4b5 	.word	0x0800a4b5
 800a428:	0800a493 	.word	0x0800a493
 800a42c:	0800a3a1 	.word	0x0800a3a1
 800a430:	0800a3a1 	.word	0x0800a3a1
 800a434:	0800a517 	.word	0x0800a517
 800a438:	0800a3a1 	.word	0x0800a3a1
 800a43c:	0800a4f1 	.word	0x0800a4f1
 800a440:	0800a3a1 	.word	0x0800a3a1
 800a444:	0800a3a1 	.word	0x0800a3a1
 800a448:	0800a49b 	.word	0x0800a49b
 800a44c:	3b45      	subs	r3, #69	@ 0x45
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d8a6      	bhi.n	800a3a0 <__ssvfiscanf_r+0xd0>
 800a452:	2305      	movs	r3, #5
 800a454:	e031      	b.n	800a4ba <__ssvfiscanf_r+0x1ea>
 800a456:	6863      	ldr	r3, [r4, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dd0d      	ble.n	800a478 <__ssvfiscanf_r+0x1a8>
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	454a      	cmp	r2, r9
 800a462:	f040 80a6 	bne.w	800a5b2 <__ssvfiscanf_r+0x2e2>
 800a466:	3301      	adds	r3, #1
 800a468:	6862      	ldr	r2, [r4, #4]
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a46e:	3a01      	subs	r2, #1
 800a470:	3301      	adds	r3, #1
 800a472:	6062      	str	r2, [r4, #4]
 800a474:	9345      	str	r3, [sp, #276]	@ 0x114
 800a476:	e753      	b.n	800a320 <__ssvfiscanf_r+0x50>
 800a478:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a47a:	4621      	mov	r1, r4
 800a47c:	4630      	mov	r0, r6
 800a47e:	4798      	blx	r3
 800a480:	2800      	cmp	r0, #0
 800a482:	d0eb      	beq.n	800a45c <__ssvfiscanf_r+0x18c>
 800a484:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a486:	2800      	cmp	r0, #0
 800a488:	f040 808b 	bne.w	800a5a2 <__ssvfiscanf_r+0x2d2>
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	e08b      	b.n	800a5aa <__ssvfiscanf_r+0x2da>
 800a492:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a494:	f042 0220 	orr.w	r2, r2, #32
 800a498:	9241      	str	r2, [sp, #260]	@ 0x104
 800a49a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a49c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a4a2:	2210      	movs	r2, #16
 800a4a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a4a6:	9242      	str	r2, [sp, #264]	@ 0x108
 800a4a8:	d902      	bls.n	800a4b0 <__ssvfiscanf_r+0x1e0>
 800a4aa:	e005      	b.n	800a4b8 <__ssvfiscanf_r+0x1e8>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e002      	b.n	800a4ba <__ssvfiscanf_r+0x1ea>
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd39      	ble.n	800a536 <__ssvfiscanf_r+0x266>
 800a4c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a4c4:	0659      	lsls	r1, r3, #25
 800a4c6:	d404      	bmi.n	800a4d2 <__ssvfiscanf_r+0x202>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	5cba      	ldrb	r2, [r7, r2]
 800a4ce:	0712      	lsls	r2, r2, #28
 800a4d0:	d438      	bmi.n	800a544 <__ssvfiscanf_r+0x274>
 800a4d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	dc47      	bgt.n	800a568 <__ssvfiscanf_r+0x298>
 800a4d8:	466b      	mov	r3, sp
 800a4da:	4622      	mov	r2, r4
 800a4dc:	a941      	add	r1, sp, #260	@ 0x104
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f000 f86c 	bl	800a5bc <_scanf_chars>
 800a4e4:	2801      	cmp	r0, #1
 800a4e6:	d064      	beq.n	800a5b2 <__ssvfiscanf_r+0x2e2>
 800a4e8:	2802      	cmp	r0, #2
 800a4ea:	f47f af19 	bne.w	800a320 <__ssvfiscanf_r+0x50>
 800a4ee:	e7c9      	b.n	800a484 <__ssvfiscanf_r+0x1b4>
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	e7d7      	b.n	800a4a4 <__ssvfiscanf_r+0x1d4>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f000 fa6c 	bl	800a9d4 <__sccl>
 800a4fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a502:	9341      	str	r3, [sp, #260]	@ 0x104
 800a504:	4605      	mov	r5, r0
 800a506:	2301      	movs	r3, #1
 800a508:	e7d7      	b.n	800a4ba <__ssvfiscanf_r+0x1ea>
 800a50a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a510:	9341      	str	r3, [sp, #260]	@ 0x104
 800a512:	2300      	movs	r3, #0
 800a514:	e7d1      	b.n	800a4ba <__ssvfiscanf_r+0x1ea>
 800a516:	2302      	movs	r3, #2
 800a518:	e7cf      	b.n	800a4ba <__ssvfiscanf_r+0x1ea>
 800a51a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a51c:	06c3      	lsls	r3, r0, #27
 800a51e:	f53f aeff 	bmi.w	800a320 <__ssvfiscanf_r+0x50>
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a526:	1d19      	adds	r1, r3, #4
 800a528:	9100      	str	r1, [sp, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	07c0      	lsls	r0, r0, #31
 800a52e:	bf4c      	ite	mi
 800a530:	801a      	strhmi	r2, [r3, #0]
 800a532:	601a      	strpl	r2, [r3, #0]
 800a534:	e6f4      	b.n	800a320 <__ssvfiscanf_r+0x50>
 800a536:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a538:	4621      	mov	r1, r4
 800a53a:	4630      	mov	r0, r6
 800a53c:	4798      	blx	r3
 800a53e:	2800      	cmp	r0, #0
 800a540:	d0bf      	beq.n	800a4c2 <__ssvfiscanf_r+0x1f2>
 800a542:	e79f      	b.n	800a484 <__ssvfiscanf_r+0x1b4>
 800a544:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a546:	3201      	adds	r2, #1
 800a548:	9245      	str	r2, [sp, #276]	@ 0x114
 800a54a:	6862      	ldr	r2, [r4, #4]
 800a54c:	3a01      	subs	r2, #1
 800a54e:	2a00      	cmp	r2, #0
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	dd02      	ble.n	800a55a <__ssvfiscanf_r+0x28a>
 800a554:	3301      	adds	r3, #1
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	e7b6      	b.n	800a4c8 <__ssvfiscanf_r+0x1f8>
 800a55a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a55c:	4621      	mov	r1, r4
 800a55e:	4630      	mov	r0, r6
 800a560:	4798      	blx	r3
 800a562:	2800      	cmp	r0, #0
 800a564:	d0b0      	beq.n	800a4c8 <__ssvfiscanf_r+0x1f8>
 800a566:	e78d      	b.n	800a484 <__ssvfiscanf_r+0x1b4>
 800a568:	2b04      	cmp	r3, #4
 800a56a:	dc0f      	bgt.n	800a58c <__ssvfiscanf_r+0x2bc>
 800a56c:	466b      	mov	r3, sp
 800a56e:	4622      	mov	r2, r4
 800a570:	a941      	add	r1, sp, #260	@ 0x104
 800a572:	4630      	mov	r0, r6
 800a574:	f000 f87c 	bl	800a670 <_scanf_i>
 800a578:	e7b4      	b.n	800a4e4 <__ssvfiscanf_r+0x214>
 800a57a:	bf00      	nop
 800a57c:	0800a21d 	.word	0x0800a21d
 800a580:	0800a297 	.word	0x0800a297
 800a584:	0800bdf9 	.word	0x0800bdf9
 800a588:	0800bc1b 	.word	0x0800bc1b
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <__ssvfiscanf_r+0x2e8>)
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f43f aec6 	beq.w	800a320 <__ssvfiscanf_r+0x50>
 800a594:	466b      	mov	r3, sp
 800a596:	4622      	mov	r2, r4
 800a598:	a941      	add	r1, sp, #260	@ 0x104
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7fc fdb2 	bl	8007104 <_scanf_float>
 800a5a0:	e7a0      	b.n	800a4e4 <__ssvfiscanf_r+0x214>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	065b      	lsls	r3, r3, #25
 800a5a6:	f53f af71 	bmi.w	800a48c <__ssvfiscanf_r+0x1bc>
 800a5aa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a5b4:	e7f9      	b.n	800a5aa <__ssvfiscanf_r+0x2da>
 800a5b6:	bf00      	nop
 800a5b8:	08007105 	.word	0x08007105

0800a5bc <_scanf_chars>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	4615      	mov	r5, r2
 800a5c2:	688a      	ldr	r2, [r1, #8]
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b932      	cbnz	r2, 800a5d8 <_scanf_chars+0x1c>
 800a5ca:	698a      	ldr	r2, [r1, #24]
 800a5cc:	2a00      	cmp	r2, #0
 800a5ce:	bf14      	ite	ne
 800a5d0:	f04f 32ff 	movne.w	r2, #4294967295
 800a5d4:	2201      	moveq	r2, #1
 800a5d6:	608a      	str	r2, [r1, #8]
 800a5d8:	6822      	ldr	r2, [r4, #0]
 800a5da:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a66c <_scanf_chars+0xb0>
 800a5de:	06d1      	lsls	r1, r2, #27
 800a5e0:	bf5f      	itttt	pl
 800a5e2:	681a      	ldrpl	r2, [r3, #0]
 800a5e4:	1d11      	addpl	r1, r2, #4
 800a5e6:	6019      	strpl	r1, [r3, #0]
 800a5e8:	6816      	ldrpl	r6, [r2, #0]
 800a5ea:	2700      	movs	r7, #0
 800a5ec:	69a0      	ldr	r0, [r4, #24]
 800a5ee:	b188      	cbz	r0, 800a614 <_scanf_chars+0x58>
 800a5f0:	2801      	cmp	r0, #1
 800a5f2:	d107      	bne.n	800a604 <_scanf_chars+0x48>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	6963      	ldr	r3, [r4, #20]
 800a5fa:	5c9b      	ldrb	r3, [r3, r2]
 800a5fc:	b953      	cbnz	r3, 800a614 <_scanf_chars+0x58>
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	d031      	beq.n	800a666 <_scanf_chars+0xaa>
 800a602:	e022      	b.n	800a64a <_scanf_chars+0x8e>
 800a604:	2802      	cmp	r0, #2
 800a606:	d120      	bne.n	800a64a <_scanf_chars+0x8e>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a610:	071b      	lsls	r3, r3, #28
 800a612:	d41a      	bmi.n	800a64a <_scanf_chars+0x8e>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	06da      	lsls	r2, r3, #27
 800a618:	bf5e      	ittt	pl
 800a61a:	682b      	ldrpl	r3, [r5, #0]
 800a61c:	781b      	ldrbpl	r3, [r3, #0]
 800a61e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a622:	682a      	ldr	r2, [r5, #0]
 800a624:	686b      	ldr	r3, [r5, #4]
 800a626:	3201      	adds	r2, #1
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	68a2      	ldr	r2, [r4, #8]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	3a01      	subs	r2, #1
 800a630:	606b      	str	r3, [r5, #4]
 800a632:	3701      	adds	r7, #1
 800a634:	60a2      	str	r2, [r4, #8]
 800a636:	b142      	cbz	r2, 800a64a <_scanf_chars+0x8e>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dcd7      	bgt.n	800a5ec <_scanf_chars+0x30>
 800a63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a640:	4629      	mov	r1, r5
 800a642:	4640      	mov	r0, r8
 800a644:	4798      	blx	r3
 800a646:	2800      	cmp	r0, #0
 800a648:	d0d0      	beq.n	800a5ec <_scanf_chars+0x30>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f013 0310 	ands.w	r3, r3, #16
 800a650:	d105      	bne.n	800a65e <_scanf_chars+0xa2>
 800a652:	68e2      	ldr	r2, [r4, #12]
 800a654:	3201      	adds	r2, #1
 800a656:	60e2      	str	r2, [r4, #12]
 800a658:	69a2      	ldr	r2, [r4, #24]
 800a65a:	b102      	cbz	r2, 800a65e <_scanf_chars+0xa2>
 800a65c:	7033      	strb	r3, [r6, #0]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	443b      	add	r3, r7
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	2000      	movs	r0, #0
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	bf00      	nop
 800a66c:	0800bdf9 	.word	0x0800bdf9

0800a670 <_scanf_i>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	4b74      	ldr	r3, [pc, #464]	@ (800a848 <_scanf_i+0x1d8>)
 800a678:	460c      	mov	r4, r1
 800a67a:	4682      	mov	sl, r0
 800a67c:	4616      	mov	r6, r2
 800a67e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a682:	b087      	sub	sp, #28
 800a684:	ab03      	add	r3, sp, #12
 800a686:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a68a:	4b70      	ldr	r3, [pc, #448]	@ (800a84c <_scanf_i+0x1dc>)
 800a68c:	69a1      	ldr	r1, [r4, #24]
 800a68e:	4a70      	ldr	r2, [pc, #448]	@ (800a850 <_scanf_i+0x1e0>)
 800a690:	2903      	cmp	r1, #3
 800a692:	bf08      	it	eq
 800a694:	461a      	moveq	r2, r3
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	9201      	str	r2, [sp, #4]
 800a69a:	1e5a      	subs	r2, r3, #1
 800a69c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6a0:	bf88      	it	hi
 800a6a2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6a6:	4627      	mov	r7, r4
 800a6a8:	bf82      	ittt	hi
 800a6aa:	eb03 0905 	addhi.w	r9, r3, r5
 800a6ae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6b2:	60a3      	strhi	r3, [r4, #8]
 800a6b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a6b8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a6bc:	bf98      	it	ls
 800a6be:	f04f 0900 	movls.w	r9, #0
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	463d      	mov	r5, r7
 800a6c6:	f04f 0b00 	mov.w	fp, #0
 800a6ca:	6831      	ldr	r1, [r6, #0]
 800a6cc:	ab03      	add	r3, sp, #12
 800a6ce:	7809      	ldrb	r1, [r1, #0]
 800a6d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	f7f5 fd93 	bl	8000200 <memchr>
 800a6da:	b328      	cbz	r0, 800a728 <_scanf_i+0xb8>
 800a6dc:	f1bb 0f01 	cmp.w	fp, #1
 800a6e0:	d159      	bne.n	800a796 <_scanf_i+0x126>
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	b92a      	cbnz	r2, 800a6f2 <_scanf_i+0x82>
 800a6e6:	6822      	ldr	r2, [r4, #0]
 800a6e8:	2108      	movs	r1, #8
 800a6ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6ee:	6061      	str	r1, [r4, #4]
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a6f8:	6022      	str	r2, [r4, #0]
 800a6fa:	68a2      	ldr	r2, [r4, #8]
 800a6fc:	1e51      	subs	r1, r2, #1
 800a6fe:	60a1      	str	r1, [r4, #8]
 800a700:	b192      	cbz	r2, 800a728 <_scanf_i+0xb8>
 800a702:	6832      	ldr	r2, [r6, #0]
 800a704:	1c51      	adds	r1, r2, #1
 800a706:	6031      	str	r1, [r6, #0]
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	f805 2b01 	strb.w	r2, [r5], #1
 800a70e:	6872      	ldr	r2, [r6, #4]
 800a710:	3a01      	subs	r2, #1
 800a712:	2a00      	cmp	r2, #0
 800a714:	6072      	str	r2, [r6, #4]
 800a716:	dc07      	bgt.n	800a728 <_scanf_i+0xb8>
 800a718:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a71c:	4631      	mov	r1, r6
 800a71e:	4650      	mov	r0, sl
 800a720:	4790      	blx	r2
 800a722:	2800      	cmp	r0, #0
 800a724:	f040 8085 	bne.w	800a832 <_scanf_i+0x1c2>
 800a728:	f10b 0b01 	add.w	fp, fp, #1
 800a72c:	f1bb 0f03 	cmp.w	fp, #3
 800a730:	d1cb      	bne.n	800a6ca <_scanf_i+0x5a>
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	b90b      	cbnz	r3, 800a73a <_scanf_i+0xca>
 800a736:	230a      	movs	r3, #10
 800a738:	6063      	str	r3, [r4, #4]
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	4945      	ldr	r1, [pc, #276]	@ (800a854 <_scanf_i+0x1e4>)
 800a73e:	6960      	ldr	r0, [r4, #20]
 800a740:	1ac9      	subs	r1, r1, r3
 800a742:	f000 f947 	bl	800a9d4 <__sccl>
 800a746:	f04f 0b00 	mov.w	fp, #0
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d03d      	beq.n	800a7ce <_scanf_i+0x15e>
 800a752:	6831      	ldr	r1, [r6, #0]
 800a754:	6960      	ldr	r0, [r4, #20]
 800a756:	f891 c000 	ldrb.w	ip, [r1]
 800a75a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a75e:	2800      	cmp	r0, #0
 800a760:	d035      	beq.n	800a7ce <_scanf_i+0x15e>
 800a762:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a766:	d124      	bne.n	800a7b2 <_scanf_i+0x142>
 800a768:	0510      	lsls	r0, r2, #20
 800a76a:	d522      	bpl.n	800a7b2 <_scanf_i+0x142>
 800a76c:	f10b 0b01 	add.w	fp, fp, #1
 800a770:	f1b9 0f00 	cmp.w	r9, #0
 800a774:	d003      	beq.n	800a77e <_scanf_i+0x10e>
 800a776:	3301      	adds	r3, #1
 800a778:	f109 39ff 	add.w	r9, r9, #4294967295
 800a77c:	60a3      	str	r3, [r4, #8]
 800a77e:	6873      	ldr	r3, [r6, #4]
 800a780:	3b01      	subs	r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	6073      	str	r3, [r6, #4]
 800a786:	dd1b      	ble.n	800a7c0 <_scanf_i+0x150>
 800a788:	6833      	ldr	r3, [r6, #0]
 800a78a:	3301      	adds	r3, #1
 800a78c:	6033      	str	r3, [r6, #0]
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	3b01      	subs	r3, #1
 800a792:	60a3      	str	r3, [r4, #8]
 800a794:	e7d9      	b.n	800a74a <_scanf_i+0xda>
 800a796:	f1bb 0f02 	cmp.w	fp, #2
 800a79a:	d1ae      	bne.n	800a6fa <_scanf_i+0x8a>
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a7a2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a7a6:	d1c4      	bne.n	800a732 <_scanf_i+0xc2>
 800a7a8:	2110      	movs	r1, #16
 800a7aa:	6061      	str	r1, [r4, #4]
 800a7ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7b0:	e7a2      	b.n	800a6f8 <_scanf_i+0x88>
 800a7b2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	780b      	ldrb	r3, [r1, #0]
 800a7ba:	f805 3b01 	strb.w	r3, [r5], #1
 800a7be:	e7de      	b.n	800a77e <_scanf_i+0x10e>
 800a7c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	4798      	blx	r3
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d0df      	beq.n	800a78e <_scanf_i+0x11e>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	05d9      	lsls	r1, r3, #23
 800a7d2:	d50d      	bpl.n	800a7f0 <_scanf_i+0x180>
 800a7d4:	42bd      	cmp	r5, r7
 800a7d6:	d909      	bls.n	800a7ec <_scanf_i+0x17c>
 800a7d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a7dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	4798      	blx	r3
 800a7e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a7ea:	464d      	mov	r5, r9
 800a7ec:	42bd      	cmp	r5, r7
 800a7ee:	d028      	beq.n	800a842 <_scanf_i+0x1d2>
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	f012 0210 	ands.w	r2, r2, #16
 800a7f6:	d113      	bne.n	800a820 <_scanf_i+0x1b0>
 800a7f8:	702a      	strb	r2, [r5, #0]
 800a7fa:	6863      	ldr	r3, [r4, #4]
 800a7fc:	9e01      	ldr	r6, [sp, #4]
 800a7fe:	4639      	mov	r1, r7
 800a800:	4650      	mov	r0, sl
 800a802:	47b0      	blx	r6
 800a804:	f8d8 3000 	ldr.w	r3, [r8]
 800a808:	6821      	ldr	r1, [r4, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	f8c8 2000 	str.w	r2, [r8]
 800a810:	f011 0f20 	tst.w	r1, #32
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	d00f      	beq.n	800a838 <_scanf_i+0x1c8>
 800a818:	6018      	str	r0, [r3, #0]
 800a81a:	68e3      	ldr	r3, [r4, #12]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60e3      	str	r3, [r4, #12]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	1bed      	subs	r5, r5, r7
 800a824:	445d      	add	r5, fp
 800a826:	442b      	add	r3, r5
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	2000      	movs	r0, #0
 800a82c:	b007      	add	sp, #28
 800a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a832:	f04f 0b00 	mov.w	fp, #0
 800a836:	e7ca      	b.n	800a7ce <_scanf_i+0x15e>
 800a838:	07ca      	lsls	r2, r1, #31
 800a83a:	bf4c      	ite	mi
 800a83c:	8018      	strhmi	r0, [r3, #0]
 800a83e:	6018      	strpl	r0, [r3, #0]
 800a840:	e7eb      	b.n	800a81a <_scanf_i+0x1aa>
 800a842:	2001      	movs	r0, #1
 800a844:	e7f2      	b.n	800a82c <_scanf_i+0x1bc>
 800a846:	bf00      	nop
 800a848:	0800b9a8 	.word	0x0800b9a8
 800a84c:	08009f69 	.word	0x08009f69
 800a850:	0800b34d 	.word	0x0800b34d
 800a854:	0800bc36 	.word	0x0800bc36

0800a858 <__sflush_r>:
 800a858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	0716      	lsls	r6, r2, #28
 800a862:	4605      	mov	r5, r0
 800a864:	460c      	mov	r4, r1
 800a866:	d454      	bmi.n	800a912 <__sflush_r+0xba>
 800a868:	684b      	ldr	r3, [r1, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dc02      	bgt.n	800a874 <__sflush_r+0x1c>
 800a86e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd48      	ble.n	800a906 <__sflush_r+0xae>
 800a874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a876:	2e00      	cmp	r6, #0
 800a878:	d045      	beq.n	800a906 <__sflush_r+0xae>
 800a87a:	2300      	movs	r3, #0
 800a87c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a880:	682f      	ldr	r7, [r5, #0]
 800a882:	6a21      	ldr	r1, [r4, #32]
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	d030      	beq.n	800a8ea <__sflush_r+0x92>
 800a888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	0759      	lsls	r1, r3, #29
 800a88e:	d505      	bpl.n	800a89c <__sflush_r+0x44>
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	1ad2      	subs	r2, r2, r3
 800a894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a896:	b10b      	cbz	r3, 800a89c <__sflush_r+0x44>
 800a898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	2300      	movs	r3, #0
 800a89e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a0:	6a21      	ldr	r1, [r4, #32]
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b0      	blx	r6
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	d106      	bne.n	800a8ba <__sflush_r+0x62>
 800a8ac:	6829      	ldr	r1, [r5, #0]
 800a8ae:	291d      	cmp	r1, #29
 800a8b0:	d82b      	bhi.n	800a90a <__sflush_r+0xb2>
 800a8b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a95c <__sflush_r+0x104>)
 800a8b4:	40ca      	lsrs	r2, r1
 800a8b6:	07d6      	lsls	r6, r2, #31
 800a8b8:	d527      	bpl.n	800a90a <__sflush_r+0xb2>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	6062      	str	r2, [r4, #4]
 800a8be:	04d9      	lsls	r1, r3, #19
 800a8c0:	6922      	ldr	r2, [r4, #16]
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	d504      	bpl.n	800a8d0 <__sflush_r+0x78>
 800a8c6:	1c42      	adds	r2, r0, #1
 800a8c8:	d101      	bne.n	800a8ce <__sflush_r+0x76>
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	b903      	cbnz	r3, 800a8d0 <__sflush_r+0x78>
 800a8ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8d2:	602f      	str	r7, [r5, #0]
 800a8d4:	b1b9      	cbz	r1, 800a906 <__sflush_r+0xae>
 800a8d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8da:	4299      	cmp	r1, r3
 800a8dc:	d002      	beq.n	800a8e4 <__sflush_r+0x8c>
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f7fd ff16 	bl	8008710 <_free_r>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8e8:	e00d      	b.n	800a906 <__sflush_r+0xae>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b0      	blx	r6
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	1c50      	adds	r0, r2, #1
 800a8f4:	d1c9      	bne.n	800a88a <__sflush_r+0x32>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0c6      	beq.n	800a88a <__sflush_r+0x32>
 800a8fc:	2b1d      	cmp	r3, #29
 800a8fe:	d001      	beq.n	800a904 <__sflush_r+0xac>
 800a900:	2b16      	cmp	r3, #22
 800a902:	d11e      	bne.n	800a942 <__sflush_r+0xea>
 800a904:	602f      	str	r7, [r5, #0]
 800a906:	2000      	movs	r0, #0
 800a908:	e022      	b.n	800a950 <__sflush_r+0xf8>
 800a90a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a90e:	b21b      	sxth	r3, r3
 800a910:	e01b      	b.n	800a94a <__sflush_r+0xf2>
 800a912:	690f      	ldr	r7, [r1, #16]
 800a914:	2f00      	cmp	r7, #0
 800a916:	d0f6      	beq.n	800a906 <__sflush_r+0xae>
 800a918:	0793      	lsls	r3, r2, #30
 800a91a:	680e      	ldr	r6, [r1, #0]
 800a91c:	bf08      	it	eq
 800a91e:	694b      	ldreq	r3, [r1, #20]
 800a920:	600f      	str	r7, [r1, #0]
 800a922:	bf18      	it	ne
 800a924:	2300      	movne	r3, #0
 800a926:	eba6 0807 	sub.w	r8, r6, r7
 800a92a:	608b      	str	r3, [r1, #8]
 800a92c:	f1b8 0f00 	cmp.w	r8, #0
 800a930:	dde9      	ble.n	800a906 <__sflush_r+0xae>
 800a932:	6a21      	ldr	r1, [r4, #32]
 800a934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a936:	4643      	mov	r3, r8
 800a938:	463a      	mov	r2, r7
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b0      	blx	r6
 800a93e:	2800      	cmp	r0, #0
 800a940:	dc08      	bgt.n	800a954 <__sflush_r+0xfc>
 800a942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	4407      	add	r7, r0
 800a956:	eba8 0800 	sub.w	r8, r8, r0
 800a95a:	e7e7      	b.n	800a92c <__sflush_r+0xd4>
 800a95c:	20400001 	.word	0x20400001

0800a960 <_fflush_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	690b      	ldr	r3, [r1, #16]
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	b913      	cbnz	r3, 800a970 <_fflush_r+0x10>
 800a96a:	2500      	movs	r5, #0
 800a96c:	4628      	mov	r0, r5
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	b118      	cbz	r0, 800a97a <_fflush_r+0x1a>
 800a972:	6a03      	ldr	r3, [r0, #32]
 800a974:	b90b      	cbnz	r3, 800a97a <_fflush_r+0x1a>
 800a976:	f7fc fe5f 	bl	8007638 <__sinit>
 800a97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0f3      	beq.n	800a96a <_fflush_r+0xa>
 800a982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a984:	07d0      	lsls	r0, r2, #31
 800a986:	d404      	bmi.n	800a992 <_fflush_r+0x32>
 800a988:	0599      	lsls	r1, r3, #22
 800a98a:	d402      	bmi.n	800a992 <_fflush_r+0x32>
 800a98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a98e:	f7fd f832 	bl	80079f6 <__retarget_lock_acquire_recursive>
 800a992:	4628      	mov	r0, r5
 800a994:	4621      	mov	r1, r4
 800a996:	f7ff ff5f 	bl	800a858 <__sflush_r>
 800a99a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a99c:	07da      	lsls	r2, r3, #31
 800a99e:	4605      	mov	r5, r0
 800a9a0:	d4e4      	bmi.n	800a96c <_fflush_r+0xc>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	059b      	lsls	r3, r3, #22
 800a9a6:	d4e1      	bmi.n	800a96c <_fflush_r+0xc>
 800a9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9aa:	f7fd f825 	bl	80079f8 <__retarget_lock_release_recursive>
 800a9ae:	e7dd      	b.n	800a96c <_fflush_r+0xc>

0800a9b0 <fiprintf>:
 800a9b0:	b40e      	push	{r1, r2, r3}
 800a9b2:	b503      	push	{r0, r1, lr}
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	ab03      	add	r3, sp, #12
 800a9b8:	4805      	ldr	r0, [pc, #20]	@ (800a9d0 <fiprintf+0x20>)
 800a9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9be:	6800      	ldr	r0, [r0, #0]
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	f000 fcfb 	bl	800b3bc <_vfiprintf_r>
 800a9c6:	b002      	add	sp, #8
 800a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	4770      	bx	lr
 800a9d0:	20000030 	.word	0x20000030

0800a9d4 <__sccl>:
 800a9d4:	b570      	push	{r4, r5, r6, lr}
 800a9d6:	780b      	ldrb	r3, [r1, #0]
 800a9d8:	4604      	mov	r4, r0
 800a9da:	2b5e      	cmp	r3, #94	@ 0x5e
 800a9dc:	bf0b      	itete	eq
 800a9de:	784b      	ldrbeq	r3, [r1, #1]
 800a9e0:	1c4a      	addne	r2, r1, #1
 800a9e2:	1c8a      	addeq	r2, r1, #2
 800a9e4:	2100      	movne	r1, #0
 800a9e6:	bf08      	it	eq
 800a9e8:	2101      	moveq	r1, #1
 800a9ea:	3801      	subs	r0, #1
 800a9ec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a9f0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a9f4:	42a8      	cmp	r0, r5
 800a9f6:	d1fb      	bne.n	800a9f0 <__sccl+0x1c>
 800a9f8:	b90b      	cbnz	r3, 800a9fe <__sccl+0x2a>
 800a9fa:	1e50      	subs	r0, r2, #1
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
 800a9fe:	f081 0101 	eor.w	r1, r1, #1
 800aa02:	54e1      	strb	r1, [r4, r3]
 800aa04:	4610      	mov	r0, r2
 800aa06:	4602      	mov	r2, r0
 800aa08:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aa0c:	2d2d      	cmp	r5, #45	@ 0x2d
 800aa0e:	d005      	beq.n	800aa1c <__sccl+0x48>
 800aa10:	2d5d      	cmp	r5, #93	@ 0x5d
 800aa12:	d016      	beq.n	800aa42 <__sccl+0x6e>
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	d0f1      	beq.n	800a9fc <__sccl+0x28>
 800aa18:	462b      	mov	r3, r5
 800aa1a:	e7f2      	b.n	800aa02 <__sccl+0x2e>
 800aa1c:	7846      	ldrb	r6, [r0, #1]
 800aa1e:	2e5d      	cmp	r6, #93	@ 0x5d
 800aa20:	d0fa      	beq.n	800aa18 <__sccl+0x44>
 800aa22:	42b3      	cmp	r3, r6
 800aa24:	dcf8      	bgt.n	800aa18 <__sccl+0x44>
 800aa26:	3002      	adds	r0, #2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	4296      	cmp	r6, r2
 800aa2e:	54a1      	strb	r1, [r4, r2]
 800aa30:	dcfb      	bgt.n	800aa2a <__sccl+0x56>
 800aa32:	1af2      	subs	r2, r6, r3
 800aa34:	3a01      	subs	r2, #1
 800aa36:	1c5d      	adds	r5, r3, #1
 800aa38:	42b3      	cmp	r3, r6
 800aa3a:	bfa8      	it	ge
 800aa3c:	2200      	movge	r2, #0
 800aa3e:	18ab      	adds	r3, r5, r2
 800aa40:	e7e1      	b.n	800aa06 <__sccl+0x32>
 800aa42:	4610      	mov	r0, r2
 800aa44:	e7da      	b.n	800a9fc <__sccl+0x28>

0800aa46 <__submore>:
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800aa4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa52:	4299      	cmp	r1, r3
 800aa54:	d11d      	bne.n	800aa92 <__submore+0x4c>
 800aa56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aa5a:	f7fd fecd 	bl	80087f8 <_malloc_r>
 800aa5e:	b918      	cbnz	r0, 800aa68 <__submore+0x22>
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa6e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800aa72:	6360      	str	r0, [r4, #52]	@ 0x34
 800aa74:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800aa78:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aa7c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800aa80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aa84:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800aa88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800aa8c:	6020      	str	r0, [r4, #0]
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e7e8      	b.n	800aa64 <__submore+0x1e>
 800aa92:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800aa94:	0077      	lsls	r7, r6, #1
 800aa96:	463a      	mov	r2, r7
 800aa98:	f000 fbbb 	bl	800b212 <_realloc_r>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d0de      	beq.n	800aa60 <__submore+0x1a>
 800aaa2:	eb00 0806 	add.w	r8, r0, r6
 800aaa6:	4601      	mov	r1, r0
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7fc ffa5 	bl	80079fa <memcpy>
 800aab0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800aab4:	f8c4 8000 	str.w	r8, [r4]
 800aab8:	e7e9      	b.n	800aa8e <__submore+0x48>

0800aaba <memmove>:
 800aaba:	4288      	cmp	r0, r1
 800aabc:	b510      	push	{r4, lr}
 800aabe:	eb01 0402 	add.w	r4, r1, r2
 800aac2:	d902      	bls.n	800aaca <memmove+0x10>
 800aac4:	4284      	cmp	r4, r0
 800aac6:	4623      	mov	r3, r4
 800aac8:	d807      	bhi.n	800aada <memmove+0x20>
 800aaca:	1e43      	subs	r3, r0, #1
 800aacc:	42a1      	cmp	r1, r4
 800aace:	d008      	beq.n	800aae2 <memmove+0x28>
 800aad0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aad4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aad8:	e7f8      	b.n	800aacc <memmove+0x12>
 800aada:	4402      	add	r2, r0
 800aadc:	4601      	mov	r1, r0
 800aade:	428a      	cmp	r2, r1
 800aae0:	d100      	bne.n	800aae4 <memmove+0x2a>
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aae8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaec:	e7f7      	b.n	800aade <memmove+0x24>

0800aaee <strncmp>:
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	b16a      	cbz	r2, 800ab0e <strncmp+0x20>
 800aaf2:	3901      	subs	r1, #1
 800aaf4:	1884      	adds	r4, r0, r2
 800aaf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d103      	bne.n	800ab0a <strncmp+0x1c>
 800ab02:	42a0      	cmp	r0, r4
 800ab04:	d001      	beq.n	800ab0a <strncmp+0x1c>
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	d1f5      	bne.n	800aaf6 <strncmp+0x8>
 800ab0a:	1ad0      	subs	r0, r2, r3
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	4610      	mov	r0, r2
 800ab10:	e7fc      	b.n	800ab0c <strncmp+0x1e>
	...

0800ab14 <_sbrk_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	@ (800ab30 <_sbrk_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f7 fda8 	bl	8002674 <_sbrk>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_sbrk_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_sbrk_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000c54 	.word	0x20000c54
 800ab34:	00000000 	.word	0x00000000

0800ab38 <nan>:
 800ab38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab40 <nan+0x8>
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	00000000 	.word	0x00000000
 800ab44:	7ff80000 	.word	0x7ff80000

0800ab48 <abort>:
 800ab48:	b508      	push	{r3, lr}
 800ab4a:	2006      	movs	r0, #6
 800ab4c:	f000 fe0a 	bl	800b764 <raise>
 800ab50:	2001      	movs	r0, #1
 800ab52:	f7f7 fd17 	bl	8002584 <_exit>

0800ab56 <_calloc_r>:
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	fba1 5402 	umull	r5, r4, r1, r2
 800ab5c:	b934      	cbnz	r4, 800ab6c <_calloc_r+0x16>
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7fd fe4a 	bl	80087f8 <_malloc_r>
 800ab64:	4606      	mov	r6, r0
 800ab66:	b928      	cbnz	r0, 800ab74 <_calloc_r+0x1e>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	220c      	movs	r2, #12
 800ab6e:	6002      	str	r2, [r0, #0]
 800ab70:	2600      	movs	r6, #0
 800ab72:	e7f9      	b.n	800ab68 <_calloc_r+0x12>
 800ab74:	462a      	mov	r2, r5
 800ab76:	4621      	mov	r1, r4
 800ab78:	f7fc fe64 	bl	8007844 <memset>
 800ab7c:	e7f4      	b.n	800ab68 <_calloc_r+0x12>

0800ab7e <rshift>:
 800ab7e:	6903      	ldr	r3, [r0, #16]
 800ab80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab88:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab8c:	f100 0414 	add.w	r4, r0, #20
 800ab90:	dd45      	ble.n	800ac1e <rshift+0xa0>
 800ab92:	f011 011f 	ands.w	r1, r1, #31
 800ab96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab9e:	d10c      	bne.n	800abba <rshift+0x3c>
 800aba0:	f100 0710 	add.w	r7, r0, #16
 800aba4:	4629      	mov	r1, r5
 800aba6:	42b1      	cmp	r1, r6
 800aba8:	d334      	bcc.n	800ac14 <rshift+0x96>
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	1eea      	subs	r2, r5, #3
 800abb0:	4296      	cmp	r6, r2
 800abb2:	bf38      	it	cc
 800abb4:	2300      	movcc	r3, #0
 800abb6:	4423      	add	r3, r4
 800abb8:	e015      	b.n	800abe6 <rshift+0x68>
 800abba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abbe:	f1c1 0820 	rsb	r8, r1, #32
 800abc2:	40cf      	lsrs	r7, r1
 800abc4:	f105 0e04 	add.w	lr, r5, #4
 800abc8:	46a1      	mov	r9, r4
 800abca:	4576      	cmp	r6, lr
 800abcc:	46f4      	mov	ip, lr
 800abce:	d815      	bhi.n	800abfc <rshift+0x7e>
 800abd0:	1a9a      	subs	r2, r3, r2
 800abd2:	0092      	lsls	r2, r2, #2
 800abd4:	3a04      	subs	r2, #4
 800abd6:	3501      	adds	r5, #1
 800abd8:	42ae      	cmp	r6, r5
 800abda:	bf38      	it	cc
 800abdc:	2200      	movcc	r2, #0
 800abde:	18a3      	adds	r3, r4, r2
 800abe0:	50a7      	str	r7, [r4, r2]
 800abe2:	b107      	cbz	r7, 800abe6 <rshift+0x68>
 800abe4:	3304      	adds	r3, #4
 800abe6:	1b1a      	subs	r2, r3, r4
 800abe8:	42a3      	cmp	r3, r4
 800abea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abee:	bf08      	it	eq
 800abf0:	2300      	moveq	r3, #0
 800abf2:	6102      	str	r2, [r0, #16]
 800abf4:	bf08      	it	eq
 800abf6:	6143      	streq	r3, [r0, #20]
 800abf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfc:	f8dc c000 	ldr.w	ip, [ip]
 800ac00:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac04:	ea4c 0707 	orr.w	r7, ip, r7
 800ac08:	f849 7b04 	str.w	r7, [r9], #4
 800ac0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac10:	40cf      	lsrs	r7, r1
 800ac12:	e7da      	b.n	800abca <rshift+0x4c>
 800ac14:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac18:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac1c:	e7c3      	b.n	800aba6 <rshift+0x28>
 800ac1e:	4623      	mov	r3, r4
 800ac20:	e7e1      	b.n	800abe6 <rshift+0x68>

0800ac22 <__hexdig_fun>:
 800ac22:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d802      	bhi.n	800ac30 <__hexdig_fun+0xe>
 800ac2a:	3820      	subs	r0, #32
 800ac2c:	b2c0      	uxtb	r0, r0
 800ac2e:	4770      	bx	lr
 800ac30:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac34:	2b05      	cmp	r3, #5
 800ac36:	d801      	bhi.n	800ac3c <__hexdig_fun+0x1a>
 800ac38:	3847      	subs	r0, #71	@ 0x47
 800ac3a:	e7f7      	b.n	800ac2c <__hexdig_fun+0xa>
 800ac3c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac40:	2b05      	cmp	r3, #5
 800ac42:	d801      	bhi.n	800ac48 <__hexdig_fun+0x26>
 800ac44:	3827      	subs	r0, #39	@ 0x27
 800ac46:	e7f1      	b.n	800ac2c <__hexdig_fun+0xa>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	4770      	bx	lr

0800ac4c <__gethex>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	b085      	sub	sp, #20
 800ac52:	468a      	mov	sl, r1
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	9001      	str	r0, [sp, #4]
 800ac5a:	4690      	mov	r8, r2
 800ac5c:	1c9c      	adds	r4, r3, #2
 800ac5e:	46a1      	mov	r9, r4
 800ac60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac64:	2830      	cmp	r0, #48	@ 0x30
 800ac66:	d0fa      	beq.n	800ac5e <__gethex+0x12>
 800ac68:	eba9 0303 	sub.w	r3, r9, r3
 800ac6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac70:	f7ff ffd7 	bl	800ac22 <__hexdig_fun>
 800ac74:	4605      	mov	r5, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d168      	bne.n	800ad4c <__gethex+0x100>
 800ac7a:	49a0      	ldr	r1, [pc, #640]	@ (800aefc <__gethex+0x2b0>)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	4648      	mov	r0, r9
 800ac80:	f7ff ff35 	bl	800aaee <strncmp>
 800ac84:	4607      	mov	r7, r0
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d167      	bne.n	800ad5a <__gethex+0x10e>
 800ac8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac8e:	4626      	mov	r6, r4
 800ac90:	f7ff ffc7 	bl	800ac22 <__hexdig_fun>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d062      	beq.n	800ad5e <__gethex+0x112>
 800ac98:	4623      	mov	r3, r4
 800ac9a:	7818      	ldrb	r0, [r3, #0]
 800ac9c:	2830      	cmp	r0, #48	@ 0x30
 800ac9e:	4699      	mov	r9, r3
 800aca0:	f103 0301 	add.w	r3, r3, #1
 800aca4:	d0f9      	beq.n	800ac9a <__gethex+0x4e>
 800aca6:	f7ff ffbc 	bl	800ac22 <__hexdig_fun>
 800acaa:	fab0 f580 	clz	r5, r0
 800acae:	096d      	lsrs	r5, r5, #5
 800acb0:	f04f 0b01 	mov.w	fp, #1
 800acb4:	464a      	mov	r2, r9
 800acb6:	4616      	mov	r6, r2
 800acb8:	3201      	adds	r2, #1
 800acba:	7830      	ldrb	r0, [r6, #0]
 800acbc:	f7ff ffb1 	bl	800ac22 <__hexdig_fun>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1f8      	bne.n	800acb6 <__gethex+0x6a>
 800acc4:	498d      	ldr	r1, [pc, #564]	@ (800aefc <__gethex+0x2b0>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff ff10 	bl	800aaee <strncmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d13f      	bne.n	800ad52 <__gethex+0x106>
 800acd2:	b944      	cbnz	r4, 800ace6 <__gethex+0x9a>
 800acd4:	1c74      	adds	r4, r6, #1
 800acd6:	4622      	mov	r2, r4
 800acd8:	4616      	mov	r6, r2
 800acda:	3201      	adds	r2, #1
 800acdc:	7830      	ldrb	r0, [r6, #0]
 800acde:	f7ff ffa0 	bl	800ac22 <__hexdig_fun>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1f8      	bne.n	800acd8 <__gethex+0x8c>
 800ace6:	1ba4      	subs	r4, r4, r6
 800ace8:	00a7      	lsls	r7, r4, #2
 800acea:	7833      	ldrb	r3, [r6, #0]
 800acec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acf0:	2b50      	cmp	r3, #80	@ 0x50
 800acf2:	d13e      	bne.n	800ad72 <__gethex+0x126>
 800acf4:	7873      	ldrb	r3, [r6, #1]
 800acf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800acf8:	d033      	beq.n	800ad62 <__gethex+0x116>
 800acfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800acfc:	d034      	beq.n	800ad68 <__gethex+0x11c>
 800acfe:	1c71      	adds	r1, r6, #1
 800ad00:	2400      	movs	r4, #0
 800ad02:	7808      	ldrb	r0, [r1, #0]
 800ad04:	f7ff ff8d 	bl	800ac22 <__hexdig_fun>
 800ad08:	1e43      	subs	r3, r0, #1
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b18      	cmp	r3, #24
 800ad0e:	d830      	bhi.n	800ad72 <__gethex+0x126>
 800ad10:	f1a0 0210 	sub.w	r2, r0, #16
 800ad14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad18:	f7ff ff83 	bl	800ac22 <__hexdig_fun>
 800ad1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad20:	fa5f fc8c 	uxtb.w	ip, ip
 800ad24:	f1bc 0f18 	cmp.w	ip, #24
 800ad28:	f04f 030a 	mov.w	r3, #10
 800ad2c:	d91e      	bls.n	800ad6c <__gethex+0x120>
 800ad2e:	b104      	cbz	r4, 800ad32 <__gethex+0xe6>
 800ad30:	4252      	negs	r2, r2
 800ad32:	4417      	add	r7, r2
 800ad34:	f8ca 1000 	str.w	r1, [sl]
 800ad38:	b1ed      	cbz	r5, 800ad76 <__gethex+0x12a>
 800ad3a:	f1bb 0f00 	cmp.w	fp, #0
 800ad3e:	bf0c      	ite	eq
 800ad40:	2506      	moveq	r5, #6
 800ad42:	2500      	movne	r5, #0
 800ad44:	4628      	mov	r0, r5
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	462c      	mov	r4, r5
 800ad50:	e7b0      	b.n	800acb4 <__gethex+0x68>
 800ad52:	2c00      	cmp	r4, #0
 800ad54:	d1c7      	bne.n	800ace6 <__gethex+0x9a>
 800ad56:	4627      	mov	r7, r4
 800ad58:	e7c7      	b.n	800acea <__gethex+0x9e>
 800ad5a:	464e      	mov	r6, r9
 800ad5c:	462f      	mov	r7, r5
 800ad5e:	2501      	movs	r5, #1
 800ad60:	e7c3      	b.n	800acea <__gethex+0x9e>
 800ad62:	2400      	movs	r4, #0
 800ad64:	1cb1      	adds	r1, r6, #2
 800ad66:	e7cc      	b.n	800ad02 <__gethex+0xb6>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	e7fb      	b.n	800ad64 <__gethex+0x118>
 800ad6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ad70:	e7ce      	b.n	800ad10 <__gethex+0xc4>
 800ad72:	4631      	mov	r1, r6
 800ad74:	e7de      	b.n	800ad34 <__gethex+0xe8>
 800ad76:	eba6 0309 	sub.w	r3, r6, r9
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	2b07      	cmp	r3, #7
 800ad80:	dc0a      	bgt.n	800ad98 <__gethex+0x14c>
 800ad82:	9801      	ldr	r0, [sp, #4]
 800ad84:	f7fd fdc4 	bl	8008910 <_Balloc>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	b940      	cbnz	r0, 800ad9e <__gethex+0x152>
 800ad8c:	4b5c      	ldr	r3, [pc, #368]	@ (800af00 <__gethex+0x2b4>)
 800ad8e:	4602      	mov	r2, r0
 800ad90:	21e4      	movs	r1, #228	@ 0xe4
 800ad92:	485c      	ldr	r0, [pc, #368]	@ (800af04 <__gethex+0x2b8>)
 800ad94:	f7fc fe46 	bl	8007a24 <__assert_func>
 800ad98:	3101      	adds	r1, #1
 800ad9a:	105b      	asrs	r3, r3, #1
 800ad9c:	e7ef      	b.n	800ad7e <__gethex+0x132>
 800ad9e:	f100 0a14 	add.w	sl, r0, #20
 800ada2:	2300      	movs	r3, #0
 800ada4:	4655      	mov	r5, sl
 800ada6:	469b      	mov	fp, r3
 800ada8:	45b1      	cmp	r9, r6
 800adaa:	d337      	bcc.n	800ae1c <__gethex+0x1d0>
 800adac:	f845 bb04 	str.w	fp, [r5], #4
 800adb0:	eba5 050a 	sub.w	r5, r5, sl
 800adb4:	10ad      	asrs	r5, r5, #2
 800adb6:	6125      	str	r5, [r4, #16]
 800adb8:	4658      	mov	r0, fp
 800adba:	f7fd fe9b 	bl	8008af4 <__hi0bits>
 800adbe:	016d      	lsls	r5, r5, #5
 800adc0:	f8d8 6000 	ldr.w	r6, [r8]
 800adc4:	1a2d      	subs	r5, r5, r0
 800adc6:	42b5      	cmp	r5, r6
 800adc8:	dd54      	ble.n	800ae74 <__gethex+0x228>
 800adca:	1bad      	subs	r5, r5, r6
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f7fe fa27 	bl	8009222 <__any_on>
 800add4:	4681      	mov	r9, r0
 800add6:	b178      	cbz	r0, 800adf8 <__gethex+0x1ac>
 800add8:	1e6b      	subs	r3, r5, #1
 800adda:	1159      	asrs	r1, r3, #5
 800addc:	f003 021f 	and.w	r2, r3, #31
 800ade0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ade4:	f04f 0901 	mov.w	r9, #1
 800ade8:	fa09 f202 	lsl.w	r2, r9, r2
 800adec:	420a      	tst	r2, r1
 800adee:	d003      	beq.n	800adf8 <__gethex+0x1ac>
 800adf0:	454b      	cmp	r3, r9
 800adf2:	dc36      	bgt.n	800ae62 <__gethex+0x216>
 800adf4:	f04f 0902 	mov.w	r9, #2
 800adf8:	4629      	mov	r1, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff febf 	bl	800ab7e <rshift>
 800ae00:	442f      	add	r7, r5
 800ae02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae06:	42bb      	cmp	r3, r7
 800ae08:	da42      	bge.n	800ae90 <__gethex+0x244>
 800ae0a:	9801      	ldr	r0, [sp, #4]
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7fd fdbf 	bl	8008990 <_Bfree>
 800ae12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae14:	2300      	movs	r3, #0
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	25a3      	movs	r5, #163	@ 0xa3
 800ae1a:	e793      	b.n	800ad44 <__gethex+0xf8>
 800ae1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae22:	d012      	beq.n	800ae4a <__gethex+0x1fe>
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d104      	bne.n	800ae32 <__gethex+0x1e6>
 800ae28:	f845 bb04 	str.w	fp, [r5], #4
 800ae2c:	f04f 0b00 	mov.w	fp, #0
 800ae30:	465b      	mov	r3, fp
 800ae32:	7830      	ldrb	r0, [r6, #0]
 800ae34:	9303      	str	r3, [sp, #12]
 800ae36:	f7ff fef4 	bl	800ac22 <__hexdig_fun>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	f000 000f 	and.w	r0, r0, #15
 800ae40:	4098      	lsls	r0, r3
 800ae42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae46:	3304      	adds	r3, #4
 800ae48:	e7ae      	b.n	800ada8 <__gethex+0x15c>
 800ae4a:	45b1      	cmp	r9, r6
 800ae4c:	d8ea      	bhi.n	800ae24 <__gethex+0x1d8>
 800ae4e:	492b      	ldr	r1, [pc, #172]	@ (800aefc <__gethex+0x2b0>)
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff fe4a 	bl	800aaee <strncmp>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1e1      	bne.n	800ae24 <__gethex+0x1d8>
 800ae60:	e7a2      	b.n	800ada8 <__gethex+0x15c>
 800ae62:	1ea9      	subs	r1, r5, #2
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7fe f9dc 	bl	8009222 <__any_on>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0c2      	beq.n	800adf4 <__gethex+0x1a8>
 800ae6e:	f04f 0903 	mov.w	r9, #3
 800ae72:	e7c1      	b.n	800adf8 <__gethex+0x1ac>
 800ae74:	da09      	bge.n	800ae8a <__gethex+0x23e>
 800ae76:	1b75      	subs	r5, r6, r5
 800ae78:	4621      	mov	r1, r4
 800ae7a:	9801      	ldr	r0, [sp, #4]
 800ae7c:	462a      	mov	r2, r5
 800ae7e:	f7fd ff97 	bl	8008db0 <__lshift>
 800ae82:	1b7f      	subs	r7, r7, r5
 800ae84:	4604      	mov	r4, r0
 800ae86:	f100 0a14 	add.w	sl, r0, #20
 800ae8a:	f04f 0900 	mov.w	r9, #0
 800ae8e:	e7b8      	b.n	800ae02 <__gethex+0x1b6>
 800ae90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae94:	42bd      	cmp	r5, r7
 800ae96:	dd6f      	ble.n	800af78 <__gethex+0x32c>
 800ae98:	1bed      	subs	r5, r5, r7
 800ae9a:	42ae      	cmp	r6, r5
 800ae9c:	dc34      	bgt.n	800af08 <__gethex+0x2bc>
 800ae9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d022      	beq.n	800aeec <__gethex+0x2a0>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d024      	beq.n	800aef4 <__gethex+0x2a8>
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d115      	bne.n	800aeda <__gethex+0x28e>
 800aeae:	42ae      	cmp	r6, r5
 800aeb0:	d113      	bne.n	800aeda <__gethex+0x28e>
 800aeb2:	2e01      	cmp	r6, #1
 800aeb4:	d10b      	bne.n	800aece <__gethex+0x282>
 800aeb6:	9a02      	ldr	r2, [sp, #8]
 800aeb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	2301      	movs	r3, #1
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	f8ca 3000 	str.w	r3, [sl]
 800aec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aec8:	2562      	movs	r5, #98	@ 0x62
 800aeca:	601c      	str	r4, [r3, #0]
 800aecc:	e73a      	b.n	800ad44 <__gethex+0xf8>
 800aece:	1e71      	subs	r1, r6, #1
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7fe f9a6 	bl	8009222 <__any_on>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1ed      	bne.n	800aeb6 <__gethex+0x26a>
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	4621      	mov	r1, r4
 800aede:	f7fd fd57 	bl	8008990 <_Bfree>
 800aee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aee4:	2300      	movs	r3, #0
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	2550      	movs	r5, #80	@ 0x50
 800aeea:	e72b      	b.n	800ad44 <__gethex+0xf8>
 800aeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f3      	bne.n	800aeda <__gethex+0x28e>
 800aef2:	e7e0      	b.n	800aeb6 <__gethex+0x26a>
 800aef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1dd      	bne.n	800aeb6 <__gethex+0x26a>
 800aefa:	e7ee      	b.n	800aeda <__gethex+0x28e>
 800aefc:	0800bc13 	.word	0x0800bc13
 800af00:	0800bba9 	.word	0x0800bba9
 800af04:	0800bc49 	.word	0x0800bc49
 800af08:	1e6f      	subs	r7, r5, #1
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	d130      	bne.n	800af72 <__gethex+0x326>
 800af10:	b127      	cbz	r7, 800af1c <__gethex+0x2d0>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f7fe f984 	bl	8009222 <__any_on>
 800af1a:	4681      	mov	r9, r0
 800af1c:	117a      	asrs	r2, r7, #5
 800af1e:	2301      	movs	r3, #1
 800af20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af24:	f007 071f 	and.w	r7, r7, #31
 800af28:	40bb      	lsls	r3, r7
 800af2a:	4213      	tst	r3, r2
 800af2c:	4629      	mov	r1, r5
 800af2e:	4620      	mov	r0, r4
 800af30:	bf18      	it	ne
 800af32:	f049 0902 	orrne.w	r9, r9, #2
 800af36:	f7ff fe22 	bl	800ab7e <rshift>
 800af3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af3e:	1b76      	subs	r6, r6, r5
 800af40:	2502      	movs	r5, #2
 800af42:	f1b9 0f00 	cmp.w	r9, #0
 800af46:	d047      	beq.n	800afd8 <__gethex+0x38c>
 800af48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d015      	beq.n	800af7c <__gethex+0x330>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d017      	beq.n	800af84 <__gethex+0x338>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d109      	bne.n	800af6c <__gethex+0x320>
 800af58:	f019 0f02 	tst.w	r9, #2
 800af5c:	d006      	beq.n	800af6c <__gethex+0x320>
 800af5e:	f8da 3000 	ldr.w	r3, [sl]
 800af62:	ea49 0903 	orr.w	r9, r9, r3
 800af66:	f019 0f01 	tst.w	r9, #1
 800af6a:	d10e      	bne.n	800af8a <__gethex+0x33e>
 800af6c:	f045 0510 	orr.w	r5, r5, #16
 800af70:	e032      	b.n	800afd8 <__gethex+0x38c>
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	e7d1      	b.n	800af1c <__gethex+0x2d0>
 800af78:	2501      	movs	r5, #1
 800af7a:	e7e2      	b.n	800af42 <__gethex+0x2f6>
 800af7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7e:	f1c3 0301 	rsb	r3, r3, #1
 800af82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <__gethex+0x320>
 800af8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af8e:	f104 0314 	add.w	r3, r4, #20
 800af92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af9a:	f04f 0c00 	mov.w	ip, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afa8:	d01b      	beq.n	800afe2 <__gethex+0x396>
 800afaa:	3201      	adds	r2, #1
 800afac:	6002      	str	r2, [r0, #0]
 800afae:	2d02      	cmp	r5, #2
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	d13c      	bne.n	800b030 <__gethex+0x3e4>
 800afb6:	f8d8 2000 	ldr.w	r2, [r8]
 800afba:	3a01      	subs	r2, #1
 800afbc:	42b2      	cmp	r2, r6
 800afbe:	d109      	bne.n	800afd4 <__gethex+0x388>
 800afc0:	1171      	asrs	r1, r6, #5
 800afc2:	2201      	movs	r2, #1
 800afc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afc8:	f006 061f 	and.w	r6, r6, #31
 800afcc:	fa02 f606 	lsl.w	r6, r2, r6
 800afd0:	421e      	tst	r6, r3
 800afd2:	d13a      	bne.n	800b04a <__gethex+0x3fe>
 800afd4:	f045 0520 	orr.w	r5, r5, #32
 800afd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afda:	601c      	str	r4, [r3, #0]
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	601f      	str	r7, [r3, #0]
 800afe0:	e6b0      	b.n	800ad44 <__gethex+0xf8>
 800afe2:	4299      	cmp	r1, r3
 800afe4:	f843 cc04 	str.w	ip, [r3, #-4]
 800afe8:	d8d9      	bhi.n	800af9e <__gethex+0x352>
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	459b      	cmp	fp, r3
 800afee:	db17      	blt.n	800b020 <__gethex+0x3d4>
 800aff0:	6861      	ldr	r1, [r4, #4]
 800aff2:	9801      	ldr	r0, [sp, #4]
 800aff4:	3101      	adds	r1, #1
 800aff6:	f7fd fc8b 	bl	8008910 <_Balloc>
 800affa:	4681      	mov	r9, r0
 800affc:	b918      	cbnz	r0, 800b006 <__gethex+0x3ba>
 800affe:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <__gethex+0x41c>)
 800b000:	4602      	mov	r2, r0
 800b002:	2184      	movs	r1, #132	@ 0x84
 800b004:	e6c5      	b.n	800ad92 <__gethex+0x146>
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	f104 010c 	add.w	r1, r4, #12
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	300c      	adds	r0, #12
 800b012:	f7fc fcf2 	bl	80079fa <memcpy>
 800b016:	4621      	mov	r1, r4
 800b018:	9801      	ldr	r0, [sp, #4]
 800b01a:	f7fd fcb9 	bl	8008990 <_Bfree>
 800b01e:	464c      	mov	r4, r9
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]
 800b02e:	e7be      	b.n	800afae <__gethex+0x362>
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	455a      	cmp	r2, fp
 800b034:	dd0b      	ble.n	800b04e <__gethex+0x402>
 800b036:	2101      	movs	r1, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fda0 	bl	800ab7e <rshift>
 800b03e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b042:	3701      	adds	r7, #1
 800b044:	42bb      	cmp	r3, r7
 800b046:	f6ff aee0 	blt.w	800ae0a <__gethex+0x1be>
 800b04a:	2501      	movs	r5, #1
 800b04c:	e7c2      	b.n	800afd4 <__gethex+0x388>
 800b04e:	f016 061f 	ands.w	r6, r6, #31
 800b052:	d0fa      	beq.n	800b04a <__gethex+0x3fe>
 800b054:	4453      	add	r3, sl
 800b056:	f1c6 0620 	rsb	r6, r6, #32
 800b05a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b05e:	f7fd fd49 	bl	8008af4 <__hi0bits>
 800b062:	42b0      	cmp	r0, r6
 800b064:	dbe7      	blt.n	800b036 <__gethex+0x3ea>
 800b066:	e7f0      	b.n	800b04a <__gethex+0x3fe>
 800b068:	0800bba9 	.word	0x0800bba9

0800b06c <L_shift>:
 800b06c:	f1c2 0208 	rsb	r2, r2, #8
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	f1c2 0620 	rsb	r6, r2, #32
 800b078:	6843      	ldr	r3, [r0, #4]
 800b07a:	6804      	ldr	r4, [r0, #0]
 800b07c:	fa03 f506 	lsl.w	r5, r3, r6
 800b080:	432c      	orrs	r4, r5
 800b082:	40d3      	lsrs	r3, r2
 800b084:	6004      	str	r4, [r0, #0]
 800b086:	f840 3f04 	str.w	r3, [r0, #4]!
 800b08a:	4288      	cmp	r0, r1
 800b08c:	d3f4      	bcc.n	800b078 <L_shift+0xc>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <__match>:
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	b914      	cbnz	r4, 800b0a2 <__match+0x12>
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	bd30      	pop	{r4, r5, pc}
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0aa:	2d19      	cmp	r5, #25
 800b0ac:	bf98      	it	ls
 800b0ae:	3220      	addls	r2, #32
 800b0b0:	42a2      	cmp	r2, r4
 800b0b2:	d0f0      	beq.n	800b096 <__match+0x6>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7f3      	b.n	800b0a0 <__match+0x10>

0800b0b8 <__hexnan>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	680b      	ldr	r3, [r1, #0]
 800b0be:	6801      	ldr	r1, [r0, #0]
 800b0c0:	115e      	asrs	r6, r3, #5
 800b0c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0c6:	f013 031f 	ands.w	r3, r3, #31
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	bf18      	it	ne
 800b0ce:	3604      	addne	r6, #4
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	1f37      	subs	r7, r6, #4
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	4690      	mov	r8, r2
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0de:	46b9      	mov	r9, r7
 800b0e0:	463c      	mov	r4, r7
 800b0e2:	9502      	str	r5, [sp, #8]
 800b0e4:	46ab      	mov	fp, r5
 800b0e6:	784a      	ldrb	r2, [r1, #1]
 800b0e8:	1c4b      	adds	r3, r1, #1
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	b342      	cbz	r2, 800b140 <__hexnan+0x88>
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	9204      	str	r2, [sp, #16]
 800b0f4:	f7ff fd95 	bl	800ac22 <__hexdig_fun>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d151      	bne.n	800b1a0 <__hexnan+0xe8>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	9905      	ldr	r1, [sp, #20]
 800b100:	2a20      	cmp	r2, #32
 800b102:	d818      	bhi.n	800b136 <__hexnan+0x7e>
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	459b      	cmp	fp, r3
 800b108:	dd13      	ble.n	800b132 <__hexnan+0x7a>
 800b10a:	454c      	cmp	r4, r9
 800b10c:	d206      	bcs.n	800b11c <__hexnan+0x64>
 800b10e:	2d07      	cmp	r5, #7
 800b110:	dc04      	bgt.n	800b11c <__hexnan+0x64>
 800b112:	462a      	mov	r2, r5
 800b114:	4649      	mov	r1, r9
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff ffa8 	bl	800b06c <L_shift>
 800b11c:	4544      	cmp	r4, r8
 800b11e:	d952      	bls.n	800b1c6 <__hexnan+0x10e>
 800b120:	2300      	movs	r3, #0
 800b122:	f1a4 0904 	sub.w	r9, r4, #4
 800b126:	f844 3c04 	str.w	r3, [r4, #-4]
 800b12a:	f8cd b008 	str.w	fp, [sp, #8]
 800b12e:	464c      	mov	r4, r9
 800b130:	461d      	mov	r5, r3
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	e7d7      	b.n	800b0e6 <__hexnan+0x2e>
 800b136:	2a29      	cmp	r2, #41	@ 0x29
 800b138:	d157      	bne.n	800b1ea <__hexnan+0x132>
 800b13a:	3102      	adds	r1, #2
 800b13c:	f8ca 1000 	str.w	r1, [sl]
 800b140:	f1bb 0f00 	cmp.w	fp, #0
 800b144:	d051      	beq.n	800b1ea <__hexnan+0x132>
 800b146:	454c      	cmp	r4, r9
 800b148:	d206      	bcs.n	800b158 <__hexnan+0xa0>
 800b14a:	2d07      	cmp	r5, #7
 800b14c:	dc04      	bgt.n	800b158 <__hexnan+0xa0>
 800b14e:	462a      	mov	r2, r5
 800b150:	4649      	mov	r1, r9
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ff8a 	bl	800b06c <L_shift>
 800b158:	4544      	cmp	r4, r8
 800b15a:	d936      	bls.n	800b1ca <__hexnan+0x112>
 800b15c:	f1a8 0204 	sub.w	r2, r8, #4
 800b160:	4623      	mov	r3, r4
 800b162:	f853 1b04 	ldr.w	r1, [r3], #4
 800b166:	f842 1f04 	str.w	r1, [r2, #4]!
 800b16a:	429f      	cmp	r7, r3
 800b16c:	d2f9      	bcs.n	800b162 <__hexnan+0xaa>
 800b16e:	1b3b      	subs	r3, r7, r4
 800b170:	f023 0303 	bic.w	r3, r3, #3
 800b174:	3304      	adds	r3, #4
 800b176:	3401      	adds	r4, #1
 800b178:	3e03      	subs	r6, #3
 800b17a:	42b4      	cmp	r4, r6
 800b17c:	bf88      	it	hi
 800b17e:	2304      	movhi	r3, #4
 800b180:	4443      	add	r3, r8
 800b182:	2200      	movs	r2, #0
 800b184:	f843 2b04 	str.w	r2, [r3], #4
 800b188:	429f      	cmp	r7, r3
 800b18a:	d2fb      	bcs.n	800b184 <__hexnan+0xcc>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	b91b      	cbnz	r3, 800b198 <__hexnan+0xe0>
 800b190:	4547      	cmp	r7, r8
 800b192:	d128      	bne.n	800b1e6 <__hexnan+0x12e>
 800b194:	2301      	movs	r3, #1
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2005      	movs	r0, #5
 800b19a:	b007      	add	sp, #28
 800b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	3501      	adds	r5, #1
 800b1a2:	2d08      	cmp	r5, #8
 800b1a4:	f10b 0b01 	add.w	fp, fp, #1
 800b1a8:	dd06      	ble.n	800b1b8 <__hexnan+0x100>
 800b1aa:	4544      	cmp	r4, r8
 800b1ac:	d9c1      	bls.n	800b132 <__hexnan+0x7a>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	3c04      	subs	r4, #4
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	f000 000f 	and.w	r0, r0, #15
 800b1be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	e7b5      	b.n	800b132 <__hexnan+0x7a>
 800b1c6:	2508      	movs	r5, #8
 800b1c8:	e7b3      	b.n	800b132 <__hexnan+0x7a>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0dd      	beq.n	800b18c <__hexnan+0xd4>
 800b1d0:	f1c3 0320 	rsb	r3, r3, #32
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	40da      	lsrs	r2, r3
 800b1da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1e4:	e7d2      	b.n	800b18c <__hexnan+0xd4>
 800b1e6:	3f04      	subs	r7, #4
 800b1e8:	e7d0      	b.n	800b18c <__hexnan+0xd4>
 800b1ea:	2004      	movs	r0, #4
 800b1ec:	e7d5      	b.n	800b19a <__hexnan+0xe2>

0800b1ee <__ascii_mbtowc>:
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	b901      	cbnz	r1, 800b1f4 <__ascii_mbtowc+0x6>
 800b1f2:	a901      	add	r1, sp, #4
 800b1f4:	b142      	cbz	r2, 800b208 <__ascii_mbtowc+0x1a>
 800b1f6:	b14b      	cbz	r3, 800b20c <__ascii_mbtowc+0x1e>
 800b1f8:	7813      	ldrb	r3, [r2, #0]
 800b1fa:	600b      	str	r3, [r1, #0]
 800b1fc:	7812      	ldrb	r2, [r2, #0]
 800b1fe:	1e10      	subs	r0, r2, #0
 800b200:	bf18      	it	ne
 800b202:	2001      	movne	r0, #1
 800b204:	b002      	add	sp, #8
 800b206:	4770      	bx	lr
 800b208:	4610      	mov	r0, r2
 800b20a:	e7fb      	b.n	800b204 <__ascii_mbtowc+0x16>
 800b20c:	f06f 0001 	mvn.w	r0, #1
 800b210:	e7f8      	b.n	800b204 <__ascii_mbtowc+0x16>

0800b212 <_realloc_r>:
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	4607      	mov	r7, r0
 800b218:	4614      	mov	r4, r2
 800b21a:	460d      	mov	r5, r1
 800b21c:	b921      	cbnz	r1, 800b228 <_realloc_r+0x16>
 800b21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b222:	4611      	mov	r1, r2
 800b224:	f7fd bae8 	b.w	80087f8 <_malloc_r>
 800b228:	b92a      	cbnz	r2, 800b236 <_realloc_r+0x24>
 800b22a:	f7fd fa71 	bl	8008710 <_free_r>
 800b22e:	4625      	mov	r5, r4
 800b230:	4628      	mov	r0, r5
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	f000 fab1 	bl	800b79c <_malloc_usable_size_r>
 800b23a:	4284      	cmp	r4, r0
 800b23c:	4606      	mov	r6, r0
 800b23e:	d802      	bhi.n	800b246 <_realloc_r+0x34>
 800b240:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b244:	d8f4      	bhi.n	800b230 <_realloc_r+0x1e>
 800b246:	4621      	mov	r1, r4
 800b248:	4638      	mov	r0, r7
 800b24a:	f7fd fad5 	bl	80087f8 <_malloc_r>
 800b24e:	4680      	mov	r8, r0
 800b250:	b908      	cbnz	r0, 800b256 <_realloc_r+0x44>
 800b252:	4645      	mov	r5, r8
 800b254:	e7ec      	b.n	800b230 <_realloc_r+0x1e>
 800b256:	42b4      	cmp	r4, r6
 800b258:	4622      	mov	r2, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	bf28      	it	cs
 800b25e:	4632      	movcs	r2, r6
 800b260:	f7fc fbcb 	bl	80079fa <memcpy>
 800b264:	4629      	mov	r1, r5
 800b266:	4638      	mov	r0, r7
 800b268:	f7fd fa52 	bl	8008710 <_free_r>
 800b26c:	e7f1      	b.n	800b252 <_realloc_r+0x40>
	...

0800b270 <_strtoul_l.isra.0>:
 800b270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b274:	4e34      	ldr	r6, [pc, #208]	@ (800b348 <_strtoul_l.isra.0+0xd8>)
 800b276:	4686      	mov	lr, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	4628      	mov	r0, r5
 800b27c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b280:	5d37      	ldrb	r7, [r6, r4]
 800b282:	f017 0708 	ands.w	r7, r7, #8
 800b286:	d1f8      	bne.n	800b27a <_strtoul_l.isra.0+0xa>
 800b288:	2c2d      	cmp	r4, #45	@ 0x2d
 800b28a:	d110      	bne.n	800b2ae <_strtoul_l.isra.0+0x3e>
 800b28c:	782c      	ldrb	r4, [r5, #0]
 800b28e:	2701      	movs	r7, #1
 800b290:	1c85      	adds	r5, r0, #2
 800b292:	f033 0010 	bics.w	r0, r3, #16
 800b296:	d115      	bne.n	800b2c4 <_strtoul_l.isra.0+0x54>
 800b298:	2c30      	cmp	r4, #48	@ 0x30
 800b29a:	d10d      	bne.n	800b2b8 <_strtoul_l.isra.0+0x48>
 800b29c:	7828      	ldrb	r0, [r5, #0]
 800b29e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b2a2:	2858      	cmp	r0, #88	@ 0x58
 800b2a4:	d108      	bne.n	800b2b8 <_strtoul_l.isra.0+0x48>
 800b2a6:	786c      	ldrb	r4, [r5, #1]
 800b2a8:	3502      	adds	r5, #2
 800b2aa:	2310      	movs	r3, #16
 800b2ac:	e00a      	b.n	800b2c4 <_strtoul_l.isra.0+0x54>
 800b2ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2b0:	bf04      	itt	eq
 800b2b2:	782c      	ldrbeq	r4, [r5, #0]
 800b2b4:	1c85      	addeq	r5, r0, #2
 800b2b6:	e7ec      	b.n	800b292 <_strtoul_l.isra.0+0x22>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1f6      	bne.n	800b2aa <_strtoul_l.isra.0+0x3a>
 800b2bc:	2c30      	cmp	r4, #48	@ 0x30
 800b2be:	bf14      	ite	ne
 800b2c0:	230a      	movne	r3, #10
 800b2c2:	2308      	moveq	r3, #8
 800b2c4:	f04f 38ff 	mov.w	r8, #4294967295
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	fbb8 f8f3 	udiv	r8, r8, r3
 800b2ce:	fb03 f908 	mul.w	r9, r3, r8
 800b2d2:	ea6f 0909 	mvn.w	r9, r9
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b2dc:	f1bc 0f09 	cmp.w	ip, #9
 800b2e0:	d810      	bhi.n	800b304 <_strtoul_l.isra.0+0x94>
 800b2e2:	4664      	mov	r4, ip
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	dd1e      	ble.n	800b326 <_strtoul_l.isra.0+0xb6>
 800b2e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b2ec:	d007      	beq.n	800b2fe <_strtoul_l.isra.0+0x8e>
 800b2ee:	4580      	cmp	r8, r0
 800b2f0:	d316      	bcc.n	800b320 <_strtoul_l.isra.0+0xb0>
 800b2f2:	d101      	bne.n	800b2f8 <_strtoul_l.isra.0+0x88>
 800b2f4:	45a1      	cmp	r9, r4
 800b2f6:	db13      	blt.n	800b320 <_strtoul_l.isra.0+0xb0>
 800b2f8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2fc:	2601      	movs	r6, #1
 800b2fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b302:	e7e9      	b.n	800b2d8 <_strtoul_l.isra.0+0x68>
 800b304:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b308:	f1bc 0f19 	cmp.w	ip, #25
 800b30c:	d801      	bhi.n	800b312 <_strtoul_l.isra.0+0xa2>
 800b30e:	3c37      	subs	r4, #55	@ 0x37
 800b310:	e7e8      	b.n	800b2e4 <_strtoul_l.isra.0+0x74>
 800b312:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b316:	f1bc 0f19 	cmp.w	ip, #25
 800b31a:	d804      	bhi.n	800b326 <_strtoul_l.isra.0+0xb6>
 800b31c:	3c57      	subs	r4, #87	@ 0x57
 800b31e:	e7e1      	b.n	800b2e4 <_strtoul_l.isra.0+0x74>
 800b320:	f04f 36ff 	mov.w	r6, #4294967295
 800b324:	e7eb      	b.n	800b2fe <_strtoul_l.isra.0+0x8e>
 800b326:	1c73      	adds	r3, r6, #1
 800b328:	d106      	bne.n	800b338 <_strtoul_l.isra.0+0xc8>
 800b32a:	2322      	movs	r3, #34	@ 0x22
 800b32c:	f8ce 3000 	str.w	r3, [lr]
 800b330:	4630      	mov	r0, r6
 800b332:	b932      	cbnz	r2, 800b342 <_strtoul_l.isra.0+0xd2>
 800b334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b338:	b107      	cbz	r7, 800b33c <_strtoul_l.isra.0+0xcc>
 800b33a:	4240      	negs	r0, r0
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	d0f9      	beq.n	800b334 <_strtoul_l.isra.0+0xc4>
 800b340:	b106      	cbz	r6, 800b344 <_strtoul_l.isra.0+0xd4>
 800b342:	1e69      	subs	r1, r5, #1
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	e7f5      	b.n	800b334 <_strtoul_l.isra.0+0xc4>
 800b348:	0800bdf9 	.word	0x0800bdf9

0800b34c <_strtoul_r>:
 800b34c:	f7ff bf90 	b.w	800b270 <_strtoul_l.isra.0>

0800b350 <__ascii_wctomb>:
 800b350:	4603      	mov	r3, r0
 800b352:	4608      	mov	r0, r1
 800b354:	b141      	cbz	r1, 800b368 <__ascii_wctomb+0x18>
 800b356:	2aff      	cmp	r2, #255	@ 0xff
 800b358:	d904      	bls.n	800b364 <__ascii_wctomb+0x14>
 800b35a:	228a      	movs	r2, #138	@ 0x8a
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f04f 30ff 	mov.w	r0, #4294967295
 800b362:	4770      	bx	lr
 800b364:	700a      	strb	r2, [r1, #0]
 800b366:	2001      	movs	r0, #1
 800b368:	4770      	bx	lr

0800b36a <__sfputc_r>:
 800b36a:	6893      	ldr	r3, [r2, #8]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	b410      	push	{r4}
 800b372:	6093      	str	r3, [r2, #8]
 800b374:	da08      	bge.n	800b388 <__sfputc_r+0x1e>
 800b376:	6994      	ldr	r4, [r2, #24]
 800b378:	42a3      	cmp	r3, r4
 800b37a:	db01      	blt.n	800b380 <__sfputc_r+0x16>
 800b37c:	290a      	cmp	r1, #10
 800b37e:	d103      	bne.n	800b388 <__sfputc_r+0x1e>
 800b380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b384:	f000 b932 	b.w	800b5ec <__swbuf_r>
 800b388:	6813      	ldr	r3, [r2, #0]
 800b38a:	1c58      	adds	r0, r3, #1
 800b38c:	6010      	str	r0, [r2, #0]
 800b38e:	7019      	strb	r1, [r3, #0]
 800b390:	4608      	mov	r0, r1
 800b392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <__sfputs_r>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	4606      	mov	r6, r0
 800b39c:	460f      	mov	r7, r1
 800b39e:	4614      	mov	r4, r2
 800b3a0:	18d5      	adds	r5, r2, r3
 800b3a2:	42ac      	cmp	r4, r5
 800b3a4:	d101      	bne.n	800b3aa <__sfputs_r+0x12>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e007      	b.n	800b3ba <__sfputs_r+0x22>
 800b3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff ffda 	bl	800b36a <__sfputc_r>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	d1f3      	bne.n	800b3a2 <__sfputs_r+0xa>
 800b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3bc <_vfiprintf_r>:
 800b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	b09d      	sub	sp, #116	@ 0x74
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	4698      	mov	r8, r3
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	b118      	cbz	r0, 800b3d4 <_vfiprintf_r+0x18>
 800b3cc:	6a03      	ldr	r3, [r0, #32]
 800b3ce:	b90b      	cbnz	r3, 800b3d4 <_vfiprintf_r+0x18>
 800b3d0:	f7fc f932 	bl	8007638 <__sinit>
 800b3d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3d6:	07d9      	lsls	r1, r3, #31
 800b3d8:	d405      	bmi.n	800b3e6 <_vfiprintf_r+0x2a>
 800b3da:	89ab      	ldrh	r3, [r5, #12]
 800b3dc:	059a      	lsls	r2, r3, #22
 800b3de:	d402      	bmi.n	800b3e6 <_vfiprintf_r+0x2a>
 800b3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3e2:	f7fc fb08 	bl	80079f6 <__retarget_lock_acquire_recursive>
 800b3e6:	89ab      	ldrh	r3, [r5, #12]
 800b3e8:	071b      	lsls	r3, r3, #28
 800b3ea:	d501      	bpl.n	800b3f0 <_vfiprintf_r+0x34>
 800b3ec:	692b      	ldr	r3, [r5, #16]
 800b3ee:	b99b      	cbnz	r3, 800b418 <_vfiprintf_r+0x5c>
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 f938 	bl	800b668 <__swsetup_r>
 800b3f8:	b170      	cbz	r0, 800b418 <_vfiprintf_r+0x5c>
 800b3fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3fc:	07dc      	lsls	r4, r3, #31
 800b3fe:	d504      	bpl.n	800b40a <_vfiprintf_r+0x4e>
 800b400:	f04f 30ff 	mov.w	r0, #4294967295
 800b404:	b01d      	add	sp, #116	@ 0x74
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	0598      	lsls	r0, r3, #22
 800b40e:	d4f7      	bmi.n	800b400 <_vfiprintf_r+0x44>
 800b410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b412:	f7fc faf1 	bl	80079f8 <__retarget_lock_release_recursive>
 800b416:	e7f3      	b.n	800b400 <_vfiprintf_r+0x44>
 800b418:	2300      	movs	r3, #0
 800b41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b41c:	2320      	movs	r3, #32
 800b41e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b422:	f8cd 800c 	str.w	r8, [sp, #12]
 800b426:	2330      	movs	r3, #48	@ 0x30
 800b428:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5d8 <_vfiprintf_r+0x21c>
 800b42c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b430:	f04f 0901 	mov.w	r9, #1
 800b434:	4623      	mov	r3, r4
 800b436:	469a      	mov	sl, r3
 800b438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b43c:	b10a      	cbz	r2, 800b442 <_vfiprintf_r+0x86>
 800b43e:	2a25      	cmp	r2, #37	@ 0x25
 800b440:	d1f9      	bne.n	800b436 <_vfiprintf_r+0x7a>
 800b442:	ebba 0b04 	subs.w	fp, sl, r4
 800b446:	d00b      	beq.n	800b460 <_vfiprintf_r+0xa4>
 800b448:	465b      	mov	r3, fp
 800b44a:	4622      	mov	r2, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	4630      	mov	r0, r6
 800b450:	f7ff ffa2 	bl	800b398 <__sfputs_r>
 800b454:	3001      	adds	r0, #1
 800b456:	f000 80a7 	beq.w	800b5a8 <_vfiprintf_r+0x1ec>
 800b45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b45c:	445a      	add	r2, fp
 800b45e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b460:	f89a 3000 	ldrb.w	r3, [sl]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 809f 	beq.w	800b5a8 <_vfiprintf_r+0x1ec>
 800b46a:	2300      	movs	r3, #0
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295
 800b470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b474:	f10a 0a01 	add.w	sl, sl, #1
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b480:	931a      	str	r3, [sp, #104]	@ 0x68
 800b482:	4654      	mov	r4, sl
 800b484:	2205      	movs	r2, #5
 800b486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b48a:	4853      	ldr	r0, [pc, #332]	@ (800b5d8 <_vfiprintf_r+0x21c>)
 800b48c:	f7f4 feb8 	bl	8000200 <memchr>
 800b490:	9a04      	ldr	r2, [sp, #16]
 800b492:	b9d8      	cbnz	r0, 800b4cc <_vfiprintf_r+0x110>
 800b494:	06d1      	lsls	r1, r2, #27
 800b496:	bf44      	itt	mi
 800b498:	2320      	movmi	r3, #32
 800b49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b49e:	0713      	lsls	r3, r2, #28
 800b4a0:	bf44      	itt	mi
 800b4a2:	232b      	movmi	r3, #43	@ 0x2b
 800b4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ae:	d015      	beq.n	800b4dc <_vfiprintf_r+0x120>
 800b4b0:	9a07      	ldr	r2, [sp, #28]
 800b4b2:	4654      	mov	r4, sl
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c0:	3b30      	subs	r3, #48	@ 0x30
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	d94b      	bls.n	800b55e <_vfiprintf_r+0x1a2>
 800b4c6:	b1b0      	cbz	r0, 800b4f6 <_vfiprintf_r+0x13a>
 800b4c8:	9207      	str	r2, [sp, #28]
 800b4ca:	e014      	b.n	800b4f6 <_vfiprintf_r+0x13a>
 800b4cc:	eba0 0308 	sub.w	r3, r0, r8
 800b4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	46a2      	mov	sl, r4
 800b4da:	e7d2      	b.n	800b482 <_vfiprintf_r+0xc6>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	1d19      	adds	r1, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	9103      	str	r1, [sp, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	bfbb      	ittet	lt
 800b4e8:	425b      	neglt	r3, r3
 800b4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ee:	9307      	strge	r3, [sp, #28]
 800b4f0:	9307      	strlt	r3, [sp, #28]
 800b4f2:	bfb8      	it	lt
 800b4f4:	9204      	strlt	r2, [sp, #16]
 800b4f6:	7823      	ldrb	r3, [r4, #0]
 800b4f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4fa:	d10a      	bne.n	800b512 <_vfiprintf_r+0x156>
 800b4fc:	7863      	ldrb	r3, [r4, #1]
 800b4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b500:	d132      	bne.n	800b568 <_vfiprintf_r+0x1ac>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	1d1a      	adds	r2, r3, #4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	9203      	str	r2, [sp, #12]
 800b50a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b50e:	3402      	adds	r4, #2
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5e8 <_vfiprintf_r+0x22c>
 800b516:	7821      	ldrb	r1, [r4, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4650      	mov	r0, sl
 800b51c:	f7f4 fe70 	bl	8000200 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_vfiprintf_r+0x176>
 800b522:	9b04      	ldr	r3, [sp, #16]
 800b524:	eba0 000a 	sub.w	r0, r0, sl
 800b528:	2240      	movs	r2, #64	@ 0x40
 800b52a:	4082      	lsls	r2, r0
 800b52c:	4313      	orrs	r3, r2
 800b52e:	3401      	adds	r4, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4829      	ldr	r0, [pc, #164]	@ (800b5dc <_vfiprintf_r+0x220>)
 800b538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b53c:	2206      	movs	r2, #6
 800b53e:	f7f4 fe5f 	bl	8000200 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d03f      	beq.n	800b5c6 <_vfiprintf_r+0x20a>
 800b546:	4b26      	ldr	r3, [pc, #152]	@ (800b5e0 <_vfiprintf_r+0x224>)
 800b548:	bb1b      	cbnz	r3, 800b592 <_vfiprintf_r+0x1d6>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b558:	443b      	add	r3, r7
 800b55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55c:	e76a      	b.n	800b434 <_vfiprintf_r+0x78>
 800b55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b562:	460c      	mov	r4, r1
 800b564:	2001      	movs	r0, #1
 800b566:	e7a8      	b.n	800b4ba <_vfiprintf_r+0xfe>
 800b568:	2300      	movs	r3, #0
 800b56a:	3401      	adds	r4, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	f04f 0c0a 	mov.w	ip, #10
 800b574:	4620      	mov	r0, r4
 800b576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b57a:	3a30      	subs	r2, #48	@ 0x30
 800b57c:	2a09      	cmp	r2, #9
 800b57e:	d903      	bls.n	800b588 <_vfiprintf_r+0x1cc>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0c6      	beq.n	800b512 <_vfiprintf_r+0x156>
 800b584:	9105      	str	r1, [sp, #20]
 800b586:	e7c4      	b.n	800b512 <_vfiprintf_r+0x156>
 800b588:	fb0c 2101 	mla	r1, ip, r1, r2
 800b58c:	4604      	mov	r4, r0
 800b58e:	2301      	movs	r3, #1
 800b590:	e7f0      	b.n	800b574 <_vfiprintf_r+0x1b8>
 800b592:	ab03      	add	r3, sp, #12
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	462a      	mov	r2, r5
 800b598:	4b12      	ldr	r3, [pc, #72]	@ (800b5e4 <_vfiprintf_r+0x228>)
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7fb f9fb 	bl	8006998 <_printf_float>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	1c78      	adds	r0, r7, #1
 800b5a6:	d1d6      	bne.n	800b556 <_vfiprintf_r+0x19a>
 800b5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5aa:	07d9      	lsls	r1, r3, #31
 800b5ac:	d405      	bmi.n	800b5ba <_vfiprintf_r+0x1fe>
 800b5ae:	89ab      	ldrh	r3, [r5, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d402      	bmi.n	800b5ba <_vfiprintf_r+0x1fe>
 800b5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5b6:	f7fc fa1f 	bl	80079f8 <__retarget_lock_release_recursive>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	f53f af1f 	bmi.w	800b400 <_vfiprintf_r+0x44>
 800b5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5c4:	e71e      	b.n	800b404 <_vfiprintf_r+0x48>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b05      	ldr	r3, [pc, #20]	@ (800b5e4 <_vfiprintf_r+0x228>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fb fc79 	bl	8006ec8 <_printf_i>
 800b5d6:	e7e4      	b.n	800b5a2 <_vfiprintf_r+0x1e6>
 800b5d8:	0800bc15 	.word	0x0800bc15
 800b5dc:	0800bc1f 	.word	0x0800bc1f
 800b5e0:	08006999 	.word	0x08006999
 800b5e4:	0800b399 	.word	0x0800b399
 800b5e8:	0800bc1b 	.word	0x0800bc1b

0800b5ec <__swbuf_r>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	460e      	mov	r6, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	b118      	cbz	r0, 800b5fe <__swbuf_r+0x12>
 800b5f6:	6a03      	ldr	r3, [r0, #32]
 800b5f8:	b90b      	cbnz	r3, 800b5fe <__swbuf_r+0x12>
 800b5fa:	f7fc f81d 	bl	8007638 <__sinit>
 800b5fe:	69a3      	ldr	r3, [r4, #24]
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	071a      	lsls	r2, r3, #28
 800b606:	d501      	bpl.n	800b60c <__swbuf_r+0x20>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b943      	cbnz	r3, 800b61e <__swbuf_r+0x32>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 f82a 	bl	800b668 <__swsetup_r>
 800b614:	b118      	cbz	r0, 800b61e <__swbuf_r+0x32>
 800b616:	f04f 37ff 	mov.w	r7, #4294967295
 800b61a:	4638      	mov	r0, r7
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	1a98      	subs	r0, r3, r2
 800b624:	6963      	ldr	r3, [r4, #20]
 800b626:	b2f6      	uxtb	r6, r6
 800b628:	4283      	cmp	r3, r0
 800b62a:	4637      	mov	r7, r6
 800b62c:	dc05      	bgt.n	800b63a <__swbuf_r+0x4e>
 800b62e:	4621      	mov	r1, r4
 800b630:	4628      	mov	r0, r5
 800b632:	f7ff f995 	bl	800a960 <_fflush_r>
 800b636:	2800      	cmp	r0, #0
 800b638:	d1ed      	bne.n	800b616 <__swbuf_r+0x2a>
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	6022      	str	r2, [r4, #0]
 800b646:	701e      	strb	r6, [r3, #0]
 800b648:	6962      	ldr	r2, [r4, #20]
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d004      	beq.n	800b65a <__swbuf_r+0x6e>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	07db      	lsls	r3, r3, #31
 800b654:	d5e1      	bpl.n	800b61a <__swbuf_r+0x2e>
 800b656:	2e0a      	cmp	r6, #10
 800b658:	d1df      	bne.n	800b61a <__swbuf_r+0x2e>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4628      	mov	r0, r5
 800b65e:	f7ff f97f 	bl	800a960 <_fflush_r>
 800b662:	2800      	cmp	r0, #0
 800b664:	d0d9      	beq.n	800b61a <__swbuf_r+0x2e>
 800b666:	e7d6      	b.n	800b616 <__swbuf_r+0x2a>

0800b668 <__swsetup_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4b29      	ldr	r3, [pc, #164]	@ (800b710 <__swsetup_r+0xa8>)
 800b66c:	4605      	mov	r5, r0
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	460c      	mov	r4, r1
 800b672:	b118      	cbz	r0, 800b67c <__swsetup_r+0x14>
 800b674:	6a03      	ldr	r3, [r0, #32]
 800b676:	b90b      	cbnz	r3, 800b67c <__swsetup_r+0x14>
 800b678:	f7fb ffde 	bl	8007638 <__sinit>
 800b67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b680:	0719      	lsls	r1, r3, #28
 800b682:	d422      	bmi.n	800b6ca <__swsetup_r+0x62>
 800b684:	06da      	lsls	r2, r3, #27
 800b686:	d407      	bmi.n	800b698 <__swsetup_r+0x30>
 800b688:	2209      	movs	r2, #9
 800b68a:	602a      	str	r2, [r5, #0]
 800b68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e033      	b.n	800b700 <__swsetup_r+0x98>
 800b698:	0758      	lsls	r0, r3, #29
 800b69a:	d512      	bpl.n	800b6c2 <__swsetup_r+0x5a>
 800b69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b69e:	b141      	cbz	r1, 800b6b2 <__swsetup_r+0x4a>
 800b6a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6a4:	4299      	cmp	r1, r3
 800b6a6:	d002      	beq.n	800b6ae <__swsetup_r+0x46>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f7fd f831 	bl	8008710 <_free_r>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6063      	str	r3, [r4, #4]
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f043 0308 	orr.w	r3, r3, #8
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	b94b      	cbnz	r3, 800b6e2 <__swsetup_r+0x7a>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d8:	d003      	beq.n	800b6e2 <__swsetup_r+0x7a>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 f88b 	bl	800b7f8 <__smakebuf_r>
 800b6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e6:	f013 0201 	ands.w	r2, r3, #1
 800b6ea:	d00a      	beq.n	800b702 <__swsetup_r+0x9a>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	60a2      	str	r2, [r4, #8]
 800b6f0:	6962      	ldr	r2, [r4, #20]
 800b6f2:	4252      	negs	r2, r2
 800b6f4:	61a2      	str	r2, [r4, #24]
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	b942      	cbnz	r2, 800b70c <__swsetup_r+0xa4>
 800b6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6fe:	d1c5      	bne.n	800b68c <__swsetup_r+0x24>
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	0799      	lsls	r1, r3, #30
 800b704:	bf58      	it	pl
 800b706:	6962      	ldrpl	r2, [r4, #20]
 800b708:	60a2      	str	r2, [r4, #8]
 800b70a:	e7f4      	b.n	800b6f6 <__swsetup_r+0x8e>
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7f7      	b.n	800b700 <__swsetup_r+0x98>
 800b710:	20000030 	.word	0x20000030

0800b714 <_raise_r>:
 800b714:	291f      	cmp	r1, #31
 800b716:	b538      	push	{r3, r4, r5, lr}
 800b718:	4605      	mov	r5, r0
 800b71a:	460c      	mov	r4, r1
 800b71c:	d904      	bls.n	800b728 <_raise_r+0x14>
 800b71e:	2316      	movs	r3, #22
 800b720:	6003      	str	r3, [r0, #0]
 800b722:	f04f 30ff 	mov.w	r0, #4294967295
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b72a:	b112      	cbz	r2, 800b732 <_raise_r+0x1e>
 800b72c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b730:	b94b      	cbnz	r3, 800b746 <_raise_r+0x32>
 800b732:	4628      	mov	r0, r5
 800b734:	f000 f830 	bl	800b798 <_getpid_r>
 800b738:	4622      	mov	r2, r4
 800b73a:	4601      	mov	r1, r0
 800b73c:	4628      	mov	r0, r5
 800b73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b742:	f000 b817 	b.w	800b774 <_kill_r>
 800b746:	2b01      	cmp	r3, #1
 800b748:	d00a      	beq.n	800b760 <_raise_r+0x4c>
 800b74a:	1c59      	adds	r1, r3, #1
 800b74c:	d103      	bne.n	800b756 <_raise_r+0x42>
 800b74e:	2316      	movs	r3, #22
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	2001      	movs	r0, #1
 800b754:	e7e7      	b.n	800b726 <_raise_r+0x12>
 800b756:	2100      	movs	r1, #0
 800b758:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b75c:	4620      	mov	r0, r4
 800b75e:	4798      	blx	r3
 800b760:	2000      	movs	r0, #0
 800b762:	e7e0      	b.n	800b726 <_raise_r+0x12>

0800b764 <raise>:
 800b764:	4b02      	ldr	r3, [pc, #8]	@ (800b770 <raise+0xc>)
 800b766:	4601      	mov	r1, r0
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f7ff bfd3 	b.w	800b714 <_raise_r>
 800b76e:	bf00      	nop
 800b770:	20000030 	.word	0x20000030

0800b774 <_kill_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	@ (800b794 <_kill_r+0x20>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	4611      	mov	r1, r2
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	f7f6 feef 	bl	8002564 <_kill>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d102      	bne.n	800b790 <_kill_r+0x1c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b103      	cbz	r3, 800b790 <_kill_r+0x1c>
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	20000c54 	.word	0x20000c54

0800b798 <_getpid_r>:
 800b798:	f7f6 bedc 	b.w	8002554 <_getpid>

0800b79c <_malloc_usable_size_r>:
 800b79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a0:	1f18      	subs	r0, r3, #4
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	bfbc      	itt	lt
 800b7a6:	580b      	ldrlt	r3, [r1, r0]
 800b7a8:	18c0      	addlt	r0, r0, r3
 800b7aa:	4770      	bx	lr

0800b7ac <__swhatbuf_r>:
 800b7ac:	b570      	push	{r4, r5, r6, lr}
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b4:	2900      	cmp	r1, #0
 800b7b6:	b096      	sub	sp, #88	@ 0x58
 800b7b8:	4615      	mov	r5, r2
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	da0d      	bge.n	800b7da <__swhatbuf_r+0x2e>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7c4:	f04f 0100 	mov.w	r1, #0
 800b7c8:	bf14      	ite	ne
 800b7ca:	2340      	movne	r3, #64	@ 0x40
 800b7cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	6031      	str	r1, [r6, #0]
 800b7d4:	602b      	str	r3, [r5, #0]
 800b7d6:	b016      	add	sp, #88	@ 0x58
 800b7d8:	bd70      	pop	{r4, r5, r6, pc}
 800b7da:	466a      	mov	r2, sp
 800b7dc:	f000 f848 	bl	800b870 <_fstat_r>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	dbec      	blt.n	800b7be <__swhatbuf_r+0x12>
 800b7e4:	9901      	ldr	r1, [sp, #4]
 800b7e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7ee:	4259      	negs	r1, r3
 800b7f0:	4159      	adcs	r1, r3
 800b7f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7f6:	e7eb      	b.n	800b7d0 <__swhatbuf_r+0x24>

0800b7f8 <__smakebuf_r>:
 800b7f8:	898b      	ldrh	r3, [r1, #12]
 800b7fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7fc:	079d      	lsls	r5, r3, #30
 800b7fe:	4606      	mov	r6, r0
 800b800:	460c      	mov	r4, r1
 800b802:	d507      	bpl.n	800b814 <__smakebuf_r+0x1c>
 800b804:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	2301      	movs	r3, #1
 800b80e:	6163      	str	r3, [r4, #20]
 800b810:	b003      	add	sp, #12
 800b812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b814:	ab01      	add	r3, sp, #4
 800b816:	466a      	mov	r2, sp
 800b818:	f7ff ffc8 	bl	800b7ac <__swhatbuf_r>
 800b81c:	9f00      	ldr	r7, [sp, #0]
 800b81e:	4605      	mov	r5, r0
 800b820:	4639      	mov	r1, r7
 800b822:	4630      	mov	r0, r6
 800b824:	f7fc ffe8 	bl	80087f8 <_malloc_r>
 800b828:	b948      	cbnz	r0, 800b83e <__smakebuf_r+0x46>
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	059a      	lsls	r2, r3, #22
 800b830:	d4ee      	bmi.n	800b810 <__smakebuf_r+0x18>
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	f043 0302 	orr.w	r3, r3, #2
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	e7e2      	b.n	800b804 <__smakebuf_r+0xc>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	6020      	str	r0, [r4, #0]
 800b842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	9b01      	ldr	r3, [sp, #4]
 800b84a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b84e:	b15b      	cbz	r3, 800b868 <__smakebuf_r+0x70>
 800b850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b854:	4630      	mov	r0, r6
 800b856:	f000 f81d 	bl	800b894 <_isatty_r>
 800b85a:	b128      	cbz	r0, 800b868 <__smakebuf_r+0x70>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	f023 0303 	bic.w	r3, r3, #3
 800b862:	f043 0301 	orr.w	r3, r3, #1
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	431d      	orrs	r5, r3
 800b86c:	81a5      	strh	r5, [r4, #12]
 800b86e:	e7cf      	b.n	800b810 <__smakebuf_r+0x18>

0800b870 <_fstat_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d07      	ldr	r5, [pc, #28]	@ (800b890 <_fstat_r+0x20>)
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	4611      	mov	r1, r2
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	f7f6 fed1 	bl	8002624 <_fstat>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d102      	bne.n	800b88c <_fstat_r+0x1c>
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	b103      	cbz	r3, 800b88c <_fstat_r+0x1c>
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	bd38      	pop	{r3, r4, r5, pc}
 800b88e:	bf00      	nop
 800b890:	20000c54 	.word	0x20000c54

0800b894 <_isatty_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d06      	ldr	r5, [pc, #24]	@ (800b8b0 <_isatty_r+0x1c>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	f7f6 fed0 	bl	8002644 <_isatty>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_isatty_r+0x1a>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_isatty_r+0x1a>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	20000c54 	.word	0x20000c54

0800b8b4 <_init>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr

0800b8c0 <_fini>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr
